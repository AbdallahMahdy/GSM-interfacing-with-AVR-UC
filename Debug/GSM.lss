
GSM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f2  00800060  000038f2  00003986  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000f0  00800152  00800152  00003a78  2**0
                  ALLOC
  3 .stab         00002a30  00000000  00000000  00003a78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001251  00000000  00000000  000064a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000076f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007839  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000079a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000095f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a4dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b28c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b3ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b679  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000be47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ef       	ldi	r30, 0xF2	; 242
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 35       	cpi	r26, 0x52	; 82
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 e5       	ldi	r26, 0x52	; 82
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 34       	cpi	r26, 0x42	; 66
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <main>
      8a:	0c 94 77 1c 	jmp	0x38ee	; 0x38ee <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 26 19 	jmp	0x324c	; 0x324c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e4       	ldi	r26, 0x4A	; 74
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 42 19 	jmp	0x3284	; 0x3284 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 32 19 	jmp	0x3264	; 0x3264 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4e 19 	jmp	0x329c	; 0x329c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 32 19 	jmp	0x3264	; 0x3264 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4e 19 	jmp	0x329c	; 0x329c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 26 19 	jmp	0x324c	; 0x324c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e4       	ldi	r24, 0x4A	; 74
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 42 19 	jmp	0x3284	; 0x3284 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 32 19 	jmp	0x3264	; 0x3264 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 4e 19 	jmp	0x329c	; 0x329c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 32 19 	jmp	0x3264	; 0x3264 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 4e 19 	jmp	0x329c	; 0x329c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 32 19 	jmp	0x3264	; 0x3264 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 4e 19 	jmp	0x329c	; 0x329c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 36 19 	jmp	0x326c	; 0x326c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 52 19 	jmp	0x32a4	; 0x32a4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_voidSetPinDirection>:
#include<avr/delay.h>
#include "utils.h"
#include<avr/io.h>
extern void DIO_voidSetPinDirection(uint8_t Port,uint8_t PinNum,uint8_t Dir)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <DIO_voidSetPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <DIO_voidSetPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	3d 83       	std	Y+5, r19	; 0x05
     b62:	2c 83       	std	Y+4, r18	; 0x04
     b64:	8c 81       	ldd	r24, Y+4	; 0x04
     b66:	9d 81       	ldd	r25, Y+5	; 0x05
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	91 05       	cpc	r25, r1
     b6c:	09 f4       	brne	.+2      	; 0xb70 <DIO_voidSetPinDirection+0x2a>
     b6e:	46 c0       	rjmp	.+140    	; 0xbfc <DIO_voidSetPinDirection+0xb6>
     b70:	2c 81       	ldd	r18, Y+4	; 0x04
     b72:	3d 81       	ldd	r19, Y+5	; 0x05
     b74:	22 30       	cpi	r18, 0x02	; 2
     b76:	31 05       	cpc	r19, r1
     b78:	2c f4       	brge	.+10     	; 0xb84 <DIO_voidSetPinDirection+0x3e>
     b7a:	8c 81       	ldd	r24, Y+4	; 0x04
     b7c:	9d 81       	ldd	r25, Y+5	; 0x05
     b7e:	00 97       	sbiw	r24, 0x00	; 0
     b80:	71 f0       	breq	.+28     	; 0xb9e <DIO_voidSetPinDirection+0x58>
     b82:	c7 c0       	rjmp	.+398    	; 0xd12 <DIO_voidSetPinDirection+0x1cc>
     b84:	2c 81       	ldd	r18, Y+4	; 0x04
     b86:	3d 81       	ldd	r19, Y+5	; 0x05
     b88:	22 30       	cpi	r18, 0x02	; 2
     b8a:	31 05       	cpc	r19, r1
     b8c:	09 f4       	brne	.+2      	; 0xb90 <DIO_voidSetPinDirection+0x4a>
     b8e:	65 c0       	rjmp	.+202    	; 0xc5a <DIO_voidSetPinDirection+0x114>
     b90:	8c 81       	ldd	r24, Y+4	; 0x04
     b92:	9d 81       	ldd	r25, Y+5	; 0x05
     b94:	83 30       	cpi	r24, 0x03	; 3
     b96:	91 05       	cpc	r25, r1
     b98:	09 f4       	brne	.+2      	; 0xb9c <DIO_voidSetPinDirection+0x56>
     b9a:	8e c0       	rjmp	.+284    	; 0xcb8 <DIO_voidSetPinDirection+0x172>
     b9c:	ba c0       	rjmp	.+372    	; 0xd12 <DIO_voidSetPinDirection+0x1cc>
	{
	case 0:
		if(Dir==0)
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	88 23       	and	r24, r24
     ba2:	a1 f4       	brne	.+40     	; 0xbcc <DIO_voidSetPinDirection+0x86>
			clr_bit(DDRA,PinNum);
     ba4:	aa e3       	ldi	r26, 0x3A	; 58
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	ea e3       	ldi	r30, 0x3A	; 58
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	48 2f       	mov	r20, r24
     bb0:	8a 81       	ldd	r24, Y+2	; 0x02
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	02 2e       	mov	r0, r18
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <DIO_voidSetPinDirection+0x7c>
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	0a 94       	dec	r0
     bc4:	e2 f7       	brpl	.-8      	; 0xbbe <DIO_voidSetPinDirection+0x78>
     bc6:	80 95       	com	r24
     bc8:	84 23       	and	r24, r20
     bca:	8c 93       	st	X, r24
		if(Dir==1)
     bcc:	8b 81       	ldd	r24, Y+3	; 0x03
     bce:	81 30       	cpi	r24, 0x01	; 1
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <DIO_voidSetPinDirection+0x8e>
     bd2:	9f c0       	rjmp	.+318    	; 0xd12 <DIO_voidSetPinDirection+0x1cc>
			set_bit(DDRA,PinNum);
     bd4:	aa e3       	ldi	r26, 0x3A	; 58
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	ea e3       	ldi	r30, 0x3A	; 58
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	80 81       	ld	r24, Z
     bde:	48 2f       	mov	r20, r24
     be0:	8a 81       	ldd	r24, Y+2	; 0x02
     be2:	28 2f       	mov	r18, r24
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	02 2e       	mov	r0, r18
     bec:	02 c0       	rjmp	.+4      	; 0xbf2 <DIO_voidSetPinDirection+0xac>
     bee:	88 0f       	add	r24, r24
     bf0:	99 1f       	adc	r25, r25
     bf2:	0a 94       	dec	r0
     bf4:	e2 f7       	brpl	.-8      	; 0xbee <DIO_voidSetPinDirection+0xa8>
     bf6:	84 2b       	or	r24, r20
     bf8:	8c 93       	st	X, r24
     bfa:	8b c0       	rjmp	.+278    	; 0xd12 <DIO_voidSetPinDirection+0x1cc>
			break;
	case 1:
			if(Dir==0)
     bfc:	8b 81       	ldd	r24, Y+3	; 0x03
     bfe:	88 23       	and	r24, r24
     c00:	a1 f4       	brne	.+40     	; 0xc2a <DIO_voidSetPinDirection+0xe4>
				clr_bit(DDRB,PinNum);
     c02:	a7 e3       	ldi	r26, 0x37	; 55
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	e7 e3       	ldi	r30, 0x37	; 55
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	48 2f       	mov	r20, r24
     c0e:	8a 81       	ldd	r24, Y+2	; 0x02
     c10:	28 2f       	mov	r18, r24
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	02 2e       	mov	r0, r18
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <DIO_voidSetPinDirection+0xda>
     c1c:	88 0f       	add	r24, r24
     c1e:	99 1f       	adc	r25, r25
     c20:	0a 94       	dec	r0
     c22:	e2 f7       	brpl	.-8      	; 0xc1c <DIO_voidSetPinDirection+0xd6>
     c24:	80 95       	com	r24
     c26:	84 23       	and	r24, r20
     c28:	8c 93       	st	X, r24
			if(Dir==1)
     c2a:	8b 81       	ldd	r24, Y+3	; 0x03
     c2c:	81 30       	cpi	r24, 0x01	; 1
     c2e:	09 f0       	breq	.+2      	; 0xc32 <DIO_voidSetPinDirection+0xec>
     c30:	70 c0       	rjmp	.+224    	; 0xd12 <DIO_voidSetPinDirection+0x1cc>
				set_bit(DDRB,PinNum);
     c32:	a7 e3       	ldi	r26, 0x37	; 55
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	e7 e3       	ldi	r30, 0x37	; 55
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	48 2f       	mov	r20, r24
     c3e:	8a 81       	ldd	r24, Y+2	; 0x02
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	02 2e       	mov	r0, r18
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <DIO_voidSetPinDirection+0x10a>
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	0a 94       	dec	r0
     c52:	e2 f7       	brpl	.-8      	; 0xc4c <DIO_voidSetPinDirection+0x106>
     c54:	84 2b       	or	r24, r20
     c56:	8c 93       	st	X, r24
     c58:	5c c0       	rjmp	.+184    	; 0xd12 <DIO_voidSetPinDirection+0x1cc>
				break;
	case 2:
			if(Dir==0)
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	88 23       	and	r24, r24
     c5e:	a1 f4       	brne	.+40     	; 0xc88 <DIO_voidSetPinDirection+0x142>
				clr_bit(DDRC,PinNum);
     c60:	a4 e3       	ldi	r26, 0x34	; 52
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	e4 e3       	ldi	r30, 0x34	; 52
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	48 2f       	mov	r20, r24
     c6c:	8a 81       	ldd	r24, Y+2	; 0x02
     c6e:	28 2f       	mov	r18, r24
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	02 2e       	mov	r0, r18
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <DIO_voidSetPinDirection+0x138>
     c7a:	88 0f       	add	r24, r24
     c7c:	99 1f       	adc	r25, r25
     c7e:	0a 94       	dec	r0
     c80:	e2 f7       	brpl	.-8      	; 0xc7a <DIO_voidSetPinDirection+0x134>
     c82:	80 95       	com	r24
     c84:	84 23       	and	r24, r20
     c86:	8c 93       	st	X, r24
			if(Dir==1)
     c88:	8b 81       	ldd	r24, Y+3	; 0x03
     c8a:	81 30       	cpi	r24, 0x01	; 1
     c8c:	09 f0       	breq	.+2      	; 0xc90 <DIO_voidSetPinDirection+0x14a>
     c8e:	41 c0       	rjmp	.+130    	; 0xd12 <DIO_voidSetPinDirection+0x1cc>
				set_bit(DDRC,PinNum);
     c90:	a4 e3       	ldi	r26, 0x34	; 52
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	e4 e3       	ldi	r30, 0x34	; 52
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	48 2f       	mov	r20, r24
     c9c:	8a 81       	ldd	r24, Y+2	; 0x02
     c9e:	28 2f       	mov	r18, r24
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	02 2e       	mov	r0, r18
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <DIO_voidSetPinDirection+0x168>
     caa:	88 0f       	add	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	0a 94       	dec	r0
     cb0:	e2 f7       	brpl	.-8      	; 0xcaa <DIO_voidSetPinDirection+0x164>
     cb2:	84 2b       	or	r24, r20
     cb4:	8c 93       	st	X, r24
     cb6:	2d c0       	rjmp	.+90     	; 0xd12 <DIO_voidSetPinDirection+0x1cc>
				break;
	case 3:
			if(Dir==0)
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	88 23       	and	r24, r24
     cbc:	a1 f4       	brne	.+40     	; 0xce6 <DIO_voidSetPinDirection+0x1a0>
				clr_bit(DDRD,PinNum);
     cbe:	a1 e3       	ldi	r26, 0x31	; 49
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	e1 e3       	ldi	r30, 0x31	; 49
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	48 2f       	mov	r20, r24
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
     ccc:	28 2f       	mov	r18, r24
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	02 2e       	mov	r0, r18
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <DIO_voidSetPinDirection+0x196>
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	0a 94       	dec	r0
     cde:	e2 f7       	brpl	.-8      	; 0xcd8 <DIO_voidSetPinDirection+0x192>
     ce0:	80 95       	com	r24
     ce2:	84 23       	and	r24, r20
     ce4:	8c 93       	st	X, r24
			if(Dir==1)
     ce6:	8b 81       	ldd	r24, Y+3	; 0x03
     ce8:	81 30       	cpi	r24, 0x01	; 1
     cea:	99 f4       	brne	.+38     	; 0xd12 <DIO_voidSetPinDirection+0x1cc>
				set_bit(DDRD,PinNum);
     cec:	a1 e3       	ldi	r26, 0x31	; 49
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e1 e3       	ldi	r30, 0x31	; 49
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	48 2f       	mov	r20, r24
     cf8:	8a 81       	ldd	r24, Y+2	; 0x02
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	02 2e       	mov	r0, r18
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <DIO_voidSetPinDirection+0x1c4>
     d06:	88 0f       	add	r24, r24
     d08:	99 1f       	adc	r25, r25
     d0a:	0a 94       	dec	r0
     d0c:	e2 f7       	brpl	.-8      	; 0xd06 <DIO_voidSetPinDirection+0x1c0>
     d0e:	84 2b       	or	r24, r20
     d10:	8c 93       	st	X, r24
				break;

	}
	}
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
     d1c:	cf 91       	pop	r28
     d1e:	df 91       	pop	r29
     d20:	08 95       	ret

00000d22 <DIO_voidSetPinValue>:
extern void DIO_voidSetPinValue(uint8_t Port,uint8_t PinNum,uint8_t value)
{
     d22:	df 93       	push	r29
     d24:	cf 93       	push	r28
     d26:	00 d0       	rcall	.+0      	; 0xd28 <DIO_voidSetPinValue+0x6>
     d28:	00 d0       	rcall	.+0      	; 0xd2a <DIO_voidSetPinValue+0x8>
     d2a:	0f 92       	push	r0
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	89 83       	std	Y+1, r24	; 0x01
     d32:	6a 83       	std	Y+2, r22	; 0x02
     d34:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	28 2f       	mov	r18, r24
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	3d 83       	std	Y+5, r19	; 0x05
     d3e:	2c 83       	std	Y+4, r18	; 0x04
     d40:	8c 81       	ldd	r24, Y+4	; 0x04
     d42:	9d 81       	ldd	r25, Y+5	; 0x05
     d44:	81 30       	cpi	r24, 0x01	; 1
     d46:	91 05       	cpc	r25, r1
     d48:	09 f4       	brne	.+2      	; 0xd4c <DIO_voidSetPinValue+0x2a>
     d4a:	46 c0       	rjmp	.+140    	; 0xdd8 <DIO_voidSetPinValue+0xb6>
     d4c:	2c 81       	ldd	r18, Y+4	; 0x04
     d4e:	3d 81       	ldd	r19, Y+5	; 0x05
     d50:	22 30       	cpi	r18, 0x02	; 2
     d52:	31 05       	cpc	r19, r1
     d54:	2c f4       	brge	.+10     	; 0xd60 <DIO_voidSetPinValue+0x3e>
     d56:	8c 81       	ldd	r24, Y+4	; 0x04
     d58:	9d 81       	ldd	r25, Y+5	; 0x05
     d5a:	00 97       	sbiw	r24, 0x00	; 0
     d5c:	71 f0       	breq	.+28     	; 0xd7a <DIO_voidSetPinValue+0x58>
     d5e:	c7 c0       	rjmp	.+398    	; 0xeee <DIO_voidSetPinValue+0x1cc>
     d60:	2c 81       	ldd	r18, Y+4	; 0x04
     d62:	3d 81       	ldd	r19, Y+5	; 0x05
     d64:	22 30       	cpi	r18, 0x02	; 2
     d66:	31 05       	cpc	r19, r1
     d68:	09 f4       	brne	.+2      	; 0xd6c <DIO_voidSetPinValue+0x4a>
     d6a:	65 c0       	rjmp	.+202    	; 0xe36 <DIO_voidSetPinValue+0x114>
     d6c:	8c 81       	ldd	r24, Y+4	; 0x04
     d6e:	9d 81       	ldd	r25, Y+5	; 0x05
     d70:	83 30       	cpi	r24, 0x03	; 3
     d72:	91 05       	cpc	r25, r1
     d74:	09 f4       	brne	.+2      	; 0xd78 <DIO_voidSetPinValue+0x56>
     d76:	8e c0       	rjmp	.+284    	; 0xe94 <DIO_voidSetPinValue+0x172>
     d78:	ba c0       	rjmp	.+372    	; 0xeee <DIO_voidSetPinValue+0x1cc>
	{
	case 0:
		if(value==0)
     d7a:	8b 81       	ldd	r24, Y+3	; 0x03
     d7c:	88 23       	and	r24, r24
     d7e:	a1 f4       	brne	.+40     	; 0xda8 <DIO_voidSetPinValue+0x86>
			clr_bit(PORTA,PinNum);
     d80:	ab e3       	ldi	r26, 0x3B	; 59
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	eb e3       	ldi	r30, 0x3B	; 59
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	48 2f       	mov	r20, r24
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	02 2e       	mov	r0, r18
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <DIO_voidSetPinValue+0x7c>
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	0a 94       	dec	r0
     da0:	e2 f7       	brpl	.-8      	; 0xd9a <DIO_voidSetPinValue+0x78>
     da2:	80 95       	com	r24
     da4:	84 23       	and	r24, r20
     da6:	8c 93       	st	X, r24
		if(value==1)
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	81 30       	cpi	r24, 0x01	; 1
     dac:	09 f0       	breq	.+2      	; 0xdb0 <DIO_voidSetPinValue+0x8e>
     dae:	9f c0       	rjmp	.+318    	; 0xeee <DIO_voidSetPinValue+0x1cc>
			set_bit(PORTA,PinNum);
     db0:	ab e3       	ldi	r26, 0x3B	; 59
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	eb e3       	ldi	r30, 0x3B	; 59
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	48 2f       	mov	r20, r24
     dbc:	8a 81       	ldd	r24, Y+2	; 0x02
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	02 2e       	mov	r0, r18
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <DIO_voidSetPinValue+0xac>
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	0a 94       	dec	r0
     dd0:	e2 f7       	brpl	.-8      	; 0xdca <DIO_voidSetPinValue+0xa8>
     dd2:	84 2b       	or	r24, r20
     dd4:	8c 93       	st	X, r24
     dd6:	8b c0       	rjmp	.+278    	; 0xeee <DIO_voidSetPinValue+0x1cc>
			break;
	case 1:
			if(value==0)
     dd8:	8b 81       	ldd	r24, Y+3	; 0x03
     dda:	88 23       	and	r24, r24
     ddc:	a1 f4       	brne	.+40     	; 0xe06 <DIO_voidSetPinValue+0xe4>
				clr_bit(PORTB,PinNum);
     dde:	a8 e3       	ldi	r26, 0x38	; 56
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e8 e3       	ldi	r30, 0x38	; 56
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	48 2f       	mov	r20, r24
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	02 2e       	mov	r0, r18
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <DIO_voidSetPinValue+0xda>
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	0a 94       	dec	r0
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <DIO_voidSetPinValue+0xd6>
     e00:	80 95       	com	r24
     e02:	84 23       	and	r24, r20
     e04:	8c 93       	st	X, r24
			if(value==1)
     e06:	8b 81       	ldd	r24, Y+3	; 0x03
     e08:	81 30       	cpi	r24, 0x01	; 1
     e0a:	09 f0       	breq	.+2      	; 0xe0e <DIO_voidSetPinValue+0xec>
     e0c:	70 c0       	rjmp	.+224    	; 0xeee <DIO_voidSetPinValue+0x1cc>
				set_bit(PORTB,PinNum);
     e0e:	a8 e3       	ldi	r26, 0x38	; 56
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e8 e3       	ldi	r30, 0x38	; 56
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	48 2f       	mov	r20, r24
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	02 2e       	mov	r0, r18
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <DIO_voidSetPinValue+0x10a>
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	0a 94       	dec	r0
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <DIO_voidSetPinValue+0x106>
     e30:	84 2b       	or	r24, r20
     e32:	8c 93       	st	X, r24
     e34:	5c c0       	rjmp	.+184    	; 0xeee <DIO_voidSetPinValue+0x1cc>
				break;
	case 2:
			if(value==0)
     e36:	8b 81       	ldd	r24, Y+3	; 0x03
     e38:	88 23       	and	r24, r24
     e3a:	a1 f4       	brne	.+40     	; 0xe64 <DIO_voidSetPinValue+0x142>
				clr_bit(PORTC,PinNum);
     e3c:	a5 e3       	ldi	r26, 0x35	; 53
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e5 e3       	ldi	r30, 0x35	; 53
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	48 2f       	mov	r20, r24
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 2e       	mov	r0, r18
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <DIO_voidSetPinValue+0x138>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	0a 94       	dec	r0
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <DIO_voidSetPinValue+0x134>
     e5e:	80 95       	com	r24
     e60:	84 23       	and	r24, r20
     e62:	8c 93       	st	X, r24
			if(value==1)
     e64:	8b 81       	ldd	r24, Y+3	; 0x03
     e66:	81 30       	cpi	r24, 0x01	; 1
     e68:	09 f0       	breq	.+2      	; 0xe6c <DIO_voidSetPinValue+0x14a>
     e6a:	41 c0       	rjmp	.+130    	; 0xeee <DIO_voidSetPinValue+0x1cc>
				set_bit(PORTC,PinNum);
     e6c:	a5 e3       	ldi	r26, 0x35	; 53
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e5 e3       	ldi	r30, 0x35	; 53
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	48 2f       	mov	r20, r24
     e78:	8a 81       	ldd	r24, Y+2	; 0x02
     e7a:	28 2f       	mov	r18, r24
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	02 2e       	mov	r0, r18
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <DIO_voidSetPinValue+0x168>
     e86:	88 0f       	add	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	0a 94       	dec	r0
     e8c:	e2 f7       	brpl	.-8      	; 0xe86 <DIO_voidSetPinValue+0x164>
     e8e:	84 2b       	or	r24, r20
     e90:	8c 93       	st	X, r24
     e92:	2d c0       	rjmp	.+90     	; 0xeee <DIO_voidSetPinValue+0x1cc>
				break;
	case 3:
			if(value==0)
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	88 23       	and	r24, r24
     e98:	a1 f4       	brne	.+40     	; 0xec2 <DIO_voidSetPinValue+0x1a0>
				clr_bit(PORTD,PinNum);
     e9a:	a2 e3       	ldi	r26, 0x32	; 50
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e2 e3       	ldi	r30, 0x32	; 50
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	48 2f       	mov	r20, r24
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	02 2e       	mov	r0, r18
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <DIO_voidSetPinValue+0x196>
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	0a 94       	dec	r0
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <DIO_voidSetPinValue+0x192>
     ebc:	80 95       	com	r24
     ebe:	84 23       	and	r24, r20
     ec0:	8c 93       	st	X, r24
			if(value==1)
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	81 30       	cpi	r24, 0x01	; 1
     ec6:	99 f4       	brne	.+38     	; 0xeee <DIO_voidSetPinValue+0x1cc>
				set_bit(PORTD,PinNum);
     ec8:	a2 e3       	ldi	r26, 0x32	; 50
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e2 e3       	ldi	r30, 0x32	; 50
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 2e       	mov	r0, r18
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <DIO_voidSetPinValue+0x1c4>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	0a 94       	dec	r0
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <DIO_voidSetPinValue+0x1c0>
     eea:	84 2b       	or	r24, r20
     eec:	8c 93       	st	X, r24
				break;

	}
	}
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <DIO_uint8_tGetPinValue>:
extern uint8_t DIO_uint8_tGetPinValue(uint8_t Port ,uint8_t PinNum)
		{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	00 d0       	rcall	.+0      	; 0xf04 <DIO_uint8_tGetPinValue+0x6>
     f04:	00 d0       	rcall	.+0      	; 0xf06 <DIO_uint8_tGetPinValue+0x8>
     f06:	00 d0       	rcall	.+0      	; 0xf08 <DIO_uint8_tGetPinValue+0xa>
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	89 83       	std	Y+1, r24	; 0x01
     f0e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	3d 83       	std	Y+5, r19	; 0x05
     f18:	2c 83       	std	Y+4, r18	; 0x04
     f1a:	4c 81       	ldd	r20, Y+4	; 0x04
     f1c:	5d 81       	ldd	r21, Y+5	; 0x05
     f1e:	41 30       	cpi	r20, 0x01	; 1
     f20:	51 05       	cpc	r21, r1
     f22:	b1 f1       	breq	.+108    	; 0xf90 <DIO_uint8_tGetPinValue+0x92>
     f24:	8c 81       	ldd	r24, Y+4	; 0x04
     f26:	9d 81       	ldd	r25, Y+5	; 0x05
     f28:	82 30       	cpi	r24, 0x02	; 2
     f2a:	91 05       	cpc	r25, r1
     f2c:	34 f4       	brge	.+12     	; 0xf3a <DIO_uint8_tGetPinValue+0x3c>
     f2e:	2c 81       	ldd	r18, Y+4	; 0x04
     f30:	3d 81       	ldd	r19, Y+5	; 0x05
     f32:	21 15       	cp	r18, r1
     f34:	31 05       	cpc	r19, r1
     f36:	71 f0       	breq	.+28     	; 0xf54 <DIO_uint8_tGetPinValue+0x56>
     f38:	85 c0       	rjmp	.+266    	; 0x1044 <DIO_uint8_tGetPinValue+0x146>
     f3a:	4c 81       	ldd	r20, Y+4	; 0x04
     f3c:	5d 81       	ldd	r21, Y+5	; 0x05
     f3e:	42 30       	cpi	r20, 0x02	; 2
     f40:	51 05       	cpc	r21, r1
     f42:	09 f4       	brne	.+2      	; 0xf46 <DIO_uint8_tGetPinValue+0x48>
     f44:	43 c0       	rjmp	.+134    	; 0xfcc <DIO_uint8_tGetPinValue+0xce>
     f46:	8c 81       	ldd	r24, Y+4	; 0x04
     f48:	9d 81       	ldd	r25, Y+5	; 0x05
     f4a:	83 30       	cpi	r24, 0x03	; 3
     f4c:	91 05       	cpc	r25, r1
     f4e:	09 f4       	brne	.+2      	; 0xf52 <DIO_uint8_tGetPinValue+0x54>
     f50:	5b c0       	rjmp	.+182    	; 0x1008 <DIO_uint8_tGetPinValue+0x10a>
     f52:	78 c0       	rjmp	.+240    	; 0x1044 <DIO_uint8_tGetPinValue+0x146>

	{
	case 0:
		return get_bit(PINA,PinNum);
     f54:	e9 e3       	ldi	r30, 0x39	; 57
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	48 2f       	mov	r20, r24
     f5c:	50 e0       	ldi	r21, 0x00	; 0
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <DIO_uint8_tGetPinValue+0x70>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	2a 95       	dec	r18
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <DIO_uint8_tGetPinValue+0x6c>
     f72:	9a 01       	movw	r18, r20
     f74:	28 23       	and	r18, r24
     f76:	39 23       	and	r19, r25
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	88 2f       	mov	r24, r24
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	a9 01       	movw	r20, r18
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <DIO_uint8_tGetPinValue+0x88>
     f82:	55 95       	asr	r21
     f84:	47 95       	ror	r20
     f86:	8a 95       	dec	r24
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <DIO_uint8_tGetPinValue+0x84>
     f8a:	ca 01       	movw	r24, r20
     f8c:	8b 83       	std	Y+3, r24	; 0x03
     f8e:	5b c0       	rjmp	.+182    	; 0x1046 <DIO_uint8_tGetPinValue+0x148>
		break;
	case 1:
			return get_bit(PINB,PinNum);
     f90:	e6 e3       	ldi	r30, 0x36	; 54
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	48 2f       	mov	r20, r24
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <DIO_uint8_tGetPinValue+0xac>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	2a 95       	dec	r18
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <DIO_uint8_tGetPinValue+0xa8>
     fae:	9a 01       	movw	r18, r20
     fb0:	28 23       	and	r18, r24
     fb2:	39 23       	and	r19, r25
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	88 2f       	mov	r24, r24
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	a9 01       	movw	r20, r18
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <DIO_uint8_tGetPinValue+0xc4>
     fbe:	55 95       	asr	r21
     fc0:	47 95       	ror	r20
     fc2:	8a 95       	dec	r24
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <DIO_uint8_tGetPinValue+0xc0>
     fc6:	ca 01       	movw	r24, r20
     fc8:	8b 83       	std	Y+3, r24	; 0x03
     fca:	3d c0       	rjmp	.+122    	; 0x1046 <DIO_uint8_tGetPinValue+0x148>
			break;
	case 2:
			return get_bit(PINC,PinNum);
     fcc:	e3 e3       	ldi	r30, 0x33	; 51
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	50 e0       	ldi	r21, 0x00	; 0
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <DIO_uint8_tGetPinValue+0xe8>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	2a 95       	dec	r18
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <DIO_uint8_tGetPinValue+0xe4>
     fea:	9a 01       	movw	r18, r20
     fec:	28 23       	and	r18, r24
     fee:	39 23       	and	r19, r25
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	88 2f       	mov	r24, r24
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	a9 01       	movw	r20, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <DIO_uint8_tGetPinValue+0x100>
     ffa:	55 95       	asr	r21
     ffc:	47 95       	ror	r20
     ffe:	8a 95       	dec	r24
    1000:	e2 f7       	brpl	.-8      	; 0xffa <DIO_uint8_tGetPinValue+0xfc>
    1002:	ca 01       	movw	r24, r20
    1004:	8b 83       	std	Y+3, r24	; 0x03
    1006:	1f c0       	rjmp	.+62     	; 0x1046 <DIO_uint8_tGetPinValue+0x148>
			break;
	case 3:
			return get_bit(PIND,PinNum);
    1008:	e0 e3       	ldi	r30, 0x30	; 48
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	50 e0       	ldi	r21, 0x00	; 0
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <DIO_uint8_tGetPinValue+0x124>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	2a 95       	dec	r18
    1024:	e2 f7       	brpl	.-8      	; 0x101e <DIO_uint8_tGetPinValue+0x120>
    1026:	9a 01       	movw	r18, r20
    1028:	28 23       	and	r18, r24
    102a:	39 23       	and	r19, r25
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	88 2f       	mov	r24, r24
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	a9 01       	movw	r20, r18
    1034:	02 c0       	rjmp	.+4      	; 0x103a <DIO_uint8_tGetPinValue+0x13c>
    1036:	55 95       	asr	r21
    1038:	47 95       	ror	r20
    103a:	8a 95       	dec	r24
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <DIO_uint8_tGetPinValue+0x138>
    103e:	ca 01       	movw	r24, r20
    1040:	8b 83       	std	Y+3, r24	; 0x03
    1042:	01 c0       	rjmp	.+2      	; 0x1046 <DIO_uint8_tGetPinValue+0x148>
    1044:	02 c0       	rjmp	.+4      	; 0x104a <DIO_uint8_tGetPinValue+0x14c>
			break;
	}
		}
    1046:	5b 81       	ldd	r21, Y+3	; 0x03
    1048:	5e 83       	std	Y+6, r21	; 0x06
    104a:	8e 81       	ldd	r24, Y+6	; 0x06
    104c:	26 96       	adiw	r28, 0x06	; 6
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	f8 94       	cli
    1052:	de bf       	out	0x3e, r29	; 62
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	cd bf       	out	0x3d, r28	; 61
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <DIO_voidSetPortDir>:
	extern void DIO_voidSetPortDir(uint8_t Port, uint8_t Dir)
	{
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	00 d0       	rcall	.+0      	; 0x1064 <DIO_voidSetPortDir+0x6>
    1064:	00 d0       	rcall	.+0      	; 0x1066 <DIO_voidSetPortDir+0x8>
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    106a:	89 83       	std	Y+1, r24	; 0x01
    106c:	6a 83       	std	Y+2, r22	; 0x02
		switch(Port)
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	3c 83       	std	Y+4, r19	; 0x04
    1076:	2b 83       	std	Y+3, r18	; 0x03
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	9c 81       	ldd	r25, Y+4	; 0x04
    107c:	81 30       	cpi	r24, 0x01	; 1
    107e:	91 05       	cpc	r25, r1
    1080:	d1 f0       	breq	.+52     	; 0x10b6 <DIO_voidSetPortDir+0x58>
    1082:	2b 81       	ldd	r18, Y+3	; 0x03
    1084:	3c 81       	ldd	r19, Y+4	; 0x04
    1086:	22 30       	cpi	r18, 0x02	; 2
    1088:	31 05       	cpc	r19, r1
    108a:	2c f4       	brge	.+10     	; 0x1096 <DIO_voidSetPortDir+0x38>
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	9c 81       	ldd	r25, Y+4	; 0x04
    1090:	00 97       	sbiw	r24, 0x00	; 0
    1092:	61 f0       	breq	.+24     	; 0x10ac <DIO_voidSetPortDir+0x4e>
    1094:	1e c0       	rjmp	.+60     	; 0x10d2 <DIO_voidSetPortDir+0x74>
    1096:	2b 81       	ldd	r18, Y+3	; 0x03
    1098:	3c 81       	ldd	r19, Y+4	; 0x04
    109a:	22 30       	cpi	r18, 0x02	; 2
    109c:	31 05       	cpc	r19, r1
    109e:	81 f0       	breq	.+32     	; 0x10c0 <DIO_voidSetPortDir+0x62>
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	9c 81       	ldd	r25, Y+4	; 0x04
    10a4:	83 30       	cpi	r24, 0x03	; 3
    10a6:	91 05       	cpc	r25, r1
    10a8:	81 f0       	breq	.+32     	; 0x10ca <DIO_voidSetPortDir+0x6c>
    10aa:	13 c0       	rjmp	.+38     	; 0x10d2 <DIO_voidSetPortDir+0x74>
		{
		case 0 :
			DDRA=Dir;
    10ac:	ea e3       	ldi	r30, 0x3A	; 58
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	80 83       	st	Z, r24
    10b4:	0e c0       	rjmp	.+28     	; 0x10d2 <DIO_voidSetPortDir+0x74>
			break;
		case 1 :
			DDRB=Dir;
    10b6:	e7 e3       	ldi	r30, 0x37	; 55
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	80 83       	st	Z, r24
    10be:	09 c0       	rjmp	.+18     	; 0x10d2 <DIO_voidSetPortDir+0x74>
			break;
		case 2 :
			DDRC=Dir;
    10c0:	e4 e3       	ldi	r30, 0x34	; 52
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	80 83       	st	Z, r24
    10c8:	04 c0       	rjmp	.+8      	; 0x10d2 <DIO_voidSetPortDir+0x74>
			break;
		case 3 :
			DDRD=Dir;
    10ca:	e1 e3       	ldi	r30, 0x31	; 49
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	80 83       	st	Z, r24
			break;
		}
	}
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <DIO_voidSetPortValue>:
extern void DIO_voidSetPortValue(uint8_t Port,uint8_t Value)
	{
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <DIO_voidSetPortValue+0x6>
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <DIO_voidSetPortValue+0x8>
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	89 83       	std	Y+1, r24	; 0x01
    10ee:	6a 83       	std	Y+2, r22	; 0x02
		switch(Port)
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	3c 83       	std	Y+4, r19	; 0x04
    10f8:	2b 83       	std	Y+3, r18	; 0x03
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	9c 81       	ldd	r25, Y+4	; 0x04
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	91 05       	cpc	r25, r1
    1102:	d1 f0       	breq	.+52     	; 0x1138 <DIO_voidSetPortValue+0x58>
    1104:	2b 81       	ldd	r18, Y+3	; 0x03
    1106:	3c 81       	ldd	r19, Y+4	; 0x04
    1108:	22 30       	cpi	r18, 0x02	; 2
    110a:	31 05       	cpc	r19, r1
    110c:	2c f4       	brge	.+10     	; 0x1118 <DIO_voidSetPortValue+0x38>
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	9c 81       	ldd	r25, Y+4	; 0x04
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	61 f0       	breq	.+24     	; 0x112e <DIO_voidSetPortValue+0x4e>
    1116:	1e c0       	rjmp	.+60     	; 0x1154 <DIO_voidSetPortValue+0x74>
    1118:	2b 81       	ldd	r18, Y+3	; 0x03
    111a:	3c 81       	ldd	r19, Y+4	; 0x04
    111c:	22 30       	cpi	r18, 0x02	; 2
    111e:	31 05       	cpc	r19, r1
    1120:	81 f0       	breq	.+32     	; 0x1142 <DIO_voidSetPortValue+0x62>
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	9c 81       	ldd	r25, Y+4	; 0x04
    1126:	83 30       	cpi	r24, 0x03	; 3
    1128:	91 05       	cpc	r25, r1
    112a:	81 f0       	breq	.+32     	; 0x114c <DIO_voidSetPortValue+0x6c>
    112c:	13 c0       	rjmp	.+38     	; 0x1154 <DIO_voidSetPortValue+0x74>
		{
	case 0 :
			PORTA=Value;
    112e:	eb e3       	ldi	r30, 0x3B	; 59
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	80 83       	st	Z, r24
    1136:	0e c0       	rjmp	.+28     	; 0x1154 <DIO_voidSetPortValue+0x74>
			break;
		case 1 :
			PORTB=Value;
    1138:	e8 e3       	ldi	r30, 0x38	; 56
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	80 83       	st	Z, r24
    1140:	09 c0       	rjmp	.+18     	; 0x1154 <DIO_voidSetPortValue+0x74>
			break;
		case 2 :
			PORTC=Value;
    1142:	e5 e3       	ldi	r30, 0x35	; 53
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	80 83       	st	Z, r24
    114a:	04 c0       	rjmp	.+8      	; 0x1154 <DIO_voidSetPortValue+0x74>
			break;
		case 3 :
			PORTD=Value;
    114c:	e2 e3       	ldi	r30, 0x32	; 50
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	80 83       	st	Z, r24
			break;
		}
	}
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <USART_Init>:

#include "USART_Interrupt.h"

void USART_Init(unsigned long BAUDRATE)				/* USART initialize function */
{
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	00 d0       	rcall	.+0      	; 0x116c <USART_Init+0xa>
    116c:	00 d0       	rcall	.+0      	; 0x116e <USART_Init+0xc>
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	69 83       	std	Y+1, r22	; 0x01
    1174:	7a 83       	std	Y+2, r23	; 0x02
    1176:	8b 83       	std	Y+3, r24	; 0x03
    1178:	9c 83       	std	Y+4, r25	; 0x04
	UCSRB |= (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);				/* Enable USART transmitter and receiver */
    117a:	aa e2       	ldi	r26, 0x2A	; 42
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	ea e2       	ldi	r30, 0x2A	; 42
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	88 69       	ori	r24, 0x98	; 152
    1186:	8c 93       	st	X, r24
	UCSRC |= (1 << URSEL)| (1 << UCSZ0) | (1 << UCSZ1);	/* Write USCRC for 8 bit data and 1 stop bit */
    1188:	a0 e4       	ldi	r26, 0x40	; 64
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e0 e4       	ldi	r30, 0x40	; 64
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	86 68       	ori	r24, 0x86	; 134
    1194:	8c 93       	st	X, r24
	UBRRL = BAUD_PRESCALE;							/* Load UBRRL with lower 8 bit of prescale value */
    1196:	09 e2       	ldi	r16, 0x29	; 41
    1198:	10 e0       	ldi	r17, 0x00	; 0
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	9a 81       	ldd	r25, Y+2	; 0x02
    119e:	ab 81       	ldd	r26, Y+3	; 0x03
    11a0:	bc 81       	ldd	r27, Y+4	; 0x04
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	aa 1f       	adc	r26, r26
    11a8:	bb 1f       	adc	r27, r27
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	aa 1f       	adc	r26, r26
    11b0:	bb 1f       	adc	r27, r27
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	aa 1f       	adc	r26, r26
    11b8:	bb 1f       	adc	r27, r27
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	aa 1f       	adc	r26, r26
    11c0:	bb 1f       	adc	r27, r27
    11c2:	9c 01       	movw	r18, r24
    11c4:	ad 01       	movw	r20, r26
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	92 e1       	ldi	r25, 0x12	; 18
    11ca:	aa e7       	ldi	r26, 0x7A	; 122
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	bc 01       	movw	r22, r24
    11d0:	cd 01       	movw	r24, r26
    11d2:	0e 94 04 19 	call	0x3208	; 0x3208 <__udivmodsi4>
    11d6:	da 01       	movw	r26, r20
    11d8:	c9 01       	movw	r24, r18
    11da:	81 50       	subi	r24, 0x01	; 1
    11dc:	f8 01       	movw	r30, r16
    11de:	80 83       	st	Z, r24
	UBRRH = (BAUD_PRESCALE >> 8);					/* Load UBRRH with upper 8 bit of prescale value */
    11e0:	00 e4       	ldi	r16, 0x40	; 64
    11e2:	10 e0       	ldi	r17, 0x00	; 0
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	9a 81       	ldd	r25, Y+2	; 0x02
    11e8:	ab 81       	ldd	r26, Y+3	; 0x03
    11ea:	bc 81       	ldd	r27, Y+4	; 0x04
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	aa 1f       	adc	r26, r26
    11f2:	bb 1f       	adc	r27, r27
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	aa 1f       	adc	r26, r26
    11fa:	bb 1f       	adc	r27, r27
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	aa 1f       	adc	r26, r26
    1202:	bb 1f       	adc	r27, r27
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	aa 1f       	adc	r26, r26
    120a:	bb 1f       	adc	r27, r27
    120c:	9c 01       	movw	r18, r24
    120e:	ad 01       	movw	r20, r26
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	92 e1       	ldi	r25, 0x12	; 18
    1214:	aa e7       	ldi	r26, 0x7A	; 122
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	bc 01       	movw	r22, r24
    121a:	cd 01       	movw	r24, r26
    121c:	0e 94 04 19 	call	0x3208	; 0x3208 <__udivmodsi4>
    1220:	da 01       	movw	r26, r20
    1222:	c9 01       	movw	r24, r18
    1224:	01 97       	sbiw	r24, 0x01	; 1
    1226:	a1 09       	sbc	r26, r1
    1228:	b1 09       	sbc	r27, r1
    122a:	89 2f       	mov	r24, r25
    122c:	9a 2f       	mov	r25, r26
    122e:	ab 2f       	mov	r26, r27
    1230:	bb 27       	eor	r27, r27
    1232:	f8 01       	movw	r30, r16
    1234:	80 83       	st	Z, r24
}
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	1f 91       	pop	r17
    1244:	0f 91       	pop	r16
    1246:	08 95       	ret

00001248 <USART_RxChar>:

char USART_RxChar()									/* Data receiving function */
{
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
    1250:	eb e2       	ldi	r30, 0x2B	; 43
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	88 23       	and	r24, r24
    1258:	dc f7       	brge	.-10     	; 0x1250 <USART_RxChar+0x8>
	return(UDR);									/* Get and return received data */
    125a:	ec e2       	ldi	r30, 0x2C	; 44
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
}
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <USART_TxChar>:

void USART_TxChar(char data)						/* Data transmitting function */
{
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	0f 92       	push	r0
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    1270:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;										/* Write data to be transmitting in UDR */
    1272:	ec e2       	ldi	r30, 0x2C	; 44
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	80 83       	st	Z, r24
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
    127a:	eb e2       	ldi	r30, 0x2B	; 43
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	88 2f       	mov	r24, r24
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	80 72       	andi	r24, 0x20	; 32
    1286:	90 70       	andi	r25, 0x00	; 0
    1288:	00 97       	sbiw	r24, 0x00	; 0
    128a:	b9 f3       	breq	.-18     	; 0x127a <USART_TxChar+0x14>
}
    128c:	0f 90       	pop	r0
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	08 95       	ret

00001294 <USART_SendString>:

void USART_SendString(char *str)					/* Send string of USART data function */
{
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	00 d0       	rcall	.+0      	; 0x129a <USART_SendString+0x6>
    129a:	00 d0       	rcall	.+0      	; 0x129c <USART_SendString+0x8>
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	9c 83       	std	Y+4, r25	; 0x04
    12a2:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    12a4:	1a 82       	std	Y+2, r1	; 0x02
    12a6:	19 82       	std	Y+1, r1	; 0x01
    12a8:	0f c0       	rjmp	.+30     	; 0x12c8 <USART_SendString+0x34>
	while (str[i]!=0)
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
    12aa:	29 81       	ldd	r18, Y+1	; 0x01
    12ac:	3a 81       	ldd	r19, Y+2	; 0x02
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	9c 81       	ldd	r25, Y+4	; 0x04
    12b2:	fc 01       	movw	r30, r24
    12b4:	e2 0f       	add	r30, r18
    12b6:	f3 1f       	adc	r31, r19
    12b8:	80 81       	ld	r24, Z
    12ba:	0e 94 33 09 	call	0x1266	; 0x1266 <USART_TxChar>
		i++;
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	9a 81       	ldd	r25, Y+2	; 0x02
    12c2:	01 96       	adiw	r24, 0x01	; 1
    12c4:	9a 83       	std	Y+2, r25	; 0x02
    12c6:	89 83       	std	Y+1, r24	; 0x01
}

void USART_SendString(char *str)					/* Send string of USART data function */
{
	int i=0;
	while (str[i]!=0)
    12c8:	29 81       	ldd	r18, Y+1	; 0x01
    12ca:	3a 81       	ldd	r19, Y+2	; 0x02
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	fc 01       	movw	r30, r24
    12d2:	e2 0f       	add	r30, r18
    12d4:	f3 1f       	adc	r31, r19
    12d6:	80 81       	ld	r24, Z
    12d8:	88 23       	and	r24, r24
    12da:	39 f7       	brne	.-50     	; 0x12aa <USART_SendString+0x16>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
}
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	08 95       	ret

000012ea <LCD_vidExcuteCommand>:
#include<stdint.h>
#include "lcd.h"



 extern void LCD_vidExcuteCommand(uint8_t Command){
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    12f2:	2f 97       	sbiw	r28, 0x0f	; 15
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	de bf       	out	0x3e, r29	; 62
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	cd bf       	out	0x3d, r28	; 61
    12fe:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_control,RSpin,low);
    1300:	82 e0       	ldi	r24, 0x02	; 2
    1302:	60 e0       	ldi	r22, 0x00	; 0
    1304:	40 e0       	ldi	r20, 0x00	; 0
    1306:	0e 94 91 06 	call	0xd22	; 0xd22 <DIO_voidSetPinValue>
   DIO_voidSetPinValue(LCD_control,RWpin,low);
    130a:	82 e0       	ldi	r24, 0x02	; 2
    130c:	61 e0       	ldi	r22, 0x01	; 1
    130e:	40 e0       	ldi	r20, 0x00	; 0
    1310:	0e 94 91 06 	call	0xd22	; 0xd22 <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_data,Command);
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	6f 85       	ldd	r22, Y+15	; 0x0f
    1318:	0e 94 70 08 	call	0x10e0	; 0x10e0 <DIO_voidSetPortValue>
	DIO_voidSetPinValue(LCD_control,Epin,high);
    131c:	82 e0       	ldi	r24, 0x02	; 2
    131e:	62 e0       	ldi	r22, 0x02	; 2
    1320:	41 e0       	ldi	r20, 0x01	; 1
    1322:	0e 94 91 06 	call	0xd22	; 0xd22 <DIO_voidSetPinValue>
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	a0 e8       	ldi	r26, 0x80	; 128
    132c:	bf e3       	ldi	r27, 0x3F	; 63
    132e:	8b 87       	std	Y+11, r24	; 0x0b
    1330:	9c 87       	std	Y+12, r25	; 0x0c
    1332:	ad 87       	std	Y+13, r26	; 0x0d
    1334:	be 87       	std	Y+14, r27	; 0x0e
    1336:	6b 85       	ldd	r22, Y+11	; 0x0b
    1338:	7c 85       	ldd	r23, Y+12	; 0x0c
    133a:	8d 85       	ldd	r24, Y+13	; 0x0d
    133c:	9e 85       	ldd	r25, Y+14	; 0x0e
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	4a ef       	ldi	r20, 0xFA	; 250
    1344:	54 e4       	ldi	r21, 0x44	; 68
    1346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	8f 83       	std	Y+7, r24	; 0x07
    1350:	98 87       	std	Y+8, r25	; 0x08
    1352:	a9 87       	std	Y+9, r26	; 0x09
    1354:	ba 87       	std	Y+10, r27	; 0x0a
    1356:	6f 81       	ldd	r22, Y+7	; 0x07
    1358:	78 85       	ldd	r23, Y+8	; 0x08
    135a:	89 85       	ldd	r24, Y+9	; 0x09
    135c:	9a 85       	ldd	r25, Y+10	; 0x0a
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	40 e8       	ldi	r20, 0x80	; 128
    1364:	5f e3       	ldi	r21, 0x3F	; 63
    1366:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    136a:	88 23       	and	r24, r24
    136c:	2c f4       	brge	.+10     	; 0x1378 <LCD_vidExcuteCommand+0x8e>
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	9e 83       	std	Y+6, r25	; 0x06
    1374:	8d 83       	std	Y+5, r24	; 0x05
    1376:	3f c0       	rjmp	.+126    	; 0x13f6 <LCD_vidExcuteCommand+0x10c>
    1378:	6f 81       	ldd	r22, Y+7	; 0x07
    137a:	78 85       	ldd	r23, Y+8	; 0x08
    137c:	89 85       	ldd	r24, Y+9	; 0x09
    137e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	3f ef       	ldi	r19, 0xFF	; 255
    1384:	4f e7       	ldi	r20, 0x7F	; 127
    1386:	57 e4       	ldi	r21, 0x47	; 71
    1388:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    138c:	18 16       	cp	r1, r24
    138e:	4c f5       	brge	.+82     	; 0x13e2 <LCD_vidExcuteCommand+0xf8>
    1390:	6b 85       	ldd	r22, Y+11	; 0x0b
    1392:	7c 85       	ldd	r23, Y+12	; 0x0c
    1394:	8d 85       	ldd	r24, Y+13	; 0x0d
    1396:	9e 85       	ldd	r25, Y+14	; 0x0e
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	40 e2       	ldi	r20, 0x20	; 32
    139e:	51 e4       	ldi	r21, 0x41	; 65
    13a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a4:	dc 01       	movw	r26, r24
    13a6:	cb 01       	movw	r24, r22
    13a8:	bc 01       	movw	r22, r24
    13aa:	cd 01       	movw	r24, r26
    13ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	9e 83       	std	Y+6, r25	; 0x06
    13b6:	8d 83       	std	Y+5, r24	; 0x05
    13b8:	0f c0       	rjmp	.+30     	; 0x13d8 <LCD_vidExcuteCommand+0xee>
    13ba:	88 ec       	ldi	r24, 0xC8	; 200
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	9c 83       	std	Y+4, r25	; 0x04
    13c0:	8b 83       	std	Y+3, r24	; 0x03
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	9c 81       	ldd	r25, Y+4	; 0x04
    13c6:	01 97       	sbiw	r24, 0x01	; 1
    13c8:	f1 f7       	brne	.-4      	; 0x13c6 <LCD_vidExcuteCommand+0xdc>
    13ca:	9c 83       	std	Y+4, r25	; 0x04
    13cc:	8b 83       	std	Y+3, r24	; 0x03
    13ce:	8d 81       	ldd	r24, Y+5	; 0x05
    13d0:	9e 81       	ldd	r25, Y+6	; 0x06
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	9e 83       	std	Y+6, r25	; 0x06
    13d6:	8d 83       	std	Y+5, r24	; 0x05
    13d8:	8d 81       	ldd	r24, Y+5	; 0x05
    13da:	9e 81       	ldd	r25, Y+6	; 0x06
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	69 f7       	brne	.-38     	; 0x13ba <LCD_vidExcuteCommand+0xd0>
    13e0:	14 c0       	rjmp	.+40     	; 0x140a <LCD_vidExcuteCommand+0x120>
    13e2:	6f 81       	ldd	r22, Y+7	; 0x07
    13e4:	78 85       	ldd	r23, Y+8	; 0x08
    13e6:	89 85       	ldd	r24, Y+9	; 0x09
    13e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ee:	dc 01       	movw	r26, r24
    13f0:	cb 01       	movw	r24, r22
    13f2:	9e 83       	std	Y+6, r25	; 0x06
    13f4:	8d 83       	std	Y+5, r24	; 0x05
    13f6:	8d 81       	ldd	r24, Y+5	; 0x05
    13f8:	9e 81       	ldd	r25, Y+6	; 0x06
    13fa:	9a 83       	std	Y+2, r25	; 0x02
    13fc:	89 83       	std	Y+1, r24	; 0x01
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	9a 81       	ldd	r25, Y+2	; 0x02
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	f1 f7       	brne	.-4      	; 0x1402 <LCD_vidExcuteCommand+0x118>
    1406:	9a 83       	std	Y+2, r25	; 0x02
    1408:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_control,Epin,low);
    140a:	82 e0       	ldi	r24, 0x02	; 2
    140c:	62 e0       	ldi	r22, 0x02	; 2
    140e:	40 e0       	ldi	r20, 0x00	; 0
    1410:	0e 94 91 06 	call	0xd22	; 0xd22 <DIO_voidSetPinValue>
}
    1414:	2f 96       	adiw	r28, 0x0f	; 15
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	f8 94       	cli
    141a:	de bf       	out	0x3e, r29	; 62
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	cd bf       	out	0x3d, r28	; 61
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	08 95       	ret

00001426 <LCD_vidDisplayData>:

extern void LCD_vidDisplayData(uint8_t Data){
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	2f 97       	sbiw	r28, 0x0f	; 15
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	f8 94       	cli
    1434:	de bf       	out	0x3e, r29	; 62
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	cd bf       	out	0x3d, r28	; 61
    143a:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_control,RSpin,high);
    143c:	82 e0       	ldi	r24, 0x02	; 2
    143e:	60 e0       	ldi	r22, 0x00	; 0
    1440:	41 e0       	ldi	r20, 0x01	; 1
    1442:	0e 94 91 06 	call	0xd22	; 0xd22 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_control,RWpin,low);
    1446:	82 e0       	ldi	r24, 0x02	; 2
    1448:	61 e0       	ldi	r22, 0x01	; 1
    144a:	40 e0       	ldi	r20, 0x00	; 0
    144c:	0e 94 91 06 	call	0xd22	; 0xd22 <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_data,Data);
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	6f 85       	ldd	r22, Y+15	; 0x0f
    1454:	0e 94 70 08 	call	0x10e0	; 0x10e0 <DIO_voidSetPortValue>
	DIO_voidSetPinValue(LCD_control,Epin,high);
    1458:	82 e0       	ldi	r24, 0x02	; 2
    145a:	62 e0       	ldi	r22, 0x02	; 2
    145c:	41 e0       	ldi	r20, 0x01	; 1
    145e:	0e 94 91 06 	call	0xd22	; 0xd22 <DIO_voidSetPinValue>
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	a0 e8       	ldi	r26, 0x80	; 128
    1468:	bf e3       	ldi	r27, 0x3F	; 63
    146a:	8b 87       	std	Y+11, r24	; 0x0b
    146c:	9c 87       	std	Y+12, r25	; 0x0c
    146e:	ad 87       	std	Y+13, r26	; 0x0d
    1470:	be 87       	std	Y+14, r27	; 0x0e
    1472:	6b 85       	ldd	r22, Y+11	; 0x0b
    1474:	7c 85       	ldd	r23, Y+12	; 0x0c
    1476:	8d 85       	ldd	r24, Y+13	; 0x0d
    1478:	9e 85       	ldd	r25, Y+14	; 0x0e
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	4a ef       	ldi	r20, 0xFA	; 250
    1480:	54 e4       	ldi	r21, 0x44	; 68
    1482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	8f 83       	std	Y+7, r24	; 0x07
    148c:	98 87       	std	Y+8, r25	; 0x08
    148e:	a9 87       	std	Y+9, r26	; 0x09
    1490:	ba 87       	std	Y+10, r27	; 0x0a
    1492:	6f 81       	ldd	r22, Y+7	; 0x07
    1494:	78 85       	ldd	r23, Y+8	; 0x08
    1496:	89 85       	ldd	r24, Y+9	; 0x09
    1498:	9a 85       	ldd	r25, Y+10	; 0x0a
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	40 e8       	ldi	r20, 0x80	; 128
    14a0:	5f e3       	ldi	r21, 0x3F	; 63
    14a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14a6:	88 23       	and	r24, r24
    14a8:	2c f4       	brge	.+10     	; 0x14b4 <LCD_vidDisplayData+0x8e>
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	9e 83       	std	Y+6, r25	; 0x06
    14b0:	8d 83       	std	Y+5, r24	; 0x05
    14b2:	3f c0       	rjmp	.+126    	; 0x1532 <LCD_vidDisplayData+0x10c>
    14b4:	6f 81       	ldd	r22, Y+7	; 0x07
    14b6:	78 85       	ldd	r23, Y+8	; 0x08
    14b8:	89 85       	ldd	r24, Y+9	; 0x09
    14ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	3f ef       	ldi	r19, 0xFF	; 255
    14c0:	4f e7       	ldi	r20, 0x7F	; 127
    14c2:	57 e4       	ldi	r21, 0x47	; 71
    14c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14c8:	18 16       	cp	r1, r24
    14ca:	4c f5       	brge	.+82     	; 0x151e <LCD_vidDisplayData+0xf8>
    14cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    14d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e2       	ldi	r20, 0x20	; 32
    14da:	51 e4       	ldi	r21, 0x41	; 65
    14dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	bc 01       	movw	r22, r24
    14e6:	cd 01       	movw	r24, r26
    14e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	9e 83       	std	Y+6, r25	; 0x06
    14f2:	8d 83       	std	Y+5, r24	; 0x05
    14f4:	0f c0       	rjmp	.+30     	; 0x1514 <LCD_vidDisplayData+0xee>
    14f6:	88 ec       	ldi	r24, 0xC8	; 200
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	9c 83       	std	Y+4, r25	; 0x04
    14fc:	8b 83       	std	Y+3, r24	; 0x03
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	9c 81       	ldd	r25, Y+4	; 0x04
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	f1 f7       	brne	.-4      	; 0x1502 <LCD_vidDisplayData+0xdc>
    1506:	9c 83       	std	Y+4, r25	; 0x04
    1508:	8b 83       	std	Y+3, r24	; 0x03
    150a:	8d 81       	ldd	r24, Y+5	; 0x05
    150c:	9e 81       	ldd	r25, Y+6	; 0x06
    150e:	01 97       	sbiw	r24, 0x01	; 1
    1510:	9e 83       	std	Y+6, r25	; 0x06
    1512:	8d 83       	std	Y+5, r24	; 0x05
    1514:	8d 81       	ldd	r24, Y+5	; 0x05
    1516:	9e 81       	ldd	r25, Y+6	; 0x06
    1518:	00 97       	sbiw	r24, 0x00	; 0
    151a:	69 f7       	brne	.-38     	; 0x14f6 <LCD_vidDisplayData+0xd0>
    151c:	14 c0       	rjmp	.+40     	; 0x1546 <LCD_vidDisplayData+0x120>
    151e:	6f 81       	ldd	r22, Y+7	; 0x07
    1520:	78 85       	ldd	r23, Y+8	; 0x08
    1522:	89 85       	ldd	r24, Y+9	; 0x09
    1524:	9a 85       	ldd	r25, Y+10	; 0x0a
    1526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	9e 83       	std	Y+6, r25	; 0x06
    1530:	8d 83       	std	Y+5, r24	; 0x05
    1532:	8d 81       	ldd	r24, Y+5	; 0x05
    1534:	9e 81       	ldd	r25, Y+6	; 0x06
    1536:	9a 83       	std	Y+2, r25	; 0x02
    1538:	89 83       	std	Y+1, r24	; 0x01
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	9a 81       	ldd	r25, Y+2	; 0x02
    153e:	01 97       	sbiw	r24, 0x01	; 1
    1540:	f1 f7       	brne	.-4      	; 0x153e <LCD_vidDisplayData+0x118>
    1542:	9a 83       	std	Y+2, r25	; 0x02
    1544:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_control,Epin,low);
    1546:	82 e0       	ldi	r24, 0x02	; 2
    1548:	62 e0       	ldi	r22, 0x02	; 2
    154a:	40 e0       	ldi	r20, 0x00	; 0
    154c:	0e 94 91 06 	call	0xd22	; 0xd22 <DIO_voidSetPinValue>
}
    1550:	2f 96       	adiw	r28, 0x0f	; 15
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	f8 94       	cli
    1556:	de bf       	out	0x3e, r29	; 62
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	cd bf       	out	0x3d, r28	; 61
    155c:	cf 91       	pop	r28
    155e:	df 91       	pop	r29
    1560:	08 95       	ret

00001562 <LCD_vidINT>:
extern void  LCD_vidINT(void){
    1562:	df 93       	push	r29
    1564:	cf 93       	push	r28
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	aa 97       	sbiw	r28, 0x2a	; 42
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	f8 94       	cli
    1570:	de bf       	out	0x3e, r29	; 62
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPortDir(LCD_data,0b11111111);
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	6f ef       	ldi	r22, 0xFF	; 255
    157a:	0e 94 2f 08 	call	0x105e	; 0x105e <DIO_voidSetPortDir>
	DIO_voidSetPinDirection(LCD_control,RSpin,high);
    157e:	82 e0       	ldi	r24, 0x02	; 2
    1580:	60 e0       	ldi	r22, 0x00	; 0
    1582:	41 e0       	ldi	r20, 0x01	; 1
    1584:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_control,RWpin,high);
    1588:	82 e0       	ldi	r24, 0x02	; 2
    158a:	61 e0       	ldi	r22, 0x01	; 1
    158c:	41 e0       	ldi	r20, 0x01	; 1
    158e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_control,Epin,high);
    1592:	82 e0       	ldi	r24, 0x02	; 2
    1594:	62 e0       	ldi	r22, 0x02	; 2
    1596:	41 e0       	ldi	r20, 0x01	; 1
    1598:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	a8 e4       	ldi	r26, 0x48	; 72
    15a2:	b2 e4       	ldi	r27, 0x42	; 66
    15a4:	8f a3       	std	Y+39, r24	; 0x27
    15a6:	98 a7       	std	Y+40, r25	; 0x28
    15a8:	a9 a7       	std	Y+41, r26	; 0x29
    15aa:	ba a7       	std	Y+42, r27	; 0x2a
    15ac:	6f a1       	ldd	r22, Y+39	; 0x27
    15ae:	78 a5       	ldd	r23, Y+40	; 0x28
    15b0:	89 a5       	ldd	r24, Y+41	; 0x29
    15b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	4a ef       	ldi	r20, 0xFA	; 250
    15ba:	54 e4       	ldi	r21, 0x44	; 68
    15bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	8b a3       	std	Y+35, r24	; 0x23
    15c6:	9c a3       	std	Y+36, r25	; 0x24
    15c8:	ad a3       	std	Y+37, r26	; 0x25
    15ca:	be a3       	std	Y+38, r27	; 0x26
    15cc:	6b a1       	ldd	r22, Y+35	; 0x23
    15ce:	7c a1       	ldd	r23, Y+36	; 0x24
    15d0:	8d a1       	ldd	r24, Y+37	; 0x25
    15d2:	9e a1       	ldd	r25, Y+38	; 0x26
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	40 e8       	ldi	r20, 0x80	; 128
    15da:	5f e3       	ldi	r21, 0x3F	; 63
    15dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15e0:	88 23       	and	r24, r24
    15e2:	2c f4       	brge	.+10     	; 0x15ee <LCD_vidINT+0x8c>
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	9a a3       	std	Y+34, r25	; 0x22
    15ea:	89 a3       	std	Y+33, r24	; 0x21
    15ec:	3f c0       	rjmp	.+126    	; 0x166c <LCD_vidINT+0x10a>
    15ee:	6b a1       	ldd	r22, Y+35	; 0x23
    15f0:	7c a1       	ldd	r23, Y+36	; 0x24
    15f2:	8d a1       	ldd	r24, Y+37	; 0x25
    15f4:	9e a1       	ldd	r25, Y+38	; 0x26
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	3f ef       	ldi	r19, 0xFF	; 255
    15fa:	4f e7       	ldi	r20, 0x7F	; 127
    15fc:	57 e4       	ldi	r21, 0x47	; 71
    15fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1602:	18 16       	cp	r1, r24
    1604:	4c f5       	brge	.+82     	; 0x1658 <LCD_vidINT+0xf6>
    1606:	6f a1       	ldd	r22, Y+39	; 0x27
    1608:	78 a5       	ldd	r23, Y+40	; 0x28
    160a:	89 a5       	ldd	r24, Y+41	; 0x29
    160c:	9a a5       	ldd	r25, Y+42	; 0x2a
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	40 e2       	ldi	r20, 0x20	; 32
    1614:	51 e4       	ldi	r21, 0x41	; 65
    1616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	bc 01       	movw	r22, r24
    1620:	cd 01       	movw	r24, r26
    1622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	9a a3       	std	Y+34, r25	; 0x22
    162c:	89 a3       	std	Y+33, r24	; 0x21
    162e:	0f c0       	rjmp	.+30     	; 0x164e <LCD_vidINT+0xec>
    1630:	88 ec       	ldi	r24, 0xC8	; 200
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	98 a3       	std	Y+32, r25	; 0x20
    1636:	8f 8f       	std	Y+31, r24	; 0x1f
    1638:	8f 8d       	ldd	r24, Y+31	; 0x1f
    163a:	98 a1       	ldd	r25, Y+32	; 0x20
    163c:	01 97       	sbiw	r24, 0x01	; 1
    163e:	f1 f7       	brne	.-4      	; 0x163c <LCD_vidINT+0xda>
    1640:	98 a3       	std	Y+32, r25	; 0x20
    1642:	8f 8f       	std	Y+31, r24	; 0x1f
    1644:	89 a1       	ldd	r24, Y+33	; 0x21
    1646:	9a a1       	ldd	r25, Y+34	; 0x22
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	9a a3       	std	Y+34, r25	; 0x22
    164c:	89 a3       	std	Y+33, r24	; 0x21
    164e:	89 a1       	ldd	r24, Y+33	; 0x21
    1650:	9a a1       	ldd	r25, Y+34	; 0x22
    1652:	00 97       	sbiw	r24, 0x00	; 0
    1654:	69 f7       	brne	.-38     	; 0x1630 <LCD_vidINT+0xce>
    1656:	14 c0       	rjmp	.+40     	; 0x1680 <LCD_vidINT+0x11e>
    1658:	6b a1       	ldd	r22, Y+35	; 0x23
    165a:	7c a1       	ldd	r23, Y+36	; 0x24
    165c:	8d a1       	ldd	r24, Y+37	; 0x25
    165e:	9e a1       	ldd	r25, Y+38	; 0x26
    1660:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	9a a3       	std	Y+34, r25	; 0x22
    166a:	89 a3       	std	Y+33, r24	; 0x21
    166c:	89 a1       	ldd	r24, Y+33	; 0x21
    166e:	9a a1       	ldd	r25, Y+34	; 0x22
    1670:	9e 8f       	std	Y+30, r25	; 0x1e
    1672:	8d 8f       	std	Y+29, r24	; 0x1d
    1674:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1676:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	f1 f7       	brne	.-4      	; 0x1678 <LCD_vidINT+0x116>
    167c:	9e 8f       	std	Y+30, r25	; 0x1e
    167e:	8d 8f       	std	Y+29, r24	; 0x1d
_delay_ms(50);
   LCD_vidExcuteCommand(0b00111100);
    1680:	8c e3       	ldi	r24, 0x3C	; 60
    1682:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_vidExcuteCommand>
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	a0 e8       	ldi	r26, 0x80	; 128
    168c:	bf e3       	ldi	r27, 0x3F	; 63
    168e:	89 8f       	std	Y+25, r24	; 0x19
    1690:	9a 8f       	std	Y+26, r25	; 0x1a
    1692:	ab 8f       	std	Y+27, r26	; 0x1b
    1694:	bc 8f       	std	Y+28, r27	; 0x1c
    1696:	69 8d       	ldd	r22, Y+25	; 0x19
    1698:	7a 8d       	ldd	r23, Y+26	; 0x1a
    169a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    169c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	4a ef       	ldi	r20, 0xFA	; 250
    16a4:	54 e4       	ldi	r21, 0x44	; 68
    16a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	8d 8b       	std	Y+21, r24	; 0x15
    16b0:	9e 8b       	std	Y+22, r25	; 0x16
    16b2:	af 8b       	std	Y+23, r26	; 0x17
    16b4:	b8 8f       	std	Y+24, r27	; 0x18
    16b6:	6d 89       	ldd	r22, Y+21	; 0x15
    16b8:	7e 89       	ldd	r23, Y+22	; 0x16
    16ba:	8f 89       	ldd	r24, Y+23	; 0x17
    16bc:	98 8d       	ldd	r25, Y+24	; 0x18
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	40 e8       	ldi	r20, 0x80	; 128
    16c4:	5f e3       	ldi	r21, 0x3F	; 63
    16c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ca:	88 23       	and	r24, r24
    16cc:	2c f4       	brge	.+10     	; 0x16d8 <LCD_vidINT+0x176>
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	9c 8b       	std	Y+20, r25	; 0x14
    16d4:	8b 8b       	std	Y+19, r24	; 0x13
    16d6:	3f c0       	rjmp	.+126    	; 0x1756 <LCD_vidINT+0x1f4>
    16d8:	6d 89       	ldd	r22, Y+21	; 0x15
    16da:	7e 89       	ldd	r23, Y+22	; 0x16
    16dc:	8f 89       	ldd	r24, Y+23	; 0x17
    16de:	98 8d       	ldd	r25, Y+24	; 0x18
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	3f ef       	ldi	r19, 0xFF	; 255
    16e4:	4f e7       	ldi	r20, 0x7F	; 127
    16e6:	57 e4       	ldi	r21, 0x47	; 71
    16e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16ec:	18 16       	cp	r1, r24
    16ee:	4c f5       	brge	.+82     	; 0x1742 <LCD_vidINT+0x1e0>
    16f0:	69 8d       	ldd	r22, Y+25	; 0x19
    16f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	40 e2       	ldi	r20, 0x20	; 32
    16fe:	51 e4       	ldi	r21, 0x41	; 65
    1700:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	bc 01       	movw	r22, r24
    170a:	cd 01       	movw	r24, r26
    170c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	9c 8b       	std	Y+20, r25	; 0x14
    1716:	8b 8b       	std	Y+19, r24	; 0x13
    1718:	0f c0       	rjmp	.+30     	; 0x1738 <LCD_vidINT+0x1d6>
    171a:	88 ec       	ldi	r24, 0xC8	; 200
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	9a 8b       	std	Y+18, r25	; 0x12
    1720:	89 8b       	std	Y+17, r24	; 0x11
    1722:	89 89       	ldd	r24, Y+17	; 0x11
    1724:	9a 89       	ldd	r25, Y+18	; 0x12
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	f1 f7       	brne	.-4      	; 0x1726 <LCD_vidINT+0x1c4>
    172a:	9a 8b       	std	Y+18, r25	; 0x12
    172c:	89 8b       	std	Y+17, r24	; 0x11
    172e:	8b 89       	ldd	r24, Y+19	; 0x13
    1730:	9c 89       	ldd	r25, Y+20	; 0x14
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	9c 8b       	std	Y+20, r25	; 0x14
    1736:	8b 8b       	std	Y+19, r24	; 0x13
    1738:	8b 89       	ldd	r24, Y+19	; 0x13
    173a:	9c 89       	ldd	r25, Y+20	; 0x14
    173c:	00 97       	sbiw	r24, 0x00	; 0
    173e:	69 f7       	brne	.-38     	; 0x171a <LCD_vidINT+0x1b8>
    1740:	14 c0       	rjmp	.+40     	; 0x176a <LCD_vidINT+0x208>
    1742:	6d 89       	ldd	r22, Y+21	; 0x15
    1744:	7e 89       	ldd	r23, Y+22	; 0x16
    1746:	8f 89       	ldd	r24, Y+23	; 0x17
    1748:	98 8d       	ldd	r25, Y+24	; 0x18
    174a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	9c 8b       	std	Y+20, r25	; 0x14
    1754:	8b 8b       	std	Y+19, r24	; 0x13
    1756:	8b 89       	ldd	r24, Y+19	; 0x13
    1758:	9c 89       	ldd	r25, Y+20	; 0x14
    175a:	98 8b       	std	Y+16, r25	; 0x10
    175c:	8f 87       	std	Y+15, r24	; 0x0f
    175e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1760:	98 89       	ldd	r25, Y+16	; 0x10
    1762:	01 97       	sbiw	r24, 0x01	; 1
    1764:	f1 f7       	brne	.-4      	; 0x1762 <LCD_vidINT+0x200>
    1766:	98 8b       	std	Y+16, r25	; 0x10
    1768:	8f 87       	std	Y+15, r24	; 0x0f
   _delay_ms(1);
   LCD_vidExcuteCommand(0b00001100);
    176a:	8c e0       	ldi	r24, 0x0C	; 12
    176c:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_vidExcuteCommand>
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	a0 e8       	ldi	r26, 0x80	; 128
    1776:	bf e3       	ldi	r27, 0x3F	; 63
    1778:	8b 87       	std	Y+11, r24	; 0x0b
    177a:	9c 87       	std	Y+12, r25	; 0x0c
    177c:	ad 87       	std	Y+13, r26	; 0x0d
    177e:	be 87       	std	Y+14, r27	; 0x0e
    1780:	6b 85       	ldd	r22, Y+11	; 0x0b
    1782:	7c 85       	ldd	r23, Y+12	; 0x0c
    1784:	8d 85       	ldd	r24, Y+13	; 0x0d
    1786:	9e 85       	ldd	r25, Y+14	; 0x0e
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	4a ef       	ldi	r20, 0xFA	; 250
    178e:	54 e4       	ldi	r21, 0x44	; 68
    1790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	8f 83       	std	Y+7, r24	; 0x07
    179a:	98 87       	std	Y+8, r25	; 0x08
    179c:	a9 87       	std	Y+9, r26	; 0x09
    179e:	ba 87       	std	Y+10, r27	; 0x0a
    17a0:	6f 81       	ldd	r22, Y+7	; 0x07
    17a2:	78 85       	ldd	r23, Y+8	; 0x08
    17a4:	89 85       	ldd	r24, Y+9	; 0x09
    17a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	40 e8       	ldi	r20, 0x80	; 128
    17ae:	5f e3       	ldi	r21, 0x3F	; 63
    17b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17b4:	88 23       	and	r24, r24
    17b6:	2c f4       	brge	.+10     	; 0x17c2 <LCD_vidINT+0x260>
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	9e 83       	std	Y+6, r25	; 0x06
    17be:	8d 83       	std	Y+5, r24	; 0x05
    17c0:	3f c0       	rjmp	.+126    	; 0x1840 <LCD_vidINT+0x2de>
    17c2:	6f 81       	ldd	r22, Y+7	; 0x07
    17c4:	78 85       	ldd	r23, Y+8	; 0x08
    17c6:	89 85       	ldd	r24, Y+9	; 0x09
    17c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	3f ef       	ldi	r19, 0xFF	; 255
    17ce:	4f e7       	ldi	r20, 0x7F	; 127
    17d0:	57 e4       	ldi	r21, 0x47	; 71
    17d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17d6:	18 16       	cp	r1, r24
    17d8:	4c f5       	brge	.+82     	; 0x182c <LCD_vidINT+0x2ca>
    17da:	6b 85       	ldd	r22, Y+11	; 0x0b
    17dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    17de:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 e2       	ldi	r20, 0x20	; 32
    17e8:	51 e4       	ldi	r21, 0x41	; 65
    17ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	bc 01       	movw	r22, r24
    17f4:	cd 01       	movw	r24, r26
    17f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	9e 83       	std	Y+6, r25	; 0x06
    1800:	8d 83       	std	Y+5, r24	; 0x05
    1802:	0f c0       	rjmp	.+30     	; 0x1822 <LCD_vidINT+0x2c0>
    1804:	88 ec       	ldi	r24, 0xC8	; 200
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	9c 83       	std	Y+4, r25	; 0x04
    180a:	8b 83       	std	Y+3, r24	; 0x03
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	9c 81       	ldd	r25, Y+4	; 0x04
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	f1 f7       	brne	.-4      	; 0x1810 <LCD_vidINT+0x2ae>
    1814:	9c 83       	std	Y+4, r25	; 0x04
    1816:	8b 83       	std	Y+3, r24	; 0x03
    1818:	8d 81       	ldd	r24, Y+5	; 0x05
    181a:	9e 81       	ldd	r25, Y+6	; 0x06
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	9e 83       	std	Y+6, r25	; 0x06
    1820:	8d 83       	std	Y+5, r24	; 0x05
    1822:	8d 81       	ldd	r24, Y+5	; 0x05
    1824:	9e 81       	ldd	r25, Y+6	; 0x06
    1826:	00 97       	sbiw	r24, 0x00	; 0
    1828:	69 f7       	brne	.-38     	; 0x1804 <LCD_vidINT+0x2a2>
    182a:	14 c0       	rjmp	.+40     	; 0x1854 <LCD_vidINT+0x2f2>
    182c:	6f 81       	ldd	r22, Y+7	; 0x07
    182e:	78 85       	ldd	r23, Y+8	; 0x08
    1830:	89 85       	ldd	r24, Y+9	; 0x09
    1832:	9a 85       	ldd	r25, Y+10	; 0x0a
    1834:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	9e 83       	std	Y+6, r25	; 0x06
    183e:	8d 83       	std	Y+5, r24	; 0x05
    1840:	8d 81       	ldd	r24, Y+5	; 0x05
    1842:	9e 81       	ldd	r25, Y+6	; 0x06
    1844:	9a 83       	std	Y+2, r25	; 0x02
    1846:	89 83       	std	Y+1, r24	; 0x01
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	9a 81       	ldd	r25, Y+2	; 0x02
    184c:	01 97       	sbiw	r24, 0x01	; 1
    184e:	f1 f7       	brne	.-4      	; 0x184c <LCD_vidINT+0x2ea>
    1850:	9a 83       	std	Y+2, r25	; 0x02
    1852:	89 83       	std	Y+1, r24	; 0x01
   _delay_ms(1);
   LCD_vidExcuteCommand(0b00000001);
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_vidExcuteCommand>

}
    185a:	aa 96       	adiw	r28, 0x2a	; 42
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	cd bf       	out	0x3d, r28	; 61
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	08 95       	ret

0000186c <LCD_vidDisplaystring>:
extern void LCD_vidDisplaystring(uint8_t *p){
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	00 d0       	rcall	.+0      	; 0x1872 <LCD_vidDisplaystring+0x6>
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
    1876:	9a 83       	std	Y+2, r25	; 0x02
    1878:	89 83       	std	Y+1, r24	; 0x01
    187a:	0b c0       	rjmp	.+22     	; 0x1892 <LCD_vidDisplaystring+0x26>
	while(*p)
	{
		LCD_vidDisplayData(*p++);
    187c:	e9 81       	ldd	r30, Y+1	; 0x01
    187e:	fa 81       	ldd	r31, Y+2	; 0x02
    1880:	20 81       	ld	r18, Z
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	9a 81       	ldd	r25, Y+2	; 0x02
    1886:	01 96       	adiw	r24, 0x01	; 1
    1888:	9a 83       	std	Y+2, r25	; 0x02
    188a:	89 83       	std	Y+1, r24	; 0x01
    188c:	82 2f       	mov	r24, r18
    188e:	0e 94 13 0a 	call	0x1426	; 0x1426 <LCD_vidDisplayData>
   _delay_ms(1);
   LCD_vidExcuteCommand(0b00000001);

}
extern void LCD_vidDisplaystring(uint8_t *p){
	while(*p)
    1892:	e9 81       	ldd	r30, Y+1	; 0x01
    1894:	fa 81       	ldd	r31, Y+2	; 0x02
    1896:	80 81       	ld	r24, Z
    1898:	88 23       	and	r24, r24
    189a:	81 f7       	brne	.-32     	; 0x187c <LCD_vidDisplaystring+0x10>
	{
		LCD_vidDisplayData(*p++);
	}
}
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <LCD_vidGoToposition>:




extern void LCD_vidGoToposition(uint8_t x,uint8_t y){
    18a6:	df 93       	push	r29
    18a8:	cf 93       	push	r28
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <LCD_vidGoToposition+0x6>
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	6a 83       	std	Y+2, r22	; 0x02
	if(y==0 && x<=0xf && x>=0x0){
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	88 23       	and	r24, r24
    18b8:	41 f4       	brne	.+16     	; 0x18ca <LCD_vidGoToposition+0x24>
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
    18bc:	80 31       	cpi	r24, 0x10	; 16
    18be:	28 f4       	brcc	.+10     	; 0x18ca <LCD_vidGoToposition+0x24>
		LCD_vidExcuteCommand(0x80 +x);
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	80 58       	subi	r24, 0x80	; 128
    18c4:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_vidExcuteCommand>
    18c8:	12 c0       	rjmp	.+36     	; 0x18ee <LCD_vidGoToposition+0x48>
	}
	else if(y==1 && x<=0xf && x>=0x0){
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	81 30       	cpi	r24, 0x01	; 1
    18ce:	41 f4       	brne	.+16     	; 0x18e0 <LCD_vidGoToposition+0x3a>
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	80 31       	cpi	r24, 0x10	; 16
    18d4:	28 f4       	brcc	.+10     	; 0x18e0 <LCD_vidGoToposition+0x3a>
		LCD_vidExcuteCommand(0xc0 +x);
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	80 54       	subi	r24, 0x40	; 64
    18da:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_vidExcuteCommand>
    18de:	07 c0       	rjmp	.+14     	; 0x18ee <LCD_vidGoToposition+0x48>
	}
	else{
		LCD_vidExcuteCommand(0x83);
    18e0:	83 e8       	ldi	r24, 0x83	; 131
    18e2:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_vidExcuteCommand>
		LCD_vidDisplaystring("Wrong address");
    18e6:	80 e6       	ldi	r24, 0x60	; 96
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	0e 94 36 0c 	call	0x186c	; 0x186c <LCD_vidDisplaystring>
	}
}
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	08 95       	ret

000018f8 <LCD_vidDisplayINT>:

extern void LCD_vidDisplayINT(uint16_t num)
{
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	00 d0       	rcall	.+0      	; 0x18fe <LCD_vidDisplayINT+0x6>
    18fe:	00 d0       	rcall	.+0      	; 0x1900 <LCD_vidDisplayINT+0x8>
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
    1904:	9c 83       	std	Y+4, r25	; 0x04
    1906:	8b 83       	std	Y+3, r24	; 0x03

	uint16_t y=1;
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	9a 83       	std	Y+2, r25	; 0x02
    190e:	89 83       	std	Y+1, r24	; 0x01
	if (num==0)
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	9c 81       	ldd	r25, Y+4	; 0x04
    1914:	00 97       	sbiw	r24, 0x00	; 0
    1916:	31 f5       	brne	.+76     	; 0x1964 <LCD_vidDisplayINT+0x6c>
		LCD_vidDisplayData('0');
    1918:	80 e3       	ldi	r24, 0x30	; 48
    191a:	0e 94 13 0a 	call	0x1426	; 0x1426 <LCD_vidDisplayData>
    191e:	22 c0       	rjmp	.+68     	; 0x1964 <LCD_vidDisplayINT+0x6c>
	if(num<0){
		LCD_vidDisplayData('-');
		num=num*-1;
	}
	while(num !=0){
		y=((y*10)+(num%10));
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	9a 81       	ldd	r25, Y+2	; 0x02
    1924:	9c 01       	movw	r18, r24
    1926:	22 0f       	add	r18, r18
    1928:	33 1f       	adc	r19, r19
    192a:	c9 01       	movw	r24, r18
    192c:	88 0f       	add	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	88 0f       	add	r24, r24
    1932:	99 1f       	adc	r25, r25
    1934:	f9 01       	movw	r30, r18
    1936:	e8 0f       	add	r30, r24
    1938:	f9 1f       	adc	r31, r25
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	9c 81       	ldd	r25, Y+4	; 0x04
    193e:	2a e0       	ldi	r18, 0x0A	; 10
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	b9 01       	movw	r22, r18
    1944:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <__udivmodhi4>
    1948:	8e 0f       	add	r24, r30
    194a:	9f 1f       	adc	r25, r31
    194c:	9a 83       	std	Y+2, r25	; 0x02
    194e:	89 83       	std	Y+1, r24	; 0x01
		num=num/10;
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	9c 81       	ldd	r25, Y+4	; 0x04
    1954:	2a e0       	ldi	r18, 0x0A	; 10
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	b9 01       	movw	r22, r18
    195a:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <__udivmodhi4>
    195e:	cb 01       	movw	r24, r22
    1960:	9c 83       	std	Y+4, r25	; 0x04
    1962:	8b 83       	std	Y+3, r24	; 0x03
		LCD_vidDisplayData('0');
	if(num<0){
		LCD_vidDisplayData('-');
		num=num*-1;
	}
	while(num !=0){
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	9c 81       	ldd	r25, Y+4	; 0x04
    1968:	00 97       	sbiw	r24, 0x00	; 0
    196a:	d1 f6       	brne	.-76     	; 0x1920 <LCD_vidDisplayINT+0x28>
    196c:	14 c0       	rjmp	.+40     	; 0x1996 <LCD_vidDisplayINT+0x9e>
		y=((y*10)+(num%10));
		num=num/10;
	}
    while(y!=1){
    	LCD_vidDisplayData((y%10)+'0');
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	9a 81       	ldd	r25, Y+2	; 0x02
    1972:	2a e0       	ldi	r18, 0x0A	; 10
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	b9 01       	movw	r22, r18
    1978:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <__udivmodhi4>
    197c:	80 5d       	subi	r24, 0xD0	; 208
    197e:	0e 94 13 0a 	call	0x1426	; 0x1426 <LCD_vidDisplayData>
    	y=y/10;
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	9a 81       	ldd	r25, Y+2	; 0x02
    1986:	2a e0       	ldi	r18, 0x0A	; 10
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	b9 01       	movw	r22, r18
    198c:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <__udivmodhi4>
    1990:	cb 01       	movw	r24, r22
    1992:	9a 83       	std	Y+2, r25	; 0x02
    1994:	89 83       	std	Y+1, r24	; 0x01
	}
	while(num !=0){
		y=((y*10)+(num%10));
		num=num/10;
	}
    while(y!=1){
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	9a 81       	ldd	r25, Y+2	; 0x02
    199a:	81 30       	cpi	r24, 0x01	; 1
    199c:	91 05       	cpc	r25, r1
    199e:	39 f7       	brne	.-50     	; 0x196e <LCD_vidDisplayINT+0x76>
    	LCD_vidDisplayData((y%10)+'0');
    	y=y/10;
    }
}
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	cf 91       	pop	r28
    19aa:	df 91       	pop	r29
    19ac:	08 95       	ret

000019ae <main>:
char message_received[60];	/* save received message */
int position = 0;		/* save location of current message */


int main(void)
{
    19ae:	0f 93       	push	r16
    19b0:	1f 93       	push	r17
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
    19ba:	c6 55       	subi	r28, 0x56	; 86
    19bc:	d0 40       	sbci	r29, 0x00	; 0
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	f8 94       	cli
    19c2:	de bf       	out	0x3e, r29	; 62
    19c4:	0f be       	out	0x3f, r0	; 63
    19c6:	cd bf       	out	0x3d, r28	; 61
	buffer_pointer = 0;
    19c8:	10 92 41 02 	sts	0x0241, r1
    19cc:	10 92 40 02 	sts	0x0240, r1
	int is_msg_arrived;
	memset(message_received, 0, 60);
    19d0:	84 e0       	ldi	r24, 0x04	; 4
    19d2:	92 e0       	ldi	r25, 0x02	; 2
    19d4:	60 e0       	ldi	r22, 0x00	; 0
    19d6:	70 e0       	ldi	r23, 0x00	; 0
    19d8:	4c e3       	ldi	r20, 0x3C	; 60
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	0e 94 8d 19 	call	0x331a	; 0x331a <memset>
        LCD_vidINT();
    19e0:	0e 94 b1 0a 	call	0x1562	; 0x1562 <LCD_vidINT>
	USART_Init(19200);	/* initialize USART */
    19e4:	60 e0       	ldi	r22, 0x00	; 0
    19e6:	7b e4       	ldi	r23, 0x4B	; 75
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	0e 94 b1 08 	call	0x1162	; 0x1162 <USART_Init>
	sei();
    19f0:	78 94       	sei
	LCD_vidGoToposition(0,0);
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	60 e0       	ldi	r22, 0x00	; 0
    19f6:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <LCD_vidGoToposition>
	LCD_vidDisplaystring("GSM Initializing");
    19fa:	8e e6       	ldi	r24, 0x6E	; 110
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	0e 94 36 0c 	call	0x186c	; 0x186c <LCD_vidDisplaystring>
    1a02:	fe 01       	movw	r30, r28
    1a04:	ef 5a       	subi	r30, 0xAF	; 175
    1a06:	ff 4f       	sbci	r31, 0xFF	; 255
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	90 e8       	ldi	r25, 0x80	; 128
    1a0c:	ab e3       	ldi	r26, 0x3B	; 59
    1a0e:	b5 e4       	ldi	r27, 0x45	; 69
    1a10:	80 83       	st	Z, r24
    1a12:	91 83       	std	Z+1, r25	; 0x01
    1a14:	a2 83       	std	Z+2, r26	; 0x02
    1a16:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a18:	8e 01       	movw	r16, r28
    1a1a:	03 5b       	subi	r16, 0xB3	; 179
    1a1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a1e:	fe 01       	movw	r30, r28
    1a20:	ef 5a       	subi	r30, 0xAF	; 175
    1a22:	ff 4f       	sbci	r31, 0xFF	; 255
    1a24:	60 81       	ld	r22, Z
    1a26:	71 81       	ldd	r23, Z+1	; 0x01
    1a28:	82 81       	ldd	r24, Z+2	; 0x02
    1a2a:	93 81       	ldd	r25, Z+3	; 0x03
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	4a ef       	ldi	r20, 0xFA	; 250
    1a32:	54 e4       	ldi	r21, 0x44	; 68
    1a34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	f8 01       	movw	r30, r16
    1a3e:	80 83       	st	Z, r24
    1a40:	91 83       	std	Z+1, r25	; 0x01
    1a42:	a2 83       	std	Z+2, r26	; 0x02
    1a44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a46:	fe 01       	movw	r30, r28
    1a48:	e3 5b       	subi	r30, 0xB3	; 179
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	60 81       	ld	r22, Z
    1a4e:	71 81       	ldd	r23, Z+1	; 0x01
    1a50:	82 81       	ldd	r24, Z+2	; 0x02
    1a52:	93 81       	ldd	r25, Z+3	; 0x03
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	40 e8       	ldi	r20, 0x80	; 128
    1a5a:	5f e3       	ldi	r21, 0x3F	; 63
    1a5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a60:	88 23       	and	r24, r24
    1a62:	44 f4       	brge	.+16     	; 0x1a74 <main+0xc6>
		__ticks = 1;
    1a64:	fe 01       	movw	r30, r28
    1a66:	e5 5b       	subi	r30, 0xB5	; 181
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	91 83       	std	Z+1, r25	; 0x01
    1a70:	80 83       	st	Z, r24
    1a72:	64 c0       	rjmp	.+200    	; 0x1b3c <main+0x18e>
	else if (__tmp > 65535)
    1a74:	fe 01       	movw	r30, r28
    1a76:	e3 5b       	subi	r30, 0xB3	; 179
    1a78:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7a:	60 81       	ld	r22, Z
    1a7c:	71 81       	ldd	r23, Z+1	; 0x01
    1a7e:	82 81       	ldd	r24, Z+2	; 0x02
    1a80:	93 81       	ldd	r25, Z+3	; 0x03
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	3f ef       	ldi	r19, 0xFF	; 255
    1a86:	4f e7       	ldi	r20, 0x7F	; 127
    1a88:	57 e4       	ldi	r21, 0x47	; 71
    1a8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a8e:	18 16       	cp	r1, r24
    1a90:	0c f0       	brlt	.+2      	; 0x1a94 <main+0xe6>
    1a92:	43 c0       	rjmp	.+134    	; 0x1b1a <main+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a94:	fe 01       	movw	r30, r28
    1a96:	ef 5a       	subi	r30, 0xAF	; 175
    1a98:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9a:	60 81       	ld	r22, Z
    1a9c:	71 81       	ldd	r23, Z+1	; 0x01
    1a9e:	82 81       	ldd	r24, Z+2	; 0x02
    1aa0:	93 81       	ldd	r25, Z+3	; 0x03
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	40 e2       	ldi	r20, 0x20	; 32
    1aa8:	51 e4       	ldi	r21, 0x41	; 65
    1aaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	8e 01       	movw	r16, r28
    1ab4:	05 5b       	subi	r16, 0xB5	; 181
    1ab6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab8:	bc 01       	movw	r22, r24
    1aba:	cd 01       	movw	r24, r26
    1abc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	f8 01       	movw	r30, r16
    1ac6:	91 83       	std	Z+1, r25	; 0x01
    1ac8:	80 83       	st	Z, r24
    1aca:	1f c0       	rjmp	.+62     	; 0x1b0a <main+0x15c>
    1acc:	fe 01       	movw	r30, r28
    1ace:	e7 5b       	subi	r30, 0xB7	; 183
    1ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad2:	88 ec       	ldi	r24, 0xC8	; 200
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	91 83       	std	Z+1, r25	; 0x01
    1ad8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ada:	fe 01       	movw	r30, r28
    1adc:	e7 5b       	subi	r30, 0xB7	; 183
    1ade:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae0:	80 81       	ld	r24, Z
    1ae2:	91 81       	ldd	r25, Z+1	; 0x01
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	f1 f7       	brne	.-4      	; 0x1ae4 <main+0x136>
    1ae8:	fe 01       	movw	r30, r28
    1aea:	e7 5b       	subi	r30, 0xB7	; 183
    1aec:	ff 4f       	sbci	r31, 0xFF	; 255
    1aee:	91 83       	std	Z+1, r25	; 0x01
    1af0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af2:	de 01       	movw	r26, r28
    1af4:	a5 5b       	subi	r26, 0xB5	; 181
    1af6:	bf 4f       	sbci	r27, 0xFF	; 255
    1af8:	fe 01       	movw	r30, r28
    1afa:	e5 5b       	subi	r30, 0xB5	; 181
    1afc:	ff 4f       	sbci	r31, 0xFF	; 255
    1afe:	80 81       	ld	r24, Z
    1b00:	91 81       	ldd	r25, Z+1	; 0x01
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	11 96       	adiw	r26, 0x01	; 1
    1b06:	9c 93       	st	X, r25
    1b08:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b0a:	fe 01       	movw	r30, r28
    1b0c:	e5 5b       	subi	r30, 0xB5	; 181
    1b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b10:	80 81       	ld	r24, Z
    1b12:	91 81       	ldd	r25, Z+1	; 0x01
    1b14:	00 97       	sbiw	r24, 0x00	; 0
    1b16:	d1 f6       	brne	.-76     	; 0x1acc <main+0x11e>
    1b18:	27 c0       	rjmp	.+78     	; 0x1b68 <main+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b1a:	8e 01       	movw	r16, r28
    1b1c:	05 5b       	subi	r16, 0xB5	; 181
    1b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b20:	fe 01       	movw	r30, r28
    1b22:	e3 5b       	subi	r30, 0xB3	; 179
    1b24:	ff 4f       	sbci	r31, 0xFF	; 255
    1b26:	60 81       	ld	r22, Z
    1b28:	71 81       	ldd	r23, Z+1	; 0x01
    1b2a:	82 81       	ldd	r24, Z+2	; 0x02
    1b2c:	93 81       	ldd	r25, Z+3	; 0x03
    1b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	f8 01       	movw	r30, r16
    1b38:	91 83       	std	Z+1, r25	; 0x01
    1b3a:	80 83       	st	Z, r24
    1b3c:	de 01       	movw	r26, r28
    1b3e:	a9 5b       	subi	r26, 0xB9	; 185
    1b40:	bf 4f       	sbci	r27, 0xFF	; 255
    1b42:	fe 01       	movw	r30, r28
    1b44:	e5 5b       	subi	r30, 0xB5	; 181
    1b46:	ff 4f       	sbci	r31, 0xFF	; 255
    1b48:	80 81       	ld	r24, Z
    1b4a:	91 81       	ldd	r25, Z+1	; 0x01
    1b4c:	8d 93       	st	X+, r24
    1b4e:	9c 93       	st	X, r25
    1b50:	fe 01       	movw	r30, r28
    1b52:	e9 5b       	subi	r30, 0xB9	; 185
    1b54:	ff 4f       	sbci	r31, 0xFF	; 255
    1b56:	80 81       	ld	r24, Z
    1b58:	91 81       	ldd	r25, Z+1	; 0x01
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	f1 f7       	brne	.-4      	; 0x1b5a <main+0x1ac>
    1b5e:	fe 01       	movw	r30, r28
    1b60:	e9 5b       	subi	r30, 0xB9	; 185
    1b62:	ff 4f       	sbci	r31, 0xFF	; 255
    1b64:	91 83       	std	Z+1, r25	; 0x01
    1b66:	80 83       	st	Z, r24
	_delay_ms(3000);
	LCD_vidExcuteCommand(0b00000001);
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_vidExcuteCommand>
	LCD_vidGoToposition(1,0);
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	60 e0       	ldi	r22, 0x00	; 0
    1b72:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <LCD_vidGoToposition>
	LCD_vidDisplaystring("AT");
    1b76:	8f e7       	ldi	r24, 0x7F	; 127
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	0e 94 36 0c 	call	0x186c	; 0x186c <LCD_vidDisplaystring>
	GSM_Begin();		/* Start GSM with AT*/
    1b7e:	0e 94 95 10 	call	0x212a	; 0x212a <GSM_Begin>
	LCD_vidExcuteCommand(0b00000001);
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_vidExcuteCommand>

	while (1){

		/*check if any new message received */
		if(status_flag==1){
    1b88:	80 91 52 01 	lds	r24, 0x0152
    1b8c:	81 30       	cpi	r24, 0x01	; 1
    1b8e:	09 f0       	breq	.+2      	; 0x1b92 <main+0x1e4>
    1b90:	b3 c2       	rjmp	.+1382   	; 0x20f8 <main+0x74a>
			is_msg_arrived = GSM_Wait_for_Msg(); /*check for message arrival*/
    1b92:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <GSM_Wait_for_Msg>
    1b96:	fe 01       	movw	r30, r28
    1b98:	eb 5a       	subi	r30, 0xAB	; 171
    1b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9c:	88 2f       	mov	r24, r24
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	91 83       	std	Z+1, r25	; 0x01
    1ba2:	80 83       	st	Z, r24
			if(is_msg_arrived== true)
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	eb 5a       	subi	r30, 0xAB	; 171
    1ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    1baa:	80 81       	ld	r24, Z
    1bac:	91 81       	ldd	r25, Z+1	; 0x01
    1bae:	81 30       	cpi	r24, 0x01	; 1
    1bb0:	91 05       	cpc	r25, r1
    1bb2:	09 f0       	breq	.+2      	; 0x1bb6 <main+0x208>
    1bb4:	97 c2       	rjmp	.+1326   	; 0x20e4 <main+0x736>
			{
			   LCD_vidExcuteCommand(0b00000001);
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_vidExcuteCommand>
			   LCD_vidGoToposition(1,0);
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	60 e0       	ldi	r22, 0x00	; 0
    1bc0:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <LCD_vidGoToposition>
			   LCD_vidDisplaystring("new message");
    1bc4:	82 e8       	ldi	r24, 0x82	; 130
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	0e 94 36 0c 	call	0x186c	; 0x186c <LCD_vidDisplaystring>
    1bcc:	fe 01       	movw	r30, r28
    1bce:	ed 5b       	subi	r30, 0xBD	; 189
    1bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	aa e7       	ldi	r26, 0x7A	; 122
    1bd8:	b4 e4       	ldi	r27, 0x44	; 68
    1bda:	80 83       	st	Z, r24
    1bdc:	91 83       	std	Z+1, r25	; 0x01
    1bde:	a2 83       	std	Z+2, r26	; 0x02
    1be0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be2:	8e 01       	movw	r16, r28
    1be4:	01 5c       	subi	r16, 0xC1	; 193
    1be6:	1f 4f       	sbci	r17, 0xFF	; 255
    1be8:	fe 01       	movw	r30, r28
    1bea:	ed 5b       	subi	r30, 0xBD	; 189
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	60 81       	ld	r22, Z
    1bf0:	71 81       	ldd	r23, Z+1	; 0x01
    1bf2:	82 81       	ldd	r24, Z+2	; 0x02
    1bf4:	93 81       	ldd	r25, Z+3	; 0x03
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	4a ef       	ldi	r20, 0xFA	; 250
    1bfc:	54 e4       	ldi	r21, 0x44	; 68
    1bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	f8 01       	movw	r30, r16
    1c08:	80 83       	st	Z, r24
    1c0a:	91 83       	std	Z+1, r25	; 0x01
    1c0c:	a2 83       	std	Z+2, r26	; 0x02
    1c0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c10:	fe 01       	movw	r30, r28
    1c12:	ff 96       	adiw	r30, 0x3f	; 63
    1c14:	60 81       	ld	r22, Z
    1c16:	71 81       	ldd	r23, Z+1	; 0x01
    1c18:	82 81       	ldd	r24, Z+2	; 0x02
    1c1a:	93 81       	ldd	r25, Z+3	; 0x03
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	40 e8       	ldi	r20, 0x80	; 128
    1c22:	5f e3       	ldi	r21, 0x3F	; 63
    1c24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c28:	88 23       	and	r24, r24
    1c2a:	2c f4       	brge	.+10     	; 0x1c36 <main+0x288>
		__ticks = 1;
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	9e af       	std	Y+62, r25	; 0x3e
    1c32:	8d af       	std	Y+61, r24	; 0x3d
    1c34:	46 c0       	rjmp	.+140    	; 0x1cc2 <main+0x314>
	else if (__tmp > 65535)
    1c36:	fe 01       	movw	r30, r28
    1c38:	ff 96       	adiw	r30, 0x3f	; 63
    1c3a:	60 81       	ld	r22, Z
    1c3c:	71 81       	ldd	r23, Z+1	; 0x01
    1c3e:	82 81       	ldd	r24, Z+2	; 0x02
    1c40:	93 81       	ldd	r25, Z+3	; 0x03
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	3f ef       	ldi	r19, 0xFF	; 255
    1c46:	4f e7       	ldi	r20, 0x7F	; 127
    1c48:	57 e4       	ldi	r21, 0x47	; 71
    1c4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c4e:	18 16       	cp	r1, r24
    1c50:	64 f5       	brge	.+88     	; 0x1caa <main+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c52:	fe 01       	movw	r30, r28
    1c54:	ed 5b       	subi	r30, 0xBD	; 189
    1c56:	ff 4f       	sbci	r31, 0xFF	; 255
    1c58:	60 81       	ld	r22, Z
    1c5a:	71 81       	ldd	r23, Z+1	; 0x01
    1c5c:	82 81       	ldd	r24, Z+2	; 0x02
    1c5e:	93 81       	ldd	r25, Z+3	; 0x03
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	40 e2       	ldi	r20, 0x20	; 32
    1c66:	51 e4       	ldi	r21, 0x41	; 65
    1c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	bc 01       	movw	r22, r24
    1c72:	cd 01       	movw	r24, r26
    1c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	9e af       	std	Y+62, r25	; 0x3e
    1c7e:	8d af       	std	Y+61, r24	; 0x3d
    1c80:	0f c0       	rjmp	.+30     	; 0x1ca0 <main+0x2f2>
    1c82:	88 ec       	ldi	r24, 0xC8	; 200
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	9c af       	std	Y+60, r25	; 0x3c
    1c88:	8b af       	std	Y+59, r24	; 0x3b
    1c8a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c8c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	f1 f7       	brne	.-4      	; 0x1c8e <main+0x2e0>
    1c92:	9c af       	std	Y+60, r25	; 0x3c
    1c94:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c96:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c98:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	9e af       	std	Y+62, r25	; 0x3e
    1c9e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ca2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ca4:	00 97       	sbiw	r24, 0x00	; 0
    1ca6:	69 f7       	brne	.-38     	; 0x1c82 <main+0x2d4>
    1ca8:	16 c0       	rjmp	.+44     	; 0x1cd6 <main+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1caa:	fe 01       	movw	r30, r28
    1cac:	ff 96       	adiw	r30, 0x3f	; 63
    1cae:	60 81       	ld	r22, Z
    1cb0:	71 81       	ldd	r23, Z+1	; 0x01
    1cb2:	82 81       	ldd	r24, Z+2	; 0x02
    1cb4:	93 81       	ldd	r25, Z+3	; 0x03
    1cb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	9e af       	std	Y+62, r25	; 0x3e
    1cc0:	8d af       	std	Y+61, r24	; 0x3d
    1cc2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cc4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cc6:	9a af       	std	Y+58, r25	; 0x3a
    1cc8:	89 af       	std	Y+57, r24	; 0x39
    1cca:	89 ad       	ldd	r24, Y+57	; 0x39
    1ccc:	9a ad       	ldd	r25, Y+58	; 0x3a
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	f1 f7       	brne	.-4      	; 0x1cce <main+0x320>
    1cd2:	9a af       	std	Y+58, r25	; 0x3a
    1cd4:	89 af       	std	Y+57, r24	; 0x39
			   _delay_ms(1000);
			   LCD_vidExcuteCommand(0b00000001);
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_vidExcuteCommand>
			   GSM_Msg_Read(position); /* read arrived message */
    1cdc:	80 91 53 01 	lds	r24, 0x0153
    1ce0:	90 91 54 01 	lds	r25, 0x0154
    1ce4:	0e 94 57 17 	call	0x2eae	; 0x2eae <GSM_Msg_Read>
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	90 e8       	ldi	r25, 0x80	; 128
    1cec:	ab e3       	ldi	r26, 0x3B	; 59
    1cee:	b5 e4       	ldi	r27, 0x45	; 69
    1cf0:	8d ab       	std	Y+53, r24	; 0x35
    1cf2:	9e ab       	std	Y+54, r25	; 0x36
    1cf4:	af ab       	std	Y+55, r26	; 0x37
    1cf6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf8:	6d a9       	ldd	r22, Y+53	; 0x35
    1cfa:	7e a9       	ldd	r23, Y+54	; 0x36
    1cfc:	8f a9       	ldd	r24, Y+55	; 0x37
    1cfe:	98 ad       	ldd	r25, Y+56	; 0x38
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	4a ef       	ldi	r20, 0xFA	; 250
    1d06:	54 e4       	ldi	r21, 0x44	; 68
    1d08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	89 ab       	std	Y+49, r24	; 0x31
    1d12:	9a ab       	std	Y+50, r25	; 0x32
    1d14:	ab ab       	std	Y+51, r26	; 0x33
    1d16:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d18:	69 a9       	ldd	r22, Y+49	; 0x31
    1d1a:	7a a9       	ldd	r23, Y+50	; 0x32
    1d1c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d1e:	9c a9       	ldd	r25, Y+52	; 0x34
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	40 e8       	ldi	r20, 0x80	; 128
    1d26:	5f e3       	ldi	r21, 0x3F	; 63
    1d28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d2c:	88 23       	and	r24, r24
    1d2e:	2c f4       	brge	.+10     	; 0x1d3a <main+0x38c>
		__ticks = 1;
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	98 ab       	std	Y+48, r25	; 0x30
    1d36:	8f a7       	std	Y+47, r24	; 0x2f
    1d38:	3f c0       	rjmp	.+126    	; 0x1db8 <main+0x40a>
	else if (__tmp > 65535)
    1d3a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d3c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d3e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d40:	9c a9       	ldd	r25, Y+52	; 0x34
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	3f ef       	ldi	r19, 0xFF	; 255
    1d46:	4f e7       	ldi	r20, 0x7F	; 127
    1d48:	57 e4       	ldi	r21, 0x47	; 71
    1d4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d4e:	18 16       	cp	r1, r24
    1d50:	4c f5       	brge	.+82     	; 0x1da4 <main+0x3f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d52:	6d a9       	ldd	r22, Y+53	; 0x35
    1d54:	7e a9       	ldd	r23, Y+54	; 0x36
    1d56:	8f a9       	ldd	r24, Y+55	; 0x37
    1d58:	98 ad       	ldd	r25, Y+56	; 0x38
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	40 e2       	ldi	r20, 0x20	; 32
    1d60:	51 e4       	ldi	r21, 0x41	; 65
    1d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	bc 01       	movw	r22, r24
    1d6c:	cd 01       	movw	r24, r26
    1d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	98 ab       	std	Y+48, r25	; 0x30
    1d78:	8f a7       	std	Y+47, r24	; 0x2f
    1d7a:	0f c0       	rjmp	.+30     	; 0x1d9a <main+0x3ec>
    1d7c:	88 ec       	ldi	r24, 0xC8	; 200
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	9e a7       	std	Y+46, r25	; 0x2e
    1d82:	8d a7       	std	Y+45, r24	; 0x2d
    1d84:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d86:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	f1 f7       	brne	.-4      	; 0x1d88 <main+0x3da>
    1d8c:	9e a7       	std	Y+46, r25	; 0x2e
    1d8e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d90:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d92:	98 a9       	ldd	r25, Y+48	; 0x30
    1d94:	01 97       	sbiw	r24, 0x01	; 1
    1d96:	98 ab       	std	Y+48, r25	; 0x30
    1d98:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d9c:	98 a9       	ldd	r25, Y+48	; 0x30
    1d9e:	00 97       	sbiw	r24, 0x00	; 0
    1da0:	69 f7       	brne	.-38     	; 0x1d7c <main+0x3ce>
    1da2:	14 c0       	rjmp	.+40     	; 0x1dcc <main+0x41e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da4:	69 a9       	ldd	r22, Y+49	; 0x31
    1da6:	7a a9       	ldd	r23, Y+50	; 0x32
    1da8:	8b a9       	ldd	r24, Y+51	; 0x33
    1daa:	9c a9       	ldd	r25, Y+52	; 0x34
    1dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	98 ab       	std	Y+48, r25	; 0x30
    1db6:	8f a7       	std	Y+47, r24	; 0x2f
    1db8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dba:	98 a9       	ldd	r25, Y+48	; 0x30
    1dbc:	9c a7       	std	Y+44, r25	; 0x2c
    1dbe:	8b a7       	std	Y+43, r24	; 0x2b
    1dc0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dc2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	f1 f7       	brne	.-4      	; 0x1dc4 <main+0x416>
    1dc8:	9c a7       	std	Y+44, r25	; 0x2c
    1dca:	8b a7       	std	Y+43, r24	; 0x2b
			   _delay_ms(3000);

			/*check if received message is "call me" */
				if(strstr( message_received,"call me")){
    1dcc:	84 e0       	ldi	r24, 0x04	; 4
    1dce:	92 e0       	ldi	r25, 0x02	; 2
    1dd0:	2e e8       	ldi	r18, 0x8E	; 142
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	b9 01       	movw	r22, r18
    1dd6:	0e 94 ab 19 	call	0x3356	; 0x3356 <strstr>
    1dda:	00 97       	sbiw	r24, 0x00	; 0
    1ddc:	09 f4       	brne	.+2      	; 0x1de0 <main+0x432>
    1dde:	fd c0       	rjmp	.+506    	; 0x1fda <main+0x62c>

				    GSM_Calling(Mobile_no); /* call sender of message */
    1de0:	86 ef       	ldi	r24, 0xF6	; 246
    1de2:	91 e0       	ldi	r25, 0x01	; 1
    1de4:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <GSM_Calling>
			            LCD_vidExcuteCommand(0b00000001);
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_vidExcuteCommand>
			            LCD_vidGoToposition(1,0);
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	60 e0       	ldi	r22, 0x00	; 0
    1df2:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <LCD_vidGoToposition>
			       	   LCD_vidDisplaystring("calling...");
    1df6:	86 e9       	ldi	r24, 0x96	; 150
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	0e 94 36 0c 	call	0x186c	; 0x186c <LCD_vidDisplaystring>
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	90 e6       	ldi	r25, 0x60	; 96
    1e02:	aa e6       	ldi	r26, 0x6A	; 106
    1e04:	b6 e4       	ldi	r27, 0x46	; 70
    1e06:	8f a3       	std	Y+39, r24	; 0x27
    1e08:	98 a7       	std	Y+40, r25	; 0x28
    1e0a:	a9 a7       	std	Y+41, r26	; 0x29
    1e0c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e0e:	6f a1       	ldd	r22, Y+39	; 0x27
    1e10:	78 a5       	ldd	r23, Y+40	; 0x28
    1e12:	89 a5       	ldd	r24, Y+41	; 0x29
    1e14:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	4a ef       	ldi	r20, 0xFA	; 250
    1e1c:	54 e4       	ldi	r21, 0x44	; 68
    1e1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	8b a3       	std	Y+35, r24	; 0x23
    1e28:	9c a3       	std	Y+36, r25	; 0x24
    1e2a:	ad a3       	std	Y+37, r26	; 0x25
    1e2c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e2e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e30:	7c a1       	ldd	r23, Y+36	; 0x24
    1e32:	8d a1       	ldd	r24, Y+37	; 0x25
    1e34:	9e a1       	ldd	r25, Y+38	; 0x26
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	40 e8       	ldi	r20, 0x80	; 128
    1e3c:	5f e3       	ldi	r21, 0x3F	; 63
    1e3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e42:	88 23       	and	r24, r24
    1e44:	2c f4       	brge	.+10     	; 0x1e50 <main+0x4a2>
		__ticks = 1;
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	9a a3       	std	Y+34, r25	; 0x22
    1e4c:	89 a3       	std	Y+33, r24	; 0x21
    1e4e:	3f c0       	rjmp	.+126    	; 0x1ece <main+0x520>
	else if (__tmp > 65535)
    1e50:	6b a1       	ldd	r22, Y+35	; 0x23
    1e52:	7c a1       	ldd	r23, Y+36	; 0x24
    1e54:	8d a1       	ldd	r24, Y+37	; 0x25
    1e56:	9e a1       	ldd	r25, Y+38	; 0x26
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	3f ef       	ldi	r19, 0xFF	; 255
    1e5c:	4f e7       	ldi	r20, 0x7F	; 127
    1e5e:	57 e4       	ldi	r21, 0x47	; 71
    1e60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e64:	18 16       	cp	r1, r24
    1e66:	4c f5       	brge	.+82     	; 0x1eba <main+0x50c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e68:	6f a1       	ldd	r22, Y+39	; 0x27
    1e6a:	78 a5       	ldd	r23, Y+40	; 0x28
    1e6c:	89 a5       	ldd	r24, Y+41	; 0x29
    1e6e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	40 e2       	ldi	r20, 0x20	; 32
    1e76:	51 e4       	ldi	r21, 0x41	; 65
    1e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	bc 01       	movw	r22, r24
    1e82:	cd 01       	movw	r24, r26
    1e84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	9a a3       	std	Y+34, r25	; 0x22
    1e8e:	89 a3       	std	Y+33, r24	; 0x21
    1e90:	0f c0       	rjmp	.+30     	; 0x1eb0 <main+0x502>
    1e92:	88 ec       	ldi	r24, 0xC8	; 200
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	98 a3       	std	Y+32, r25	; 0x20
    1e98:	8f 8f       	std	Y+31, r24	; 0x1f
    1e9a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e9c:	98 a1       	ldd	r25, Y+32	; 0x20
    1e9e:	01 97       	sbiw	r24, 0x01	; 1
    1ea0:	f1 f7       	brne	.-4      	; 0x1e9e <main+0x4f0>
    1ea2:	98 a3       	std	Y+32, r25	; 0x20
    1ea4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ea8:	9a a1       	ldd	r25, Y+34	; 0x22
    1eaa:	01 97       	sbiw	r24, 0x01	; 1
    1eac:	9a a3       	std	Y+34, r25	; 0x22
    1eae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb0:	89 a1       	ldd	r24, Y+33	; 0x21
    1eb2:	9a a1       	ldd	r25, Y+34	; 0x22
    1eb4:	00 97       	sbiw	r24, 0x00	; 0
    1eb6:	69 f7       	brne	.-38     	; 0x1e92 <main+0x4e4>
    1eb8:	14 c0       	rjmp	.+40     	; 0x1ee2 <main+0x534>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eba:	6b a1       	ldd	r22, Y+35	; 0x23
    1ebc:	7c a1       	ldd	r23, Y+36	; 0x24
    1ebe:	8d a1       	ldd	r24, Y+37	; 0x25
    1ec0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	9a a3       	std	Y+34, r25	; 0x22
    1ecc:	89 a3       	std	Y+33, r24	; 0x21
    1ece:	89 a1       	ldd	r24, Y+33	; 0x21
    1ed0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ed2:	9e 8f       	std	Y+30, r25	; 0x1e
    1ed4:	8d 8f       	std	Y+29, r24	; 0x1d
    1ed6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ed8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1eda:	01 97       	sbiw	r24, 0x01	; 1
    1edc:	f1 f7       	brne	.-4      	; 0x1eda <main+0x52c>
    1ede:	9e 8f       	std	Y+30, r25	; 0x1e
    1ee0:	8d 8f       	std	Y+29, r24	; 0x1d
				    _delay_ms(15000);
				    GSM_HangCall(); /* hang call */
    1ee2:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <GSM_HangCall>
		            LCD_vidGoToposition(1,0);
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	60 e0       	ldi	r22, 0x00	; 0
    1eea:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <LCD_vidGoToposition>
		       	   LCD_vidDisplaystring("Hang Call");
    1eee:	81 ea       	ldi	r24, 0xA1	; 161
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	0e 94 36 0c 	call	0x186c	; 0x186c <LCD_vidDisplaystring>
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	aa e7       	ldi	r26, 0x7A	; 122
    1efc:	b4 e4       	ldi	r27, 0x44	; 68
    1efe:	89 8f       	std	Y+25, r24	; 0x19
    1f00:	9a 8f       	std	Y+26, r25	; 0x1a
    1f02:	ab 8f       	std	Y+27, r26	; 0x1b
    1f04:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f06:	69 8d       	ldd	r22, Y+25	; 0x19
    1f08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	4a ef       	ldi	r20, 0xFA	; 250
    1f14:	54 e4       	ldi	r21, 0x44	; 68
    1f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	8d 8b       	std	Y+21, r24	; 0x15
    1f20:	9e 8b       	std	Y+22, r25	; 0x16
    1f22:	af 8b       	std	Y+23, r26	; 0x17
    1f24:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f26:	6d 89       	ldd	r22, Y+21	; 0x15
    1f28:	7e 89       	ldd	r23, Y+22	; 0x16
    1f2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	40 e8       	ldi	r20, 0x80	; 128
    1f34:	5f e3       	ldi	r21, 0x3F	; 63
    1f36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f3a:	88 23       	and	r24, r24
    1f3c:	2c f4       	brge	.+10     	; 0x1f48 <main+0x59a>
		__ticks = 1;
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	9c 8b       	std	Y+20, r25	; 0x14
    1f44:	8b 8b       	std	Y+19, r24	; 0x13
    1f46:	3f c0       	rjmp	.+126    	; 0x1fc6 <main+0x618>
	else if (__tmp > 65535)
    1f48:	6d 89       	ldd	r22, Y+21	; 0x15
    1f4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	3f ef       	ldi	r19, 0xFF	; 255
    1f54:	4f e7       	ldi	r20, 0x7F	; 127
    1f56:	57 e4       	ldi	r21, 0x47	; 71
    1f58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f5c:	18 16       	cp	r1, r24
    1f5e:	4c f5       	brge	.+82     	; 0x1fb2 <main+0x604>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f60:	69 8d       	ldd	r22, Y+25	; 0x19
    1f62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	40 e2       	ldi	r20, 0x20	; 32
    1f6e:	51 e4       	ldi	r21, 0x41	; 65
    1f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	bc 01       	movw	r22, r24
    1f7a:	cd 01       	movw	r24, r26
    1f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	9c 8b       	std	Y+20, r25	; 0x14
    1f86:	8b 8b       	std	Y+19, r24	; 0x13
    1f88:	0f c0       	rjmp	.+30     	; 0x1fa8 <main+0x5fa>
    1f8a:	88 ec       	ldi	r24, 0xC8	; 200
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	9a 8b       	std	Y+18, r25	; 0x12
    1f90:	89 8b       	std	Y+17, r24	; 0x11
    1f92:	89 89       	ldd	r24, Y+17	; 0x11
    1f94:	9a 89       	ldd	r25, Y+18	; 0x12
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	f1 f7       	brne	.-4      	; 0x1f96 <main+0x5e8>
    1f9a:	9a 8b       	std	Y+18, r25	; 0x12
    1f9c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f9e:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	9c 8b       	std	Y+20, r25	; 0x14
    1fa6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa8:	8b 89       	ldd	r24, Y+19	; 0x13
    1faa:	9c 89       	ldd	r25, Y+20	; 0x14
    1fac:	00 97       	sbiw	r24, 0x00	; 0
    1fae:	69 f7       	brne	.-38     	; 0x1f8a <main+0x5dc>
    1fb0:	14 c0       	rjmp	.+40     	; 0x1fda <main+0x62c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fb4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fb6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fb8:	98 8d       	ldd	r25, Y+24	; 0x18
    1fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	9c 8b       	std	Y+20, r25	; 0x14
    1fc4:	8b 8b       	std	Y+19, r24	; 0x13
    1fc6:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc8:	9c 89       	ldd	r25, Y+20	; 0x14
    1fca:	98 8b       	std	Y+16, r25	; 0x10
    1fcc:	8f 87       	std	Y+15, r24	; 0x0f
    1fce:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fd0:	98 89       	ldd	r25, Y+16	; 0x10
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	f1 f7       	brne	.-4      	; 0x1fd2 <main+0x624>
    1fd6:	98 8b       	std	Y+16, r25	; 0x10
    1fd8:	8f 87       	std	Y+15, r24	; 0x0f
				    _delay_ms(1000);
				}


			LCD_vidExcuteCommand(0b00000001);
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_vidExcuteCommand>
			GSM_Msg_Delete(position); /* to save SIM memory delete current message */
    1fe0:	80 91 53 01 	lds	r24, 0x0153
    1fe4:	90 91 54 01 	lds	r25, 0x0154
    1fe8:	0e 94 37 12 	call	0x246e	; 0x246e <GSM_Msg_Delete>
            LCD_vidGoToposition(1,0);
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	60 e0       	ldi	r22, 0x00	; 0
    1ff0:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <LCD_vidGoToposition>
       	   LCD_vidDisplaystring("clear msg");
    1ff4:	8b ea       	ldi	r24, 0xAB	; 171
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	0e 94 36 0c 	call	0x186c	; 0x186c <LCD_vidDisplaystring>
			GSM_Response();
    1ffc:	0e 94 7f 15 	call	0x2afe	; 0x2afe <GSM_Response>
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	aa e7       	ldi	r26, 0x7A	; 122
    2006:	b4 e4       	ldi	r27, 0x44	; 68
    2008:	8b 87       	std	Y+11, r24	; 0x0b
    200a:	9c 87       	std	Y+12, r25	; 0x0c
    200c:	ad 87       	std	Y+13, r26	; 0x0d
    200e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2010:	6b 85       	ldd	r22, Y+11	; 0x0b
    2012:	7c 85       	ldd	r23, Y+12	; 0x0c
    2014:	8d 85       	ldd	r24, Y+13	; 0x0d
    2016:	9e 85       	ldd	r25, Y+14	; 0x0e
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	4a ef       	ldi	r20, 0xFA	; 250
    201e:	54 e4       	ldi	r21, 0x44	; 68
    2020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	8f 83       	std	Y+7, r24	; 0x07
    202a:	98 87       	std	Y+8, r25	; 0x08
    202c:	a9 87       	std	Y+9, r26	; 0x09
    202e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2030:	6f 81       	ldd	r22, Y+7	; 0x07
    2032:	78 85       	ldd	r23, Y+8	; 0x08
    2034:	89 85       	ldd	r24, Y+9	; 0x09
    2036:	9a 85       	ldd	r25, Y+10	; 0x0a
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	40 e8       	ldi	r20, 0x80	; 128
    203e:	5f e3       	ldi	r21, 0x3F	; 63
    2040:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2044:	88 23       	and	r24, r24
    2046:	2c f4       	brge	.+10     	; 0x2052 <main+0x6a4>
		__ticks = 1;
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	9e 83       	std	Y+6, r25	; 0x06
    204e:	8d 83       	std	Y+5, r24	; 0x05
    2050:	3f c0       	rjmp	.+126    	; 0x20d0 <main+0x722>
	else if (__tmp > 65535)
    2052:	6f 81       	ldd	r22, Y+7	; 0x07
    2054:	78 85       	ldd	r23, Y+8	; 0x08
    2056:	89 85       	ldd	r24, Y+9	; 0x09
    2058:	9a 85       	ldd	r25, Y+10	; 0x0a
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	3f ef       	ldi	r19, 0xFF	; 255
    205e:	4f e7       	ldi	r20, 0x7F	; 127
    2060:	57 e4       	ldi	r21, 0x47	; 71
    2062:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2066:	18 16       	cp	r1, r24
    2068:	4c f5       	brge	.+82     	; 0x20bc <main+0x70e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    206a:	6b 85       	ldd	r22, Y+11	; 0x0b
    206c:	7c 85       	ldd	r23, Y+12	; 0x0c
    206e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2070:	9e 85       	ldd	r25, Y+14	; 0x0e
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	40 e2       	ldi	r20, 0x20	; 32
    2078:	51 e4       	ldi	r21, 0x41	; 65
    207a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	bc 01       	movw	r22, r24
    2084:	cd 01       	movw	r24, r26
    2086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	9e 83       	std	Y+6, r25	; 0x06
    2090:	8d 83       	std	Y+5, r24	; 0x05
    2092:	0f c0       	rjmp	.+30     	; 0x20b2 <main+0x704>
    2094:	88 ec       	ldi	r24, 0xC8	; 200
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	9c 83       	std	Y+4, r25	; 0x04
    209a:	8b 83       	std	Y+3, r24	; 0x03
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	9c 81       	ldd	r25, Y+4	; 0x04
    20a0:	01 97       	sbiw	r24, 0x01	; 1
    20a2:	f1 f7       	brne	.-4      	; 0x20a0 <main+0x6f2>
    20a4:	9c 83       	std	Y+4, r25	; 0x04
    20a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a8:	8d 81       	ldd	r24, Y+5	; 0x05
    20aa:	9e 81       	ldd	r25, Y+6	; 0x06
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	9e 83       	std	Y+6, r25	; 0x06
    20b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b2:	8d 81       	ldd	r24, Y+5	; 0x05
    20b4:	9e 81       	ldd	r25, Y+6	; 0x06
    20b6:	00 97       	sbiw	r24, 0x00	; 0
    20b8:	69 f7       	brne	.-38     	; 0x2094 <main+0x6e6>
    20ba:	14 c0       	rjmp	.+40     	; 0x20e4 <main+0x736>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20bc:	6f 81       	ldd	r22, Y+7	; 0x07
    20be:	78 85       	ldd	r23, Y+8	; 0x08
    20c0:	89 85       	ldd	r24, Y+9	; 0x09
    20c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	9e 83       	std	Y+6, r25	; 0x06
    20ce:	8d 83       	std	Y+5, r24	; 0x05
    20d0:	8d 81       	ldd	r24, Y+5	; 0x05
    20d2:	9e 81       	ldd	r25, Y+6	; 0x06
    20d4:	9a 83       	std	Y+2, r25	; 0x02
    20d6:	89 83       	std	Y+1, r24	; 0x01
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	9a 81       	ldd	r25, Y+2	; 0x02
    20dc:	01 97       	sbiw	r24, 0x01	; 1
    20de:	f1 f7       	brne	.-4      	; 0x20dc <main+0x72e>
    20e0:	9a 83       	std	Y+2, r25	; 0x02
    20e2:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);

			}


			is_msg_arrived=0;
    20e4:	fe 01       	movw	r30, r28
    20e6:	eb 5a       	subi	r30, 0xAB	; 171
    20e8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ea:	11 82       	std	Z+1, r1	; 0x01
    20ec:	10 82       	st	Z, r1
			status_flag=0;
    20ee:	10 92 52 01 	sts	0x0152, r1
			LCD_vidExcuteCommand(0b00000001);
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_vidExcuteCommand>
			}
        LCD_vidGoToposition(1,0);
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	60 e0       	ldi	r22, 0x00	; 0
    20fc:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <LCD_vidGoToposition>
   	   LCD_vidDisplaystring("waiting for msg");
    2100:	85 eb       	ldi	r24, 0xB5	; 181
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	0e 94 36 0c 	call	0x186c	; 0x186c <LCD_vidDisplaystring>

		memset(Mobile_no, 0, 14);
    2108:	86 ef       	ldi	r24, 0xF6	; 246
    210a:	91 e0       	ldi	r25, 0x01	; 1
    210c:	60 e0       	ldi	r22, 0x00	; 0
    210e:	70 e0       	ldi	r23, 0x00	; 0
    2110:	4e e0       	ldi	r20, 0x0E	; 14
    2112:	50 e0       	ldi	r21, 0x00	; 0
    2114:	0e 94 8d 19 	call	0x331a	; 0x331a <memset>
		memset(message_received, 0, 60);
    2118:	84 e0       	ldi	r24, 0x04	; 4
    211a:	92 e0       	ldi	r25, 0x02	; 2
    211c:	60 e0       	ldi	r22, 0x00	; 0
    211e:	70 e0       	ldi	r23, 0x00	; 0
    2120:	4c e3       	ldi	r20, 0x3C	; 60
    2122:	50 e0       	ldi	r21, 0x00	; 0
    2124:	0e 94 8d 19 	call	0x331a	; 0x331a <memset>
    2128:	2f cd       	rjmp	.-1442   	; 0x1b88 <main+0x1da>

0000212a <GSM_Begin>:
}



void GSM_Begin()
{
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	aa 97       	sbiw	r28, 0x2a	; 42
    2134:	0f b6       	in	r0, 0x3f	; 63
    2136:	f8 94       	cli
    2138:	de bf       	out	0x3e, r29	; 62
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	cd bf       	out	0x3d, r28	; 61

	while(1)
	{
		LCD_vidExcuteCommand(0xc0);
    213e:	80 ec       	ldi	r24, 0xC0	; 192
    2140:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_vidExcuteCommand>
		USART_SendString("ATE0\r"); /* send ATE0 to check module is ready or not */ //AT+CCLK? to get RTC
    2144:	85 ec       	ldi	r24, 0xC5	; 197
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	0e 94 4a 09 	call	0x1294	; 0x1294 <USART_SendString>
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	aa ef       	ldi	r26, 0xFA	; 250
    2152:	b3 e4       	ldi	r27, 0x43	; 67
    2154:	8f a3       	std	Y+39, r24	; 0x27
    2156:	98 a7       	std	Y+40, r25	; 0x28
    2158:	a9 a7       	std	Y+41, r26	; 0x29
    215a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    215c:	6f a1       	ldd	r22, Y+39	; 0x27
    215e:	78 a5       	ldd	r23, Y+40	; 0x28
    2160:	89 a5       	ldd	r24, Y+41	; 0x29
    2162:	9a a5       	ldd	r25, Y+42	; 0x2a
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	4a ef       	ldi	r20, 0xFA	; 250
    216a:	54 e4       	ldi	r21, 0x44	; 68
    216c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	8b a3       	std	Y+35, r24	; 0x23
    2176:	9c a3       	std	Y+36, r25	; 0x24
    2178:	ad a3       	std	Y+37, r26	; 0x25
    217a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    217c:	6b a1       	ldd	r22, Y+35	; 0x23
    217e:	7c a1       	ldd	r23, Y+36	; 0x24
    2180:	8d a1       	ldd	r24, Y+37	; 0x25
    2182:	9e a1       	ldd	r25, Y+38	; 0x26
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 e8       	ldi	r20, 0x80	; 128
    218a:	5f e3       	ldi	r21, 0x3F	; 63
    218c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2190:	88 23       	and	r24, r24
    2192:	2c f4       	brge	.+10     	; 0x219e <GSM_Begin+0x74>
		__ticks = 1;
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	9a a3       	std	Y+34, r25	; 0x22
    219a:	89 a3       	std	Y+33, r24	; 0x21
    219c:	3f c0       	rjmp	.+126    	; 0x221c <GSM_Begin+0xf2>
	else if (__tmp > 65535)
    219e:	6b a1       	ldd	r22, Y+35	; 0x23
    21a0:	7c a1       	ldd	r23, Y+36	; 0x24
    21a2:	8d a1       	ldd	r24, Y+37	; 0x25
    21a4:	9e a1       	ldd	r25, Y+38	; 0x26
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	3f ef       	ldi	r19, 0xFF	; 255
    21aa:	4f e7       	ldi	r20, 0x7F	; 127
    21ac:	57 e4       	ldi	r21, 0x47	; 71
    21ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21b2:	18 16       	cp	r1, r24
    21b4:	4c f5       	brge	.+82     	; 0x2208 <GSM_Begin+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b6:	6f a1       	ldd	r22, Y+39	; 0x27
    21b8:	78 a5       	ldd	r23, Y+40	; 0x28
    21ba:	89 a5       	ldd	r24, Y+41	; 0x29
    21bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	40 e2       	ldi	r20, 0x20	; 32
    21c4:	51 e4       	ldi	r21, 0x41	; 65
    21c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	bc 01       	movw	r22, r24
    21d0:	cd 01       	movw	r24, r26
    21d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	9a a3       	std	Y+34, r25	; 0x22
    21dc:	89 a3       	std	Y+33, r24	; 0x21
    21de:	0f c0       	rjmp	.+30     	; 0x21fe <GSM_Begin+0xd4>
    21e0:	88 ec       	ldi	r24, 0xC8	; 200
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	98 a3       	std	Y+32, r25	; 0x20
    21e6:	8f 8f       	std	Y+31, r24	; 0x1f
    21e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21ea:	98 a1       	ldd	r25, Y+32	; 0x20
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	f1 f7       	brne	.-4      	; 0x21ec <GSM_Begin+0xc2>
    21f0:	98 a3       	std	Y+32, r25	; 0x20
    21f2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f4:	89 a1       	ldd	r24, Y+33	; 0x21
    21f6:	9a a1       	ldd	r25, Y+34	; 0x22
    21f8:	01 97       	sbiw	r24, 0x01	; 1
    21fa:	9a a3       	std	Y+34, r25	; 0x22
    21fc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2200:	9a a1       	ldd	r25, Y+34	; 0x22
    2202:	00 97       	sbiw	r24, 0x00	; 0
    2204:	69 f7       	brne	.-38     	; 0x21e0 <GSM_Begin+0xb6>
    2206:	14 c0       	rjmp	.+40     	; 0x2230 <GSM_Begin+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2208:	6b a1       	ldd	r22, Y+35	; 0x23
    220a:	7c a1       	ldd	r23, Y+36	; 0x24
    220c:	8d a1       	ldd	r24, Y+37	; 0x25
    220e:	9e a1       	ldd	r25, Y+38	; 0x26
    2210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	9a a3       	std	Y+34, r25	; 0x22
    221a:	89 a3       	std	Y+33, r24	; 0x21
    221c:	89 a1       	ldd	r24, Y+33	; 0x21
    221e:	9a a1       	ldd	r25, Y+34	; 0x22
    2220:	9e 8f       	std	Y+30, r25	; 0x1e
    2222:	8d 8f       	std	Y+29, r24	; 0x1d
    2224:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2226:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	f1 f7       	brne	.-4      	; 0x2228 <GSM_Begin+0xfe>
    222c:	9e 8f       	std	Y+30, r25	; 0x1e
    222e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500);

		if(strstr(buff,"OK"))
    2230:	86 e5       	ldi	r24, 0x56	; 86
    2232:	91 e0       	ldi	r25, 0x01	; 1
    2234:	2b ec       	ldi	r18, 0xCB	; 203
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	b9 01       	movw	r22, r18
    223a:	0e 94 ab 19 	call	0x3356	; 0x3356 <strstr>
    223e:	00 97       	sbiw	r24, 0x00	; 0
    2240:	09 f4       	brne	.+2      	; 0x2244 <GSM_Begin+0x11a>
    2242:	03 c1       	rjmp	.+518    	; 0x244a <GSM_Begin+0x320>
		{
			GSM_Response();
    2244:	0e 94 7f 15 	call	0x2afe	; 0x2afe <GSM_Response>
			memset(buff,0,160);
    2248:	86 e5       	ldi	r24, 0x56	; 86
    224a:	91 e0       	ldi	r25, 0x01	; 1
    224c:	60 e0       	ldi	r22, 0x00	; 0
    224e:	70 e0       	ldi	r23, 0x00	; 0
    2250:	40 ea       	ldi	r20, 0xA0	; 160
    2252:	50 e0       	ldi	r21, 0x00	; 0
    2254:	0e 94 8d 19 	call	0x331a	; 0x331a <memset>
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	aa e7       	ldi	r26, 0x7A	; 122
    225e:	b4 e4       	ldi	r27, 0x44	; 68
    2260:	89 8f       	std	Y+25, r24	; 0x19
    2262:	9a 8f       	std	Y+26, r25	; 0x1a
    2264:	ab 8f       	std	Y+27, r26	; 0x1b
    2266:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2268:	69 8d       	ldd	r22, Y+25	; 0x19
    226a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    226c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    226e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	4a ef       	ldi	r20, 0xFA	; 250
    2276:	54 e4       	ldi	r21, 0x44	; 68
    2278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227c:	dc 01       	movw	r26, r24
    227e:	cb 01       	movw	r24, r22
    2280:	8d 8b       	std	Y+21, r24	; 0x15
    2282:	9e 8b       	std	Y+22, r25	; 0x16
    2284:	af 8b       	std	Y+23, r26	; 0x17
    2286:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2288:	6d 89       	ldd	r22, Y+21	; 0x15
    228a:	7e 89       	ldd	r23, Y+22	; 0x16
    228c:	8f 89       	ldd	r24, Y+23	; 0x17
    228e:	98 8d       	ldd	r25, Y+24	; 0x18
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	40 e8       	ldi	r20, 0x80	; 128
    2296:	5f e3       	ldi	r21, 0x3F	; 63
    2298:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    229c:	88 23       	and	r24, r24
    229e:	2c f4       	brge	.+10     	; 0x22aa <GSM_Begin+0x180>
		__ticks = 1;
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	9c 8b       	std	Y+20, r25	; 0x14
    22a6:	8b 8b       	std	Y+19, r24	; 0x13
    22a8:	3f c0       	rjmp	.+126    	; 0x2328 <GSM_Begin+0x1fe>
	else if (__tmp > 65535)
    22aa:	6d 89       	ldd	r22, Y+21	; 0x15
    22ac:	7e 89       	ldd	r23, Y+22	; 0x16
    22ae:	8f 89       	ldd	r24, Y+23	; 0x17
    22b0:	98 8d       	ldd	r25, Y+24	; 0x18
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	3f ef       	ldi	r19, 0xFF	; 255
    22b6:	4f e7       	ldi	r20, 0x7F	; 127
    22b8:	57 e4       	ldi	r21, 0x47	; 71
    22ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22be:	18 16       	cp	r1, r24
    22c0:	4c f5       	brge	.+82     	; 0x2314 <GSM_Begin+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c2:	69 8d       	ldd	r22, Y+25	; 0x19
    22c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	40 e2       	ldi	r20, 0x20	; 32
    22d0:	51 e4       	ldi	r21, 0x41	; 65
    22d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	bc 01       	movw	r22, r24
    22dc:	cd 01       	movw	r24, r26
    22de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	9c 8b       	std	Y+20, r25	; 0x14
    22e8:	8b 8b       	std	Y+19, r24	; 0x13
    22ea:	0f c0       	rjmp	.+30     	; 0x230a <GSM_Begin+0x1e0>
    22ec:	88 ec       	ldi	r24, 0xC8	; 200
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	9a 8b       	std	Y+18, r25	; 0x12
    22f2:	89 8b       	std	Y+17, r24	; 0x11
    22f4:	89 89       	ldd	r24, Y+17	; 0x11
    22f6:	9a 89       	ldd	r25, Y+18	; 0x12
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	f1 f7       	brne	.-4      	; 0x22f8 <GSM_Begin+0x1ce>
    22fc:	9a 8b       	std	Y+18, r25	; 0x12
    22fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2300:	8b 89       	ldd	r24, Y+19	; 0x13
    2302:	9c 89       	ldd	r25, Y+20	; 0x14
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	9c 8b       	std	Y+20, r25	; 0x14
    2308:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230a:	8b 89       	ldd	r24, Y+19	; 0x13
    230c:	9c 89       	ldd	r25, Y+20	; 0x14
    230e:	00 97       	sbiw	r24, 0x00	; 0
    2310:	69 f7       	brne	.-38     	; 0x22ec <GSM_Begin+0x1c2>
    2312:	14 c0       	rjmp	.+40     	; 0x233c <GSM_Begin+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2314:	6d 89       	ldd	r22, Y+21	; 0x15
    2316:	7e 89       	ldd	r23, Y+22	; 0x16
    2318:	8f 89       	ldd	r24, Y+23	; 0x17
    231a:	98 8d       	ldd	r25, Y+24	; 0x18
    231c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	9c 8b       	std	Y+20, r25	; 0x14
    2326:	8b 8b       	std	Y+19, r24	; 0x13
    2328:	8b 89       	ldd	r24, Y+19	; 0x13
    232a:	9c 89       	ldd	r25, Y+20	; 0x14
    232c:	98 8b       	std	Y+16, r25	; 0x10
    232e:	8f 87       	std	Y+15, r24	; 0x0f
    2330:	8f 85       	ldd	r24, Y+15	; 0x0f
    2332:	98 89       	ldd	r25, Y+16	; 0x10
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	f1 f7       	brne	.-4      	; 0x2334 <GSM_Begin+0x20a>
    2338:	98 8b       	std	Y+16, r25	; 0x10
    233a:	8f 87       	std	Y+15, r24	; 0x0f
	   	   LCD_vidDisplaystring("Erorr");
		}
	}
	_delay_ms(1000);

	LCD_vidExcuteCommand(0b00000001);
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_vidExcuteCommand>
    LCD_vidGoToposition(1,0);
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	60 e0       	ldi	r22, 0x00	; 0
    2346:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <LCD_vidGoToposition>
    LCD_vidDisplaystring("Text Mode");
    234a:	8e ec       	ldi	r24, 0xCE	; 206
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	0e 94 36 0c 	call	0x186c	; 0x186c <LCD_vidDisplaystring>
	LCD_vidExcuteCommand(0xc0);
    2352:	80 ec       	ldi	r24, 0xC0	; 192
    2354:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_vidExcuteCommand>
	USART_SendString("AT+CMGF=1\r"); /* select message format as text */
    2358:	88 ed       	ldi	r24, 0xD8	; 216
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	0e 94 4a 09 	call	0x1294	; 0x1294 <USART_SendString>
	GSM_Response();
    2360:	0e 94 7f 15 	call	0x2afe	; 0x2afe <GSM_Response>
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	aa e7       	ldi	r26, 0x7A	; 122
    236a:	b4 e4       	ldi	r27, 0x44	; 68
    236c:	8b 87       	std	Y+11, r24	; 0x0b
    236e:	9c 87       	std	Y+12, r25	; 0x0c
    2370:	ad 87       	std	Y+13, r26	; 0x0d
    2372:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2374:	6b 85       	ldd	r22, Y+11	; 0x0b
    2376:	7c 85       	ldd	r23, Y+12	; 0x0c
    2378:	8d 85       	ldd	r24, Y+13	; 0x0d
    237a:	9e 85       	ldd	r25, Y+14	; 0x0e
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	4a ef       	ldi	r20, 0xFA	; 250
    2382:	54 e4       	ldi	r21, 0x44	; 68
    2384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	8f 83       	std	Y+7, r24	; 0x07
    238e:	98 87       	std	Y+8, r25	; 0x08
    2390:	a9 87       	std	Y+9, r26	; 0x09
    2392:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2394:	6f 81       	ldd	r22, Y+7	; 0x07
    2396:	78 85       	ldd	r23, Y+8	; 0x08
    2398:	89 85       	ldd	r24, Y+9	; 0x09
    239a:	9a 85       	ldd	r25, Y+10	; 0x0a
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	40 e8       	ldi	r20, 0x80	; 128
    23a2:	5f e3       	ldi	r21, 0x3F	; 63
    23a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23a8:	88 23       	and	r24, r24
    23aa:	2c f4       	brge	.+10     	; 0x23b6 <GSM_Begin+0x28c>
		__ticks = 1;
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	9e 83       	std	Y+6, r25	; 0x06
    23b2:	8d 83       	std	Y+5, r24	; 0x05
    23b4:	3f c0       	rjmp	.+126    	; 0x2434 <GSM_Begin+0x30a>
	else if (__tmp > 65535)
    23b6:	6f 81       	ldd	r22, Y+7	; 0x07
    23b8:	78 85       	ldd	r23, Y+8	; 0x08
    23ba:	89 85       	ldd	r24, Y+9	; 0x09
    23bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	3f ef       	ldi	r19, 0xFF	; 255
    23c2:	4f e7       	ldi	r20, 0x7F	; 127
    23c4:	57 e4       	ldi	r21, 0x47	; 71
    23c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ca:	18 16       	cp	r1, r24
    23cc:	4c f5       	brge	.+82     	; 0x2420 <GSM_Begin+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    23d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	40 e2       	ldi	r20, 0x20	; 32
    23dc:	51 e4       	ldi	r21, 0x41	; 65
    23de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	bc 01       	movw	r22, r24
    23e8:	cd 01       	movw	r24, r26
    23ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	9e 83       	std	Y+6, r25	; 0x06
    23f4:	8d 83       	std	Y+5, r24	; 0x05
    23f6:	0f c0       	rjmp	.+30     	; 0x2416 <GSM_Begin+0x2ec>
    23f8:	88 ec       	ldi	r24, 0xC8	; 200
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	9c 83       	std	Y+4, r25	; 0x04
    23fe:	8b 83       	std	Y+3, r24	; 0x03
    2400:	8b 81       	ldd	r24, Y+3	; 0x03
    2402:	9c 81       	ldd	r25, Y+4	; 0x04
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	f1 f7       	brne	.-4      	; 0x2404 <GSM_Begin+0x2da>
    2408:	9c 83       	std	Y+4, r25	; 0x04
    240a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    240c:	8d 81       	ldd	r24, Y+5	; 0x05
    240e:	9e 81       	ldd	r25, Y+6	; 0x06
    2410:	01 97       	sbiw	r24, 0x01	; 1
    2412:	9e 83       	std	Y+6, r25	; 0x06
    2414:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2416:	8d 81       	ldd	r24, Y+5	; 0x05
    2418:	9e 81       	ldd	r25, Y+6	; 0x06
    241a:	00 97       	sbiw	r24, 0x00	; 0
    241c:	69 f7       	brne	.-38     	; 0x23f8 <GSM_Begin+0x2ce>
    241e:	1e c0       	rjmp	.+60     	; 0x245c <GSM_Begin+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2420:	6f 81       	ldd	r22, Y+7	; 0x07
    2422:	78 85       	ldd	r23, Y+8	; 0x08
    2424:	89 85       	ldd	r24, Y+9	; 0x09
    2426:	9a 85       	ldd	r25, Y+10	; 0x0a
    2428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	9e 83       	std	Y+6, r25	; 0x06
    2432:	8d 83       	std	Y+5, r24	; 0x05
    2434:	8d 81       	ldd	r24, Y+5	; 0x05
    2436:	9e 81       	ldd	r25, Y+6	; 0x06
    2438:	9a 83       	std	Y+2, r25	; 0x02
    243a:	89 83       	std	Y+1, r24	; 0x01
    243c:	89 81       	ldd	r24, Y+1	; 0x01
    243e:	9a 81       	ldd	r25, Y+2	; 0x02
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	f1 f7       	brne	.-4      	; 0x2440 <GSM_Begin+0x316>
    2444:	9a 83       	std	Y+2, r25	; 0x02
    2446:	89 83       	std	Y+1, r24	; 0x01
    2448:	09 c0       	rjmp	.+18     	; 0x245c <GSM_Begin+0x332>
			memset(buff,0,160);
			break;
		}
		else
		{
	        LCD_vidGoToposition(1,0);
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	60 e0       	ldi	r22, 0x00	; 0
    244e:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <LCD_vidGoToposition>
	   	   LCD_vidDisplaystring("Erorr");
    2452:	83 ee       	ldi	r24, 0xE3	; 227
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	0e 94 36 0c 	call	0x186c	; 0x186c <LCD_vidDisplaystring>
    245a:	71 ce       	rjmp	.-798    	; 0x213e <GSM_Begin+0x14>
    LCD_vidDisplaystring("Text Mode");
	LCD_vidExcuteCommand(0xc0);
	USART_SendString("AT+CMGF=1\r"); /* select message format as text */
	GSM_Response();
	_delay_ms(1000);
}
    245c:	aa 96       	adiw	r28, 0x2a	; 42
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	f8 94       	cli
    2462:	de bf       	out	0x3e, r29	; 62
    2464:	0f be       	out	0x3f, r0	; 63
    2466:	cd bf       	out	0x3d, r28	; 61
    2468:	cf 91       	pop	r28
    246a:	df 91       	pop	r29
    246c:	08 95       	ret

0000246e <GSM_Msg_Delete>:

void GSM_Msg_Delete(unsigned int position)
{
    246e:	df 93       	push	r29
    2470:	cf 93       	push	r28
    2472:	cd b7       	in	r28, 0x3d	; 61
    2474:	de b7       	in	r29, 0x3e	; 62
    2476:	66 97       	sbiw	r28, 0x16	; 22
    2478:	0f b6       	in	r0, 0x3f	; 63
    247a:	f8 94       	cli
    247c:	de bf       	out	0x3e, r29	; 62
    247e:	0f be       	out	0x3f, r0	; 63
    2480:	cd bf       	out	0x3d, r28	; 61
    2482:	9e 8b       	std	Y+22, r25	; 0x16
    2484:	8d 8b       	std	Y+21, r24	; 0x15
	buffer_pointer=0;
    2486:	10 92 41 02 	sts	0x0241, r1
    248a:	10 92 40 02 	sts	0x0240, r1
	char delete_cmd[20];

      /* delete message at specified position */
	sprintf(delete_cmd,"AT+CMGD=%d\r",position);
    248e:	00 d0       	rcall	.+0      	; 0x2490 <GSM_Msg_Delete+0x22>
    2490:	00 d0       	rcall	.+0      	; 0x2492 <GSM_Msg_Delete+0x24>
    2492:	00 d0       	rcall	.+0      	; 0x2494 <GSM_Msg_Delete+0x26>
    2494:	ed b7       	in	r30, 0x3d	; 61
    2496:	fe b7       	in	r31, 0x3e	; 62
    2498:	31 96       	adiw	r30, 0x01	; 1
    249a:	ce 01       	movw	r24, r28
    249c:	01 96       	adiw	r24, 0x01	; 1
    249e:	91 83       	std	Z+1, r25	; 0x01
    24a0:	80 83       	st	Z, r24
    24a2:	89 ee       	ldi	r24, 0xE9	; 233
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	93 83       	std	Z+3, r25	; 0x03
    24a8:	82 83       	std	Z+2, r24	; 0x02
    24aa:	8d 89       	ldd	r24, Y+21	; 0x15
    24ac:	9e 89       	ldd	r25, Y+22	; 0x16
    24ae:	95 83       	std	Z+5, r25	; 0x05
    24b0:	84 83       	std	Z+4, r24	; 0x04
    24b2:	0e 94 cd 19 	call	0x339a	; 0x339a <sprintf>
    24b6:	8d b7       	in	r24, 0x3d	; 61
    24b8:	9e b7       	in	r25, 0x3e	; 62
    24ba:	06 96       	adiw	r24, 0x06	; 6
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	f8 94       	cli
    24c0:	9e bf       	out	0x3e, r25	; 62
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	8d bf       	out	0x3d, r24	; 61
	USART_SendString(delete_cmd);
    24c6:	ce 01       	movw	r24, r28
    24c8:	01 96       	adiw	r24, 0x01	; 1
    24ca:	0e 94 4a 09 	call	0x1294	; 0x1294 <USART_SendString>
}
    24ce:	66 96       	adiw	r28, 0x16	; 22
    24d0:	0f b6       	in	r0, 0x3f	; 63
    24d2:	f8 94       	cli
    24d4:	de bf       	out	0x3e, r29	; 62
    24d6:	0f be       	out	0x3f, r0	; 63
    24d8:	cd bf       	out	0x3d, r28	; 61
    24da:	cf 91       	pop	r28
    24dc:	df 91       	pop	r29
    24de:	08 95       	ret

000024e0 <GSM_Delete_All_Msg>:

void GSM_Delete_All_Msg()
{
    24e0:	df 93       	push	r29
    24e2:	cf 93       	push	r28
    24e4:	cd b7       	in	r28, 0x3d	; 61
    24e6:	de b7       	in	r29, 0x3e	; 62
   USART_SendString("AT+CMGDA=\"DEL ALL\"\r"); /* delete all messages of SIM */
    24e8:	85 ef       	ldi	r24, 0xF5	; 245
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	0e 94 4a 09 	call	0x1294	; 0x1294 <USART_SendString>
}
    24f0:	cf 91       	pop	r28
    24f2:	df 91       	pop	r29
    24f4:	08 95       	ret

000024f6 <GSM_Wait_for_Msg>:

bool GSM_Wait_for_Msg()
{
    24f6:	df 93       	push	r29
    24f8:	cf 93       	push	r28
    24fa:	cd b7       	in	r28, 0x3d	; 61
    24fc:	de b7       	in	r29, 0x3e	; 62
    24fe:	65 97       	sbiw	r28, 0x15	; 21
    2500:	0f b6       	in	r0, 0x3f	; 63
    2502:	f8 94       	cli
    2504:	de bf       	out	0x3e, r29	; 62
    2506:	0f be       	out	0x3f, r0	; 63
    2508:	cd bf       	out	0x3d, r28	; 61
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	aa ef       	ldi	r26, 0xFA	; 250
    2510:	b3 e4       	ldi	r27, 0x43	; 67
    2512:	8b 87       	std	Y+11, r24	; 0x0b
    2514:	9c 87       	std	Y+12, r25	; 0x0c
    2516:	ad 87       	std	Y+13, r26	; 0x0d
    2518:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    251a:	6b 85       	ldd	r22, Y+11	; 0x0b
    251c:	7c 85       	ldd	r23, Y+12	; 0x0c
    251e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2520:	9e 85       	ldd	r25, Y+14	; 0x0e
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	4a ef       	ldi	r20, 0xFA	; 250
    2528:	54 e4       	ldi	r21, 0x44	; 68
    252a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	8f 83       	std	Y+7, r24	; 0x07
    2534:	98 87       	std	Y+8, r25	; 0x08
    2536:	a9 87       	std	Y+9, r26	; 0x09
    2538:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    253a:	6f 81       	ldd	r22, Y+7	; 0x07
    253c:	78 85       	ldd	r23, Y+8	; 0x08
    253e:	89 85       	ldd	r24, Y+9	; 0x09
    2540:	9a 85       	ldd	r25, Y+10	; 0x0a
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	40 e8       	ldi	r20, 0x80	; 128
    2548:	5f e3       	ldi	r21, 0x3F	; 63
    254a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    254e:	88 23       	and	r24, r24
    2550:	2c f4       	brge	.+10     	; 0x255c <GSM_Wait_for_Msg+0x66>
		__ticks = 1;
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	9e 83       	std	Y+6, r25	; 0x06
    2558:	8d 83       	std	Y+5, r24	; 0x05
    255a:	3f c0       	rjmp	.+126    	; 0x25da <GSM_Wait_for_Msg+0xe4>
	else if (__tmp > 65535)
    255c:	6f 81       	ldd	r22, Y+7	; 0x07
    255e:	78 85       	ldd	r23, Y+8	; 0x08
    2560:	89 85       	ldd	r24, Y+9	; 0x09
    2562:	9a 85       	ldd	r25, Y+10	; 0x0a
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	3f ef       	ldi	r19, 0xFF	; 255
    2568:	4f e7       	ldi	r20, 0x7F	; 127
    256a:	57 e4       	ldi	r21, 0x47	; 71
    256c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2570:	18 16       	cp	r1, r24
    2572:	4c f5       	brge	.+82     	; 0x25c6 <GSM_Wait_for_Msg+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2574:	6b 85       	ldd	r22, Y+11	; 0x0b
    2576:	7c 85       	ldd	r23, Y+12	; 0x0c
    2578:	8d 85       	ldd	r24, Y+13	; 0x0d
    257a:	9e 85       	ldd	r25, Y+14	; 0x0e
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	40 e2       	ldi	r20, 0x20	; 32
    2582:	51 e4       	ldi	r21, 0x41	; 65
    2584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	bc 01       	movw	r22, r24
    258e:	cd 01       	movw	r24, r26
    2590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	9e 83       	std	Y+6, r25	; 0x06
    259a:	8d 83       	std	Y+5, r24	; 0x05
    259c:	0f c0       	rjmp	.+30     	; 0x25bc <GSM_Wait_for_Msg+0xc6>
    259e:	88 ec       	ldi	r24, 0xC8	; 200
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	9c 83       	std	Y+4, r25	; 0x04
    25a4:	8b 83       	std	Y+3, r24	; 0x03
    25a6:	8b 81       	ldd	r24, Y+3	; 0x03
    25a8:	9c 81       	ldd	r25, Y+4	; 0x04
    25aa:	01 97       	sbiw	r24, 0x01	; 1
    25ac:	f1 f7       	brne	.-4      	; 0x25aa <GSM_Wait_for_Msg+0xb4>
    25ae:	9c 83       	std	Y+4, r25	; 0x04
    25b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b2:	8d 81       	ldd	r24, Y+5	; 0x05
    25b4:	9e 81       	ldd	r25, Y+6	; 0x06
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	9e 83       	std	Y+6, r25	; 0x06
    25ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25bc:	8d 81       	ldd	r24, Y+5	; 0x05
    25be:	9e 81       	ldd	r25, Y+6	; 0x06
    25c0:	00 97       	sbiw	r24, 0x00	; 0
    25c2:	69 f7       	brne	.-38     	; 0x259e <GSM_Wait_for_Msg+0xa8>
    25c4:	14 c0       	rjmp	.+40     	; 0x25ee <GSM_Wait_for_Msg+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c6:	6f 81       	ldd	r22, Y+7	; 0x07
    25c8:	78 85       	ldd	r23, Y+8	; 0x08
    25ca:	89 85       	ldd	r24, Y+9	; 0x09
    25cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	9e 83       	std	Y+6, r25	; 0x06
    25d8:	8d 83       	std	Y+5, r24	; 0x05
    25da:	8d 81       	ldd	r24, Y+5	; 0x05
    25dc:	9e 81       	ldd	r25, Y+6	; 0x06
    25de:	9a 83       	std	Y+2, r25	; 0x02
    25e0:	89 83       	std	Y+1, r24	; 0x01
    25e2:	89 81       	ldd	r24, Y+1	; 0x01
    25e4:	9a 81       	ldd	r25, Y+2	; 0x02
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	f1 f7       	brne	.-4      	; 0x25e6 <GSM_Wait_for_Msg+0xf0>
    25ea:	9a 83       	std	Y+2, r25	; 0x02
    25ec:	89 83       	std	Y+1, r24	; 0x01
	char msg_location[4];
	int i;
	_delay_ms(500);
	buffer_pointer=0;
    25ee:	10 92 41 02 	sts	0x0241, r1
    25f2:	10 92 40 02 	sts	0x0240, r1

	while(1)
	{
           /*eliminate "\r \n" which is start of string */

	   if(buff[buffer_pointer]=='\r' || buff[buffer_pointer]== '\n'){
    25f6:	80 91 40 02 	lds	r24, 0x0240
    25fa:	90 91 41 02 	lds	r25, 0x0241
    25fe:	fc 01       	movw	r30, r24
    2600:	ea 5a       	subi	r30, 0xAA	; 170
    2602:	fe 4f       	sbci	r31, 0xFE	; 254
    2604:	80 81       	ld	r24, Z
    2606:	8d 30       	cpi	r24, 0x0D	; 13
    2608:	51 f0       	breq	.+20     	; 0x261e <GSM_Wait_for_Msg+0x128>
    260a:	80 91 40 02 	lds	r24, 0x0240
    260e:	90 91 41 02 	lds	r25, 0x0241
    2612:	fc 01       	movw	r30, r24
    2614:	ea 5a       	subi	r30, 0xAA	; 170
    2616:	fe 4f       	sbci	r31, 0xFE	; 254
    2618:	80 81       	ld	r24, Z
    261a:	8a 30       	cpi	r24, 0x0A	; 10
    261c:	51 f4       	brne	.+20     	; 0x2632 <GSM_Wait_for_Msg+0x13c>
			buffer_pointer++;
    261e:	80 91 40 02 	lds	r24, 0x0240
    2622:	90 91 41 02 	lds	r25, 0x0241
    2626:	01 96       	adiw	r24, 0x01	; 1
    2628:	90 93 41 02 	sts	0x0241, r25
    262c:	80 93 40 02 	sts	0x0240, r24
    2630:	e2 cf       	rjmp	.-60     	; 0x25f6 <GSM_Wait_for_Msg+0x100>
			break;
	}

	/* "CMTI:" to check if any new message received */

	if(strstr(buff,"CMTI:")){
    2632:	86 e5       	ldi	r24, 0x56	; 86
    2634:	91 e0       	ldi	r25, 0x01	; 1
    2636:	29 e0       	ldi	r18, 0x09	; 9
    2638:	31 e0       	ldi	r19, 0x01	; 1
    263a:	b9 01       	movw	r22, r18
    263c:	0e 94 ab 19 	call	0x3356	; 0x3356 <strstr>
    2640:	00 97       	sbiw	r24, 0x00	; 0
    2642:	09 f4       	brne	.+2      	; 0x2646 <GSM_Wait_for_Msg+0x150>
    2644:	63 c0       	rjmp	.+198    	; 0x270c <GSM_Wait_for_Msg+0x216>
    2646:	09 c0       	rjmp	.+18     	; 0x265a <GSM_Wait_for_Msg+0x164>
		while(buff[buffer_pointer]!= ',')
		{
			buffer_pointer++;
    2648:	80 91 40 02 	lds	r24, 0x0240
    264c:	90 91 41 02 	lds	r25, 0x0241
    2650:	01 96       	adiw	r24, 0x01	; 1
    2652:	90 93 41 02 	sts	0x0241, r25
    2656:	80 93 40 02 	sts	0x0240, r24
	}

	/* "CMTI:" to check if any new message received */

	if(strstr(buff,"CMTI:")){
		while(buff[buffer_pointer]!= ',')
    265a:	80 91 40 02 	lds	r24, 0x0240
    265e:	90 91 41 02 	lds	r25, 0x0241
    2662:	fc 01       	movw	r30, r24
    2664:	ea 5a       	subi	r30, 0xAA	; 170
    2666:	fe 4f       	sbci	r31, 0xFE	; 254
    2668:	80 81       	ld	r24, Z
    266a:	8c 32       	cpi	r24, 0x2C	; 44
    266c:	69 f7       	brne	.-38     	; 0x2648 <GSM_Wait_for_Msg+0x152>
		{
			buffer_pointer++;
		}
		buffer_pointer++;
    266e:	80 91 40 02 	lds	r24, 0x0240
    2672:	90 91 41 02 	lds	r25, 0x0241
    2676:	01 96       	adiw	r24, 0x01	; 1
    2678:	90 93 41 02 	sts	0x0241, r25
    267c:	80 93 40 02 	sts	0x0240, r24

		i=0;
    2680:	18 8a       	std	Y+16, r1	; 0x10
    2682:	1f 86       	std	Y+15, r1	; 0x0f
    2684:	1e c0       	rjmp	.+60     	; 0x26c2 <GSM_Wait_for_Msg+0x1cc>
		while(buff[buffer_pointer]!= '\r')
		{
			msg_location[i]=buff[buffer_pointer];				      /* copy location of received message where it is stored */
    2686:	2f 85       	ldd	r18, Y+15	; 0x0f
    2688:	38 89       	ldd	r19, Y+16	; 0x10
    268a:	80 91 40 02 	lds	r24, 0x0240
    268e:	90 91 41 02 	lds	r25, 0x0241
    2692:	fc 01       	movw	r30, r24
    2694:	ea 5a       	subi	r30, 0xAA	; 170
    2696:	fe 4f       	sbci	r31, 0xFE	; 254
    2698:	40 81       	ld	r20, Z
    269a:	ce 01       	movw	r24, r28
    269c:	41 96       	adiw	r24, 0x11	; 17
    269e:	fc 01       	movw	r30, r24
    26a0:	e2 0f       	add	r30, r18
    26a2:	f3 1f       	adc	r31, r19
    26a4:	40 83       	st	Z, r20
			buffer_pointer++;
    26a6:	80 91 40 02 	lds	r24, 0x0240
    26aa:	90 91 41 02 	lds	r25, 0x0241
    26ae:	01 96       	adiw	r24, 0x01	; 1
    26b0:	90 93 41 02 	sts	0x0241, r25
    26b4:	80 93 40 02 	sts	0x0240, r24
			i++;
    26b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    26ba:	98 89       	ldd	r25, Y+16	; 0x10
    26bc:	01 96       	adiw	r24, 0x01	; 1
    26be:	98 8b       	std	Y+16, r25	; 0x10
    26c0:	8f 87       	std	Y+15, r24	; 0x0f
			buffer_pointer++;
		}
		buffer_pointer++;

		i=0;
		while(buff[buffer_pointer]!= '\r')
    26c2:	80 91 40 02 	lds	r24, 0x0240
    26c6:	90 91 41 02 	lds	r25, 0x0241
    26ca:	fc 01       	movw	r30, r24
    26cc:	ea 5a       	subi	r30, 0xAA	; 170
    26ce:	fe 4f       	sbci	r31, 0xFE	; 254
    26d0:	80 81       	ld	r24, Z
    26d2:	8d 30       	cpi	r24, 0x0D	; 13
    26d4:	c1 f6       	brne	.-80     	; 0x2686 <GSM_Wait_for_Msg+0x190>
			buffer_pointer++;
			i++;
		}

		/* convert string of position to integer value */
		position = atoi(msg_location);
    26d6:	ce 01       	movw	r24, r28
    26d8:	41 96       	adiw	r24, 0x11	; 17
    26da:	0e 94 5d 19 	call	0x32ba	; 0x32ba <atoi>
    26de:	90 93 54 01 	sts	0x0154, r25
    26e2:	80 93 53 01 	sts	0x0153, r24

		memset(buff,0,strlen(buff));
    26e6:	86 e5       	ldi	r24, 0x56	; 86
    26e8:	91 e0       	ldi	r25, 0x01	; 1
    26ea:	0e 94 94 19 	call	0x3328	; 0x3328 <strlen>
    26ee:	9c 01       	movw	r18, r24
    26f0:	86 e5       	ldi	r24, 0x56	; 86
    26f2:	91 e0       	ldi	r25, 0x01	; 1
    26f4:	60 e0       	ldi	r22, 0x00	; 0
    26f6:	70 e0       	ldi	r23, 0x00	; 0
    26f8:	a9 01       	movw	r20, r18
    26fa:	0e 94 8d 19 	call	0x331a	; 0x331a <memset>
		buffer_pointer=0;
    26fe:	10 92 41 02 	sts	0x0241, r1
    2702:	10 92 40 02 	sts	0x0240, r1

		return true;
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	8d 8b       	std	Y+21, r24	; 0x15
    270a:	01 c0       	rjmp	.+2      	; 0x270e <GSM_Wait_for_Msg+0x218>
	}
	else
	{
		return false;
    270c:	1d 8a       	std	Y+21, r1	; 0x15
    270e:	8d 89       	ldd	r24, Y+21	; 0x15
	}
}
    2710:	65 96       	adiw	r28, 0x15	; 21
    2712:	0f b6       	in	r0, 0x3f	; 63
    2714:	f8 94       	cli
    2716:	de bf       	out	0x3e, r29	; 62
    2718:	0f be       	out	0x3f, r0	; 63
    271a:	cd bf       	out	0x3d, r28	; 61
    271c:	cf 91       	pop	r28
    271e:	df 91       	pop	r29
    2720:	08 95       	ret

00002722 <__vector_13>:

/* ISR routine to save responses/new message */
ISR(USART_RXC_vect)
{
    2722:	1f 92       	push	r1
    2724:	0f 92       	push	r0
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	0f 92       	push	r0
    272a:	11 24       	eor	r1, r1
    272c:	2f 93       	push	r18
    272e:	8f 93       	push	r24
    2730:	9f 93       	push	r25
    2732:	ef 93       	push	r30
    2734:	ff 93       	push	r31
    2736:	df 93       	push	r29
    2738:	cf 93       	push	r28
    273a:	cd b7       	in	r28, 0x3d	; 61
    273c:	de b7       	in	r29, 0x3e	; 62
   buff[buffer_pointer] = UDR;	/* copy UDR (received value) to buffer */
    273e:	80 91 40 02 	lds	r24, 0x0240
    2742:	90 91 41 02 	lds	r25, 0x0241
    2746:	ec e2       	ldi	r30, 0x2C	; 44
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	20 81       	ld	r18, Z
    274c:	fc 01       	movw	r30, r24
    274e:	ea 5a       	subi	r30, 0xAA	; 170
    2750:	fe 4f       	sbci	r31, 0xFE	; 254
    2752:	20 83       	st	Z, r18
   buffer_pointer++;
    2754:	80 91 40 02 	lds	r24, 0x0240
    2758:	90 91 41 02 	lds	r25, 0x0241
    275c:	01 96       	adiw	r24, 0x01	; 1
    275e:	90 93 41 02 	sts	0x0241, r25
    2762:	80 93 40 02 	sts	0x0240, r24
   status_flag = 1;		/* flag for new message arrival */
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	80 93 52 01 	sts	0x0152, r24
}
    276c:	cf 91       	pop	r28
    276e:	df 91       	pop	r29
    2770:	ff 91       	pop	r31
    2772:	ef 91       	pop	r30
    2774:	9f 91       	pop	r25
    2776:	8f 91       	pop	r24
    2778:	2f 91       	pop	r18
    277a:	0f 90       	pop	r0
    277c:	0f be       	out	0x3f, r0	; 63
    277e:	0f 90       	pop	r0
    2780:	1f 90       	pop	r1
    2782:	18 95       	reti

00002784 <GSM_Send_Msg>:


void GSM_Send_Msg(char *num,char *sms)
{
    2784:	df 93       	push	r29
    2786:	cf 93       	push	r28
    2788:	cd b7       	in	r28, 0x3d	; 61
    278a:	de b7       	in	r29, 0x3e	; 62
    278c:	c3 54       	subi	r28, 0x43	; 67
    278e:	d0 40       	sbci	r29, 0x00	; 0
    2790:	0f b6       	in	r0, 0x3f	; 63
    2792:	f8 94       	cli
    2794:	de bf       	out	0x3e, r29	; 62
    2796:	0f be       	out	0x3f, r0	; 63
    2798:	cd bf       	out	0x3d, r28	; 61
    279a:	fe 01       	movw	r30, r28
    279c:	e0 5c       	subi	r30, 0xC0	; 192
    279e:	ff 4f       	sbci	r31, 0xFF	; 255
    27a0:	91 83       	std	Z+1, r25	; 0x01
    27a2:	80 83       	st	Z, r24
    27a4:	fe 01       	movw	r30, r28
    27a6:	ee 5b       	subi	r30, 0xBE	; 190
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	71 83       	std	Z+1, r23	; 0x01
    27ac:	60 83       	st	Z, r22
	char sms_buffer[35];
	buffer_pointer=0;
    27ae:	10 92 41 02 	sts	0x0241, r1
    27b2:	10 92 40 02 	sts	0x0240, r1
	sprintf(sms_buffer,"AT+CMGS=\"%s\"\r",num);
    27b6:	00 d0       	rcall	.+0      	; 0x27b8 <GSM_Send_Msg+0x34>
    27b8:	00 d0       	rcall	.+0      	; 0x27ba <GSM_Send_Msg+0x36>
    27ba:	00 d0       	rcall	.+0      	; 0x27bc <GSM_Send_Msg+0x38>
    27bc:	ad b7       	in	r26, 0x3d	; 61
    27be:	be b7       	in	r27, 0x3e	; 62
    27c0:	11 96       	adiw	r26, 0x01	; 1
    27c2:	ce 01       	movw	r24, r28
    27c4:	4d 96       	adiw	r24, 0x1d	; 29
    27c6:	11 96       	adiw	r26, 0x01	; 1
    27c8:	9c 93       	st	X, r25
    27ca:	8e 93       	st	-X, r24
    27cc:	8f e0       	ldi	r24, 0x0F	; 15
    27ce:	91 e0       	ldi	r25, 0x01	; 1
    27d0:	13 96       	adiw	r26, 0x03	; 3
    27d2:	9c 93       	st	X, r25
    27d4:	8e 93       	st	-X, r24
    27d6:	12 97       	sbiw	r26, 0x02	; 2
    27d8:	fe 01       	movw	r30, r28
    27da:	e0 5c       	subi	r30, 0xC0	; 192
    27dc:	ff 4f       	sbci	r31, 0xFF	; 255
    27de:	80 81       	ld	r24, Z
    27e0:	91 81       	ldd	r25, Z+1	; 0x01
    27e2:	15 96       	adiw	r26, 0x05	; 5
    27e4:	9c 93       	st	X, r25
    27e6:	8e 93       	st	-X, r24
    27e8:	14 97       	sbiw	r26, 0x04	; 4
    27ea:	0e 94 cd 19 	call	0x339a	; 0x339a <sprintf>
    27ee:	8d b7       	in	r24, 0x3d	; 61
    27f0:	9e b7       	in	r25, 0x3e	; 62
    27f2:	06 96       	adiw	r24, 0x06	; 6
    27f4:	0f b6       	in	r0, 0x3f	; 63
    27f6:	f8 94       	cli
    27f8:	9e bf       	out	0x3e, r25	; 62
    27fa:	0f be       	out	0x3f, r0	; 63
    27fc:	8d bf       	out	0x3d, r24	; 61
	USART_SendString(sms_buffer); /*send command AT+CMGS="Mobile No."\r */
    27fe:	ce 01       	movw	r24, r28
    2800:	4d 96       	adiw	r24, 0x1d	; 29
    2802:	0e 94 4a 09 	call	0x1294	; 0x1294 <USART_SendString>
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	a8 e4       	ldi	r26, 0x48	; 72
    280c:	b3 e4       	ldi	r27, 0x43	; 67
    280e:	89 8f       	std	Y+25, r24	; 0x19
    2810:	9a 8f       	std	Y+26, r25	; 0x1a
    2812:	ab 8f       	std	Y+27, r26	; 0x1b
    2814:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2816:	69 8d       	ldd	r22, Y+25	; 0x19
    2818:	7a 8d       	ldd	r23, Y+26	; 0x1a
    281a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    281c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	4a ef       	ldi	r20, 0xFA	; 250
    2824:	54 e4       	ldi	r21, 0x44	; 68
    2826:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	8d 8b       	std	Y+21, r24	; 0x15
    2830:	9e 8b       	std	Y+22, r25	; 0x16
    2832:	af 8b       	std	Y+23, r26	; 0x17
    2834:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2836:	6d 89       	ldd	r22, Y+21	; 0x15
    2838:	7e 89       	ldd	r23, Y+22	; 0x16
    283a:	8f 89       	ldd	r24, Y+23	; 0x17
    283c:	98 8d       	ldd	r25, Y+24	; 0x18
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	40 e8       	ldi	r20, 0x80	; 128
    2844:	5f e3       	ldi	r21, 0x3F	; 63
    2846:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    284a:	88 23       	and	r24, r24
    284c:	2c f4       	brge	.+10     	; 0x2858 <GSM_Send_Msg+0xd4>
		__ticks = 1;
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	9c 8b       	std	Y+20, r25	; 0x14
    2854:	8b 8b       	std	Y+19, r24	; 0x13
    2856:	3f c0       	rjmp	.+126    	; 0x28d6 <GSM_Send_Msg+0x152>
	else if (__tmp > 65535)
    2858:	6d 89       	ldd	r22, Y+21	; 0x15
    285a:	7e 89       	ldd	r23, Y+22	; 0x16
    285c:	8f 89       	ldd	r24, Y+23	; 0x17
    285e:	98 8d       	ldd	r25, Y+24	; 0x18
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	3f ef       	ldi	r19, 0xFF	; 255
    2864:	4f e7       	ldi	r20, 0x7F	; 127
    2866:	57 e4       	ldi	r21, 0x47	; 71
    2868:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    286c:	18 16       	cp	r1, r24
    286e:	4c f5       	brge	.+82     	; 0x28c2 <GSM_Send_Msg+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2870:	69 8d       	ldd	r22, Y+25	; 0x19
    2872:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2874:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2876:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	40 e2       	ldi	r20, 0x20	; 32
    287e:	51 e4       	ldi	r21, 0x41	; 65
    2880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	bc 01       	movw	r22, r24
    288a:	cd 01       	movw	r24, r26
    288c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	9c 8b       	std	Y+20, r25	; 0x14
    2896:	8b 8b       	std	Y+19, r24	; 0x13
    2898:	0f c0       	rjmp	.+30     	; 0x28b8 <GSM_Send_Msg+0x134>
    289a:	88 ec       	ldi	r24, 0xC8	; 200
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	9a 8b       	std	Y+18, r25	; 0x12
    28a0:	89 8b       	std	Y+17, r24	; 0x11
    28a2:	89 89       	ldd	r24, Y+17	; 0x11
    28a4:	9a 89       	ldd	r25, Y+18	; 0x12
    28a6:	01 97       	sbiw	r24, 0x01	; 1
    28a8:	f1 f7       	brne	.-4      	; 0x28a6 <GSM_Send_Msg+0x122>
    28aa:	9a 8b       	std	Y+18, r25	; 0x12
    28ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ae:	8b 89       	ldd	r24, Y+19	; 0x13
    28b0:	9c 89       	ldd	r25, Y+20	; 0x14
    28b2:	01 97       	sbiw	r24, 0x01	; 1
    28b4:	9c 8b       	std	Y+20, r25	; 0x14
    28b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b8:	8b 89       	ldd	r24, Y+19	; 0x13
    28ba:	9c 89       	ldd	r25, Y+20	; 0x14
    28bc:	00 97       	sbiw	r24, 0x00	; 0
    28be:	69 f7       	brne	.-38     	; 0x289a <GSM_Send_Msg+0x116>
    28c0:	14 c0       	rjmp	.+40     	; 0x28ea <GSM_Send_Msg+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c2:	6d 89       	ldd	r22, Y+21	; 0x15
    28c4:	7e 89       	ldd	r23, Y+22	; 0x16
    28c6:	8f 89       	ldd	r24, Y+23	; 0x17
    28c8:	98 8d       	ldd	r25, Y+24	; 0x18
    28ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	9c 8b       	std	Y+20, r25	; 0x14
    28d4:	8b 8b       	std	Y+19, r24	; 0x13
    28d6:	8b 89       	ldd	r24, Y+19	; 0x13
    28d8:	9c 89       	ldd	r25, Y+20	; 0x14
    28da:	98 8b       	std	Y+16, r25	; 0x10
    28dc:	8f 87       	std	Y+15, r24	; 0x0f
    28de:	8f 85       	ldd	r24, Y+15	; 0x0f
    28e0:	98 89       	ldd	r25, Y+16	; 0x10
    28e2:	01 97       	sbiw	r24, 0x01	; 1
    28e4:	f1 f7       	brne	.-4      	; 0x28e2 <GSM_Send_Msg+0x15e>
    28e6:	98 8b       	std	Y+16, r25	; 0x10
    28e8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	while(1)
	{
		if(buff[buffer_pointer]==0x3e) /* wait for '>' character*/
    28ea:	80 91 40 02 	lds	r24, 0x0240
    28ee:	90 91 41 02 	lds	r25, 0x0241
    28f2:	fc 01       	movw	r30, r24
    28f4:	ea 5a       	subi	r30, 0xAA	; 170
    28f6:	fe 4f       	sbci	r31, 0xFE	; 254
    28f8:	80 81       	ld	r24, Z
    28fa:	8e 33       	cpi	r24, 0x3E	; 62
    28fc:	09 f0       	breq	.+2      	; 0x2900 <GSM_Send_Msg+0x17c>
    28fe:	b2 c0       	rjmp	.+356    	; 0x2a64 <GSM_Send_Msg+0x2e0>
		{
		   buffer_pointer = 0;
    2900:	10 92 41 02 	sts	0x0241, r1
    2904:	10 92 40 02 	sts	0x0240, r1
		   memset(buff,0,strlen(buff));
    2908:	86 e5       	ldi	r24, 0x56	; 86
    290a:	91 e0       	ldi	r25, 0x01	; 1
    290c:	0e 94 94 19 	call	0x3328	; 0x3328 <strlen>
    2910:	9c 01       	movw	r18, r24
    2912:	86 e5       	ldi	r24, 0x56	; 86
    2914:	91 e0       	ldi	r25, 0x01	; 1
    2916:	60 e0       	ldi	r22, 0x00	; 0
    2918:	70 e0       	ldi	r23, 0x00	; 0
    291a:	a9 01       	movw	r20, r18
    291c:	0e 94 8d 19 	call	0x331a	; 0x331a <memset>
		   USART_SendString(sms); /* send msg to given no. */
    2920:	fe 01       	movw	r30, r28
    2922:	ee 5b       	subi	r30, 0xBE	; 190
    2924:	ff 4f       	sbci	r31, 0xFF	; 255
    2926:	80 81       	ld	r24, Z
    2928:	91 81       	ldd	r25, Z+1	; 0x01
    292a:	0e 94 4a 09 	call	0x1294	; 0x1294 <USART_SendString>
		   USART_TxChar(0x1a); /* send Ctrl+Z */
    292e:	8a e1       	ldi	r24, 0x1A	; 26
    2930:	0e 94 33 09 	call	0x1266	; 0x1266 <USART_TxChar>
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	a6 e9       	ldi	r26, 0x96	; 150
    293a:	b3 e4       	ldi	r27, 0x43	; 67
    293c:	8b 87       	std	Y+11, r24	; 0x0b
    293e:	9c 87       	std	Y+12, r25	; 0x0c
    2940:	ad 87       	std	Y+13, r26	; 0x0d
    2942:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2944:	6b 85       	ldd	r22, Y+11	; 0x0b
    2946:	7c 85       	ldd	r23, Y+12	; 0x0c
    2948:	8d 85       	ldd	r24, Y+13	; 0x0d
    294a:	9e 85       	ldd	r25, Y+14	; 0x0e
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	4a ef       	ldi	r20, 0xFA	; 250
    2952:	54 e4       	ldi	r21, 0x44	; 68
    2954:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	8f 83       	std	Y+7, r24	; 0x07
    295e:	98 87       	std	Y+8, r25	; 0x08
    2960:	a9 87       	std	Y+9, r26	; 0x09
    2962:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2964:	6f 81       	ldd	r22, Y+7	; 0x07
    2966:	78 85       	ldd	r23, Y+8	; 0x08
    2968:	89 85       	ldd	r24, Y+9	; 0x09
    296a:	9a 85       	ldd	r25, Y+10	; 0x0a
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	40 e8       	ldi	r20, 0x80	; 128
    2972:	5f e3       	ldi	r21, 0x3F	; 63
    2974:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2978:	88 23       	and	r24, r24
    297a:	2c f4       	brge	.+10     	; 0x2986 <GSM_Send_Msg+0x202>
		__ticks = 1;
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	9e 83       	std	Y+6, r25	; 0x06
    2982:	8d 83       	std	Y+5, r24	; 0x05
    2984:	3f c0       	rjmp	.+126    	; 0x2a04 <GSM_Send_Msg+0x280>
	else if (__tmp > 65535)
    2986:	6f 81       	ldd	r22, Y+7	; 0x07
    2988:	78 85       	ldd	r23, Y+8	; 0x08
    298a:	89 85       	ldd	r24, Y+9	; 0x09
    298c:	9a 85       	ldd	r25, Y+10	; 0x0a
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	3f ef       	ldi	r19, 0xFF	; 255
    2992:	4f e7       	ldi	r20, 0x7F	; 127
    2994:	57 e4       	ldi	r21, 0x47	; 71
    2996:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    299a:	18 16       	cp	r1, r24
    299c:	4c f5       	brge	.+82     	; 0x29f0 <GSM_Send_Msg+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    299e:	6b 85       	ldd	r22, Y+11	; 0x0b
    29a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	40 e2       	ldi	r20, 0x20	; 32
    29ac:	51 e4       	ldi	r21, 0x41	; 65
    29ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	bc 01       	movw	r22, r24
    29b8:	cd 01       	movw	r24, r26
    29ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	9e 83       	std	Y+6, r25	; 0x06
    29c4:	8d 83       	std	Y+5, r24	; 0x05
    29c6:	0f c0       	rjmp	.+30     	; 0x29e6 <GSM_Send_Msg+0x262>
    29c8:	88 ec       	ldi	r24, 0xC8	; 200
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	9c 83       	std	Y+4, r25	; 0x04
    29ce:	8b 83       	std	Y+3, r24	; 0x03
    29d0:	8b 81       	ldd	r24, Y+3	; 0x03
    29d2:	9c 81       	ldd	r25, Y+4	; 0x04
    29d4:	01 97       	sbiw	r24, 0x01	; 1
    29d6:	f1 f7       	brne	.-4      	; 0x29d4 <GSM_Send_Msg+0x250>
    29d8:	9c 83       	std	Y+4, r25	; 0x04
    29da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29dc:	8d 81       	ldd	r24, Y+5	; 0x05
    29de:	9e 81       	ldd	r25, Y+6	; 0x06
    29e0:	01 97       	sbiw	r24, 0x01	; 1
    29e2:	9e 83       	std	Y+6, r25	; 0x06
    29e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e6:	8d 81       	ldd	r24, Y+5	; 0x05
    29e8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ea:	00 97       	sbiw	r24, 0x00	; 0
    29ec:	69 f7       	brne	.-38     	; 0x29c8 <GSM_Send_Msg+0x244>
    29ee:	14 c0       	rjmp	.+40     	; 0x2a18 <GSM_Send_Msg+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f0:	6f 81       	ldd	r22, Y+7	; 0x07
    29f2:	78 85       	ldd	r23, Y+8	; 0x08
    29f4:	89 85       	ldd	r24, Y+9	; 0x09
    29f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	9e 83       	std	Y+6, r25	; 0x06
    2a02:	8d 83       	std	Y+5, r24	; 0x05
    2a04:	8d 81       	ldd	r24, Y+5	; 0x05
    2a06:	9e 81       	ldd	r25, Y+6	; 0x06
    2a08:	9a 83       	std	Y+2, r25	; 0x02
    2a0a:	89 83       	std	Y+1, r24	; 0x01
    2a0c:	89 81       	ldd	r24, Y+1	; 0x01
    2a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	f1 f7       	brne	.-4      	; 0x2a10 <GSM_Send_Msg+0x28c>
    2a14:	9a 83       	std	Y+2, r25	; 0x02
    2a16:	89 83       	std	Y+1, r24	; 0x01
		   break;
		}
		buffer_pointer++;
	}
	_delay_ms(300);
	buffer_pointer = 0;
    2a18:	10 92 41 02 	sts	0x0241, r1
    2a1c:	10 92 40 02 	sts	0x0240, r1
	memset(buff,0,strlen(buff));
    2a20:	86 e5       	ldi	r24, 0x56	; 86
    2a22:	91 e0       	ldi	r25, 0x01	; 1
    2a24:	0e 94 94 19 	call	0x3328	; 0x3328 <strlen>
    2a28:	9c 01       	movw	r18, r24
    2a2a:	86 e5       	ldi	r24, 0x56	; 86
    2a2c:	91 e0       	ldi	r25, 0x01	; 1
    2a2e:	60 e0       	ldi	r22, 0x00	; 0
    2a30:	70 e0       	ldi	r23, 0x00	; 0
    2a32:	a9 01       	movw	r20, r18
    2a34:	0e 94 8d 19 	call	0x331a	; 0x331a <memset>
	memset(sms_buffer,0,strlen(sms_buffer));
    2a38:	ce 01       	movw	r24, r28
    2a3a:	4d 96       	adiw	r24, 0x1d	; 29
    2a3c:	0e 94 94 19 	call	0x3328	; 0x3328 <strlen>
    2a40:	9c 01       	movw	r18, r24
    2a42:	ce 01       	movw	r24, r28
    2a44:	4d 96       	adiw	r24, 0x1d	; 29
    2a46:	60 e0       	ldi	r22, 0x00	; 0
    2a48:	70 e0       	ldi	r23, 0x00	; 0
    2a4a:	a9 01       	movw	r20, r18
    2a4c:	0e 94 8d 19 	call	0x331a	; 0x331a <memset>
}
    2a50:	cd 5b       	subi	r28, 0xBD	; 189
    2a52:	df 4f       	sbci	r29, 0xFF	; 255
    2a54:	0f b6       	in	r0, 0x3f	; 63
    2a56:	f8 94       	cli
    2a58:	de bf       	out	0x3e, r29	; 62
    2a5a:	0f be       	out	0x3f, r0	; 63
    2a5c:	cd bf       	out	0x3d, r28	; 61
    2a5e:	cf 91       	pop	r28
    2a60:	df 91       	pop	r29
    2a62:	08 95       	ret
		   memset(buff,0,strlen(buff));
		   USART_SendString(sms); /* send msg to given no. */
		   USART_TxChar(0x1a); /* send Ctrl+Z */
		   break;
		}
		buffer_pointer++;
    2a64:	80 91 40 02 	lds	r24, 0x0240
    2a68:	90 91 41 02 	lds	r25, 0x0241
    2a6c:	01 96       	adiw	r24, 0x01	; 1
    2a6e:	90 93 41 02 	sts	0x0241, r25
    2a72:	80 93 40 02 	sts	0x0240, r24
    2a76:	39 cf       	rjmp	.-398    	; 0x28ea <GSM_Send_Msg+0x166>

00002a78 <GSM_Calling>:
	memset(buff,0,strlen(buff));
	memset(sms_buffer,0,strlen(sms_buffer));
}

void GSM_Calling(char *Mob_no)
{
    2a78:	df 93       	push	r29
    2a7a:	cf 93       	push	r28
    2a7c:	cd b7       	in	r28, 0x3d	; 61
    2a7e:	de b7       	in	r29, 0x3e	; 62
    2a80:	66 97       	sbiw	r28, 0x16	; 22
    2a82:	0f b6       	in	r0, 0x3f	; 63
    2a84:	f8 94       	cli
    2a86:	de bf       	out	0x3e, r29	; 62
    2a88:	0f be       	out	0x3f, r0	; 63
    2a8a:	cd bf       	out	0x3d, r28	; 61
    2a8c:	9e 8b       	std	Y+22, r25	; 0x16
    2a8e:	8d 8b       	std	Y+21, r24	; 0x15
   char call[20];
   sprintf(call,"ATD%s;\r",Mob_no);
    2a90:	00 d0       	rcall	.+0      	; 0x2a92 <GSM_Calling+0x1a>
    2a92:	00 d0       	rcall	.+0      	; 0x2a94 <GSM_Calling+0x1c>
    2a94:	00 d0       	rcall	.+0      	; 0x2a96 <GSM_Calling+0x1e>
    2a96:	ed b7       	in	r30, 0x3d	; 61
    2a98:	fe b7       	in	r31, 0x3e	; 62
    2a9a:	31 96       	adiw	r30, 0x01	; 1
    2a9c:	ce 01       	movw	r24, r28
    2a9e:	01 96       	adiw	r24, 0x01	; 1
    2aa0:	91 83       	std	Z+1, r25	; 0x01
    2aa2:	80 83       	st	Z, r24
    2aa4:	8d e1       	ldi	r24, 0x1D	; 29
    2aa6:	91 e0       	ldi	r25, 0x01	; 1
    2aa8:	93 83       	std	Z+3, r25	; 0x03
    2aaa:	82 83       	std	Z+2, r24	; 0x02
    2aac:	8d 89       	ldd	r24, Y+21	; 0x15
    2aae:	9e 89       	ldd	r25, Y+22	; 0x16
    2ab0:	95 83       	std	Z+5, r25	; 0x05
    2ab2:	84 83       	std	Z+4, r24	; 0x04
    2ab4:	0e 94 cd 19 	call	0x339a	; 0x339a <sprintf>
    2ab8:	8d b7       	in	r24, 0x3d	; 61
    2aba:	9e b7       	in	r25, 0x3e	; 62
    2abc:	06 96       	adiw	r24, 0x06	; 6
    2abe:	0f b6       	in	r0, 0x3f	; 63
    2ac0:	f8 94       	cli
    2ac2:	9e bf       	out	0x3e, r25	; 62
    2ac4:	0f be       	out	0x3f, r0	; 63
    2ac6:	8d bf       	out	0x3d, r24	; 61
   USART_SendString(call);	/* send command ATD<Mobile_No>; for calling*/
    2ac8:	ce 01       	movw	r24, r28
    2aca:	01 96       	adiw	r24, 0x01	; 1
    2acc:	0e 94 4a 09 	call	0x1294	; 0x1294 <USART_SendString>
}
    2ad0:	66 96       	adiw	r28, 0x16	; 22
    2ad2:	0f b6       	in	r0, 0x3f	; 63
    2ad4:	f8 94       	cli
    2ad6:	de bf       	out	0x3e, r29	; 62
    2ad8:	0f be       	out	0x3f, r0	; 63
    2ada:	cd bf       	out	0x3d, r28	; 61
    2adc:	cf 91       	pop	r28
    2ade:	df 91       	pop	r29
    2ae0:	08 95       	ret

00002ae2 <GSM_HangCall>:

void GSM_HangCall()
{
    2ae2:	df 93       	push	r29
    2ae4:	cf 93       	push	r28
    2ae6:	cd b7       	in	r28, 0x3d	; 61
    2ae8:	de b7       	in	r29, 0x3e	; 62
   LCD_vidExcuteCommand(0b00000001);
    2aea:	81 e0       	ldi	r24, 0x01	; 1
    2aec:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_vidExcuteCommand>
   USART_SendString("ATH\r");	/*send command ATH\r to hang call*/
    2af0:	85 e2       	ldi	r24, 0x25	; 37
    2af2:	91 e0       	ldi	r25, 0x01	; 1
    2af4:	0e 94 4a 09 	call	0x1294	; 0x1294 <USART_SendString>
}
    2af8:	cf 91       	pop	r28
    2afa:	df 91       	pop	r29
    2afc:	08 95       	ret

00002afe <GSM_Response>:

void GSM_Response()
{
    2afe:	0f 93       	push	r16
    2b00:	1f 93       	push	r17
    2b02:	df 93       	push	r29
    2b04:	cf 93       	push	r28
    2b06:	cd b7       	in	r28, 0x3d	; 61
    2b08:	de b7       	in	r29, 0x3e	; 62
    2b0a:	a7 97       	sbiw	r28, 0x27	; 39
    2b0c:	0f b6       	in	r0, 0x3f	; 63
    2b0e:	f8 94       	cli
    2b10:	de bf       	out	0x3e, r29	; 62
    2b12:	0f be       	out	0x3f, r0	; 63
    2b14:	cd bf       	out	0x3d, r28	; 61
	unsigned int timeout=0;
    2b16:	1c a2       	std	Y+36, r1	; 0x24
    2b18:	1b a2       	std	Y+35, r1	; 0x23
	int CRLF_Found=0;
    2b1a:	1a a2       	std	Y+34, r1	; 0x22
    2b1c:	19 a2       	std	Y+33, r1	; 0x21
	char CRLF_buff[2];
	int Response_Length=0;
    2b1e:	18 a2       	std	Y+32, r1	; 0x20
    2b20:	1f 8e       	std	Y+31, r1	; 0x1f
	while(1)
	{
		if(timeout>=60000)								/*if timeout occur then return */
    2b22:	8b a1       	ldd	r24, Y+35	; 0x23
    2b24:	9c a1       	ldd	r25, Y+36	; 0x24
    2b26:	2a ee       	ldi	r18, 0xEA	; 234
    2b28:	80 36       	cpi	r24, 0x60	; 96
    2b2a:	92 07       	cpc	r25, r18
    2b2c:	08 f0       	brcs	.+2      	; 0x2b30 <GSM_Response+0x32>
    2b2e:	48 c1       	rjmp	.+656    	; 0x2dc0 <GSM_Response+0x2c2>
		return;
		Response_Length = strlen(buff);
    2b30:	86 e5       	ldi	r24, 0x56	; 86
    2b32:	91 e0       	ldi	r25, 0x01	; 1
    2b34:	0e 94 94 19 	call	0x3328	; 0x3328 <strlen>
    2b38:	98 a3       	std	Y+32, r25	; 0x20
    2b3a:	8f 8f       	std	Y+31, r24	; 0x1f
		if(Response_Length)
    2b3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b3e:	98 a1       	ldd	r25, Y+32	; 0x20
    2b40:	00 97       	sbiw	r24, 0x00	; 0
    2b42:	09 f4       	brne	.+2      	; 0x2b46 <GSM_Response+0x48>
    2b44:	c5 c0       	rjmp	.+394    	; 0x2cd0 <GSM_Response+0x1d2>
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	a0 e0       	ldi	r26, 0x00	; 0
    2b4c:	b0 e4       	ldi	r27, 0x40	; 64
    2b4e:	89 8f       	std	Y+25, r24	; 0x19
    2b50:	9a 8f       	std	Y+26, r25	; 0x1a
    2b52:	ab 8f       	std	Y+27, r26	; 0x1b
    2b54:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b56:	69 8d       	ldd	r22, Y+25	; 0x19
    2b58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	4a ef       	ldi	r20, 0xFA	; 250
    2b64:	54 e4       	ldi	r21, 0x44	; 68
    2b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	8d 8b       	std	Y+21, r24	; 0x15
    2b70:	9e 8b       	std	Y+22, r25	; 0x16
    2b72:	af 8b       	std	Y+23, r26	; 0x17
    2b74:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b76:	6d 89       	ldd	r22, Y+21	; 0x15
    2b78:	7e 89       	ldd	r23, Y+22	; 0x16
    2b7a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b7c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	40 e8       	ldi	r20, 0x80	; 128
    2b84:	5f e3       	ldi	r21, 0x3F	; 63
    2b86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b8a:	88 23       	and	r24, r24
    2b8c:	2c f4       	brge	.+10     	; 0x2b98 <GSM_Response+0x9a>
		__ticks = 1;
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	9c 8b       	std	Y+20, r25	; 0x14
    2b94:	8b 8b       	std	Y+19, r24	; 0x13
    2b96:	3f c0       	rjmp	.+126    	; 0x2c16 <GSM_Response+0x118>
	else if (__tmp > 65535)
    2b98:	6d 89       	ldd	r22, Y+21	; 0x15
    2b9a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b9c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b9e:	98 8d       	ldd	r25, Y+24	; 0x18
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	3f ef       	ldi	r19, 0xFF	; 255
    2ba4:	4f e7       	ldi	r20, 0x7F	; 127
    2ba6:	57 e4       	ldi	r21, 0x47	; 71
    2ba8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bac:	18 16       	cp	r1, r24
    2bae:	4c f5       	brge	.+82     	; 0x2c02 <GSM_Response+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb0:	69 8d       	ldd	r22, Y+25	; 0x19
    2bb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bb8:	20 e0       	ldi	r18, 0x00	; 0
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	40 e2       	ldi	r20, 0x20	; 32
    2bbe:	51 e4       	ldi	r21, 0x41	; 65
    2bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	bc 01       	movw	r22, r24
    2bca:	cd 01       	movw	r24, r26
    2bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	9c 8b       	std	Y+20, r25	; 0x14
    2bd6:	8b 8b       	std	Y+19, r24	; 0x13
    2bd8:	0f c0       	rjmp	.+30     	; 0x2bf8 <GSM_Response+0xfa>
    2bda:	88 ec       	ldi	r24, 0xC8	; 200
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	9a 8b       	std	Y+18, r25	; 0x12
    2be0:	89 8b       	std	Y+17, r24	; 0x11
    2be2:	89 89       	ldd	r24, Y+17	; 0x11
    2be4:	9a 89       	ldd	r25, Y+18	; 0x12
    2be6:	01 97       	sbiw	r24, 0x01	; 1
    2be8:	f1 f7       	brne	.-4      	; 0x2be6 <GSM_Response+0xe8>
    2bea:	9a 8b       	std	Y+18, r25	; 0x12
    2bec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bee:	8b 89       	ldd	r24, Y+19	; 0x13
    2bf0:	9c 89       	ldd	r25, Y+20	; 0x14
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	9c 8b       	std	Y+20, r25	; 0x14
    2bf6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf8:	8b 89       	ldd	r24, Y+19	; 0x13
    2bfa:	9c 89       	ldd	r25, Y+20	; 0x14
    2bfc:	00 97       	sbiw	r24, 0x00	; 0
    2bfe:	69 f7       	brne	.-38     	; 0x2bda <GSM_Response+0xdc>
    2c00:	14 c0       	rjmp	.+40     	; 0x2c2a <GSM_Response+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c02:	6d 89       	ldd	r22, Y+21	; 0x15
    2c04:	7e 89       	ldd	r23, Y+22	; 0x16
    2c06:	8f 89       	ldd	r24, Y+23	; 0x17
    2c08:	98 8d       	ldd	r25, Y+24	; 0x18
    2c0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	9c 8b       	std	Y+20, r25	; 0x14
    2c14:	8b 8b       	std	Y+19, r24	; 0x13
    2c16:	8b 89       	ldd	r24, Y+19	; 0x13
    2c18:	9c 89       	ldd	r25, Y+20	; 0x14
    2c1a:	98 8b       	std	Y+16, r25	; 0x10
    2c1c:	8f 87       	std	Y+15, r24	; 0x0f
    2c1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c20:	98 89       	ldd	r25, Y+16	; 0x10
    2c22:	01 97       	sbiw	r24, 0x01	; 1
    2c24:	f1 f7       	brne	.-4      	; 0x2c22 <GSM_Response+0x124>
    2c26:	98 8b       	std	Y+16, r25	; 0x10
    2c28:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(2);
			timeout++;
    2c2a:	8b a1       	ldd	r24, Y+35	; 0x23
    2c2c:	9c a1       	ldd	r25, Y+36	; 0x24
    2c2e:	01 96       	adiw	r24, 0x01	; 1
    2c30:	9c a3       	std	Y+36, r25	; 0x24
    2c32:	8b a3       	std	Y+35, r24	; 0x23
			if(Response_Length==strlen(buff))
    2c34:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2c36:	18 a1       	ldd	r17, Y+32	; 0x20
    2c38:	86 e5       	ldi	r24, 0x56	; 86
    2c3a:	91 e0       	ldi	r25, 0x01	; 1
    2c3c:	0e 94 94 19 	call	0x3328	; 0x3328 <strlen>
    2c40:	08 17       	cp	r16, r24
    2c42:	19 07       	cpc	r17, r25
    2c44:	09 f0       	breq	.+2      	; 0x2c48 <GSM_Response+0x14a>
    2c46:	44 c0       	rjmp	.+136    	; 0x2cd0 <GSM_Response+0x1d2>
			{
				for(int i=0;i<Response_Length;i++)
    2c48:	1e 8e       	std	Y+30, r1	; 0x1e
    2c4a:	1d 8e       	std	Y+29, r1	; 0x1d
    2c4c:	38 c0       	rjmp	.+112    	; 0x2cbe <GSM_Response+0x1c0>
				{
					memmove(CRLF_buff,CRLF_buff+1,1);
    2c4e:	ae 01       	movw	r20, r28
    2c50:	4b 5d       	subi	r20, 0xDB	; 219
    2c52:	5f 4f       	sbci	r21, 0xFF	; 255
    2c54:	ce 01       	movw	r24, r28
    2c56:	85 96       	adiw	r24, 0x25	; 37
    2c58:	9c 01       	movw	r18, r24
    2c5a:	2f 5f       	subi	r18, 0xFF	; 255
    2c5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c5e:	ca 01       	movw	r24, r20
    2c60:	b9 01       	movw	r22, r18
    2c62:	41 e0       	ldi	r20, 0x01	; 1
    2c64:	50 e0       	ldi	r21, 0x00	; 0
    2c66:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <memmove>
					CRLF_buff[1]=buff[i];
    2c6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c6c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c6e:	fc 01       	movw	r30, r24
    2c70:	ea 5a       	subi	r30, 0xAA	; 170
    2c72:	fe 4f       	sbci	r31, 0xFE	; 254
    2c74:	80 81       	ld	r24, Z
    2c76:	8e a3       	std	Y+38, r24	; 0x26
					if(strncmp(CRLF_buff,"\r\n",2))
    2c78:	ce 01       	movw	r24, r28
    2c7a:	85 96       	adiw	r24, 0x25	; 37
    2c7c:	2a e2       	ldi	r18, 0x2A	; 42
    2c7e:	31 e0       	ldi	r19, 0x01	; 1
    2c80:	b9 01       	movw	r22, r18
    2c82:	42 e0       	ldi	r20, 0x02	; 2
    2c84:	50 e0       	ldi	r21, 0x00	; 0
    2c86:	0e 94 9d 19 	call	0x333a	; 0x333a <strncmp>
    2c8a:	00 97       	sbiw	r24, 0x00	; 0
    2c8c:	99 f0       	breq	.+38     	; 0x2cb4 <GSM_Response+0x1b6>
					{
					    if(CRLF_Found++==2)				                                    /* search for \r\n in string */
    2c8e:	1f a2       	std	Y+39, r1	; 0x27
    2c90:	89 a1       	ldd	r24, Y+33	; 0x21
    2c92:	9a a1       	ldd	r25, Y+34	; 0x22
    2c94:	82 30       	cpi	r24, 0x02	; 2
    2c96:	91 05       	cpc	r25, r1
    2c98:	11 f4       	brne	.+4      	; 0x2c9e <GSM_Response+0x1a0>
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	8f a3       	std	Y+39, r24	; 0x27
    2c9e:	89 a1       	ldd	r24, Y+33	; 0x21
    2ca0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ca2:	01 96       	adiw	r24, 0x01	; 1
    2ca4:	9a a3       	std	Y+34, r25	; 0x22
    2ca6:	89 a3       	std	Y+33, r24	; 0x21
    2ca8:	2f a1       	ldd	r18, Y+39	; 0x27
    2caa:	22 23       	and	r18, r18
    2cac:	19 f0       	breq	.+6      	; 0x2cb4 <GSM_Response+0x1b6>
					     {
						GSM_Response_Display();
    2cae:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <GSM_Response_Display>
    2cb2:	86 c0       	rjmp	.+268    	; 0x2dc0 <GSM_Response+0x2c2>
		{
			_delay_ms(2);
			timeout++;
			if(Response_Length==strlen(buff))
			{
				for(int i=0;i<Response_Length;i++)
    2cb4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cb6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cb8:	01 96       	adiw	r24, 0x01	; 1
    2cba:	9e 8f       	std	Y+30, r25	; 0x1e
    2cbc:	8d 8f       	std	Y+29, r24	; 0x1d
    2cbe:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2cc0:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2cc2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cc4:	98 a1       	ldd	r25, Y+32	; 0x20
    2cc6:	28 17       	cp	r18, r24
    2cc8:	39 07       	cpc	r19, r25
    2cca:	0c f2       	brlt	.-126    	; 0x2c4e <GSM_Response+0x150>
						return;
					     }
					}

				}
				CRLF_Found = 0;
    2ccc:	1a a2       	std	Y+34, r1	; 0x22
    2cce:	19 a2       	std	Y+33, r1	; 0x21
    2cd0:	80 e0       	ldi	r24, 0x00	; 0
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	a0 e8       	ldi	r26, 0x80	; 128
    2cd6:	bf e3       	ldi	r27, 0x3F	; 63
    2cd8:	8b 87       	std	Y+11, r24	; 0x0b
    2cda:	9c 87       	std	Y+12, r25	; 0x0c
    2cdc:	ad 87       	std	Y+13, r26	; 0x0d
    2cde:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ce2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ce4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ce6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ce8:	20 e0       	ldi	r18, 0x00	; 0
    2cea:	30 e0       	ldi	r19, 0x00	; 0
    2cec:	4a ef       	ldi	r20, 0xFA	; 250
    2cee:	54 e4       	ldi	r21, 0x44	; 68
    2cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf4:	dc 01       	movw	r26, r24
    2cf6:	cb 01       	movw	r24, r22
    2cf8:	8f 83       	std	Y+7, r24	; 0x07
    2cfa:	98 87       	std	Y+8, r25	; 0x08
    2cfc:	a9 87       	std	Y+9, r26	; 0x09
    2cfe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d00:	6f 81       	ldd	r22, Y+7	; 0x07
    2d02:	78 85       	ldd	r23, Y+8	; 0x08
    2d04:	89 85       	ldd	r24, Y+9	; 0x09
    2d06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	40 e8       	ldi	r20, 0x80	; 128
    2d0e:	5f e3       	ldi	r21, 0x3F	; 63
    2d10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d14:	88 23       	and	r24, r24
    2d16:	2c f4       	brge	.+10     	; 0x2d22 <GSM_Response+0x224>
		__ticks = 1;
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	9e 83       	std	Y+6, r25	; 0x06
    2d1e:	8d 83       	std	Y+5, r24	; 0x05
    2d20:	3f c0       	rjmp	.+126    	; 0x2da0 <GSM_Response+0x2a2>
	else if (__tmp > 65535)
    2d22:	6f 81       	ldd	r22, Y+7	; 0x07
    2d24:	78 85       	ldd	r23, Y+8	; 0x08
    2d26:	89 85       	ldd	r24, Y+9	; 0x09
    2d28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d2a:	20 e0       	ldi	r18, 0x00	; 0
    2d2c:	3f ef       	ldi	r19, 0xFF	; 255
    2d2e:	4f e7       	ldi	r20, 0x7F	; 127
    2d30:	57 e4       	ldi	r21, 0x47	; 71
    2d32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d36:	18 16       	cp	r1, r24
    2d38:	4c f5       	brge	.+82     	; 0x2d8c <GSM_Response+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d40:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	40 e2       	ldi	r20, 0x20	; 32
    2d48:	51 e4       	ldi	r21, 0x41	; 65
    2d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d4e:	dc 01       	movw	r26, r24
    2d50:	cb 01       	movw	r24, r22
    2d52:	bc 01       	movw	r22, r24
    2d54:	cd 01       	movw	r24, r26
    2d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	9e 83       	std	Y+6, r25	; 0x06
    2d60:	8d 83       	std	Y+5, r24	; 0x05
    2d62:	0f c0       	rjmp	.+30     	; 0x2d82 <GSM_Response+0x284>
    2d64:	88 ec       	ldi	r24, 0xC8	; 200
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	9c 83       	std	Y+4, r25	; 0x04
    2d6a:	8b 83       	std	Y+3, r24	; 0x03
    2d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d70:	01 97       	sbiw	r24, 0x01	; 1
    2d72:	f1 f7       	brne	.-4      	; 0x2d70 <GSM_Response+0x272>
    2d74:	9c 83       	std	Y+4, r25	; 0x04
    2d76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d78:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d7c:	01 97       	sbiw	r24, 0x01	; 1
    2d7e:	9e 83       	std	Y+6, r25	; 0x06
    2d80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d82:	8d 81       	ldd	r24, Y+5	; 0x05
    2d84:	9e 81       	ldd	r25, Y+6	; 0x06
    2d86:	00 97       	sbiw	r24, 0x00	; 0
    2d88:	69 f7       	brne	.-38     	; 0x2d64 <GSM_Response+0x266>
    2d8a:	14 c0       	rjmp	.+40     	; 0x2db4 <GSM_Response+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d8c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d8e:	78 85       	ldd	r23, Y+8	; 0x08
    2d90:	89 85       	ldd	r24, Y+9	; 0x09
    2d92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d98:	dc 01       	movw	r26, r24
    2d9a:	cb 01       	movw	r24, r22
    2d9c:	9e 83       	std	Y+6, r25	; 0x06
    2d9e:	8d 83       	std	Y+5, r24	; 0x05
    2da0:	8d 81       	ldd	r24, Y+5	; 0x05
    2da2:	9e 81       	ldd	r25, Y+6	; 0x06
    2da4:	9a 83       	std	Y+2, r25	; 0x02
    2da6:	89 83       	std	Y+1, r24	; 0x01
    2da8:	89 81       	ldd	r24, Y+1	; 0x01
    2daa:	9a 81       	ldd	r25, Y+2	; 0x02
    2dac:	01 97       	sbiw	r24, 0x01	; 1
    2dae:	f1 f7       	brne	.-4      	; 0x2dac <GSM_Response+0x2ae>
    2db0:	9a 83       	std	Y+2, r25	; 0x02
    2db2:	89 83       	std	Y+1, r24	; 0x01

			}

		}
		_delay_ms(1);
		timeout++;
    2db4:	8b a1       	ldd	r24, Y+35	; 0x23
    2db6:	9c a1       	ldd	r25, Y+36	; 0x24
    2db8:	01 96       	adiw	r24, 0x01	; 1
    2dba:	9c a3       	std	Y+36, r25	; 0x24
    2dbc:	8b a3       	std	Y+35, r24	; 0x23
    2dbe:	b1 ce       	rjmp	.-670    	; 0x2b22 <GSM_Response+0x24>
	}
	status_flag=0;
}
    2dc0:	a7 96       	adiw	r28, 0x27	; 39
    2dc2:	0f b6       	in	r0, 0x3f	; 63
    2dc4:	f8 94       	cli
    2dc6:	de bf       	out	0x3e, r29	; 62
    2dc8:	0f be       	out	0x3f, r0	; 63
    2dca:	cd bf       	out	0x3d, r28	; 61
    2dcc:	cf 91       	pop	r28
    2dce:	df 91       	pop	r29
    2dd0:	1f 91       	pop	r17
    2dd2:	0f 91       	pop	r16
    2dd4:	08 95       	ret

00002dd6 <GSM_Response_Display>:

void GSM_Response_Display()
{
    2dd6:	df 93       	push	r29
    2dd8:	cf 93       	push	r28
    2dda:	00 d0       	rcall	.+0      	; 0x2ddc <GSM_Response_Display+0x6>
    2ddc:	cd b7       	in	r28, 0x3d	; 61
    2dde:	de b7       	in	r29, 0x3e	; 62
	buffer_pointer = 0;
    2de0:	10 92 41 02 	sts	0x0241, r1
    2de4:	10 92 40 02 	sts	0x0240, r1
	int lcd_pointer = 0;
    2de8:	1a 82       	std	Y+2, r1	; 0x02
    2dea:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
          /* search for \r\n in string */
	  if(buff[buffer_pointer]== '\r' || buff[buffer_pointer]== '\n')
    2dec:	80 91 40 02 	lds	r24, 0x0240
    2df0:	90 91 41 02 	lds	r25, 0x0241
    2df4:	fc 01       	movw	r30, r24
    2df6:	ea 5a       	subi	r30, 0xAA	; 170
    2df8:	fe 4f       	sbci	r31, 0xFE	; 254
    2dfa:	80 81       	ld	r24, Z
    2dfc:	8d 30       	cpi	r24, 0x0D	; 13
    2dfe:	51 f0       	breq	.+20     	; 0x2e14 <GSM_Response_Display+0x3e>
    2e00:	80 91 40 02 	lds	r24, 0x0240
    2e04:	90 91 41 02 	lds	r25, 0x0241
    2e08:	fc 01       	movw	r30, r24
    2e0a:	ea 5a       	subi	r30, 0xAA	; 170
    2e0c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e0e:	80 81       	ld	r24, Z
    2e10:	8a 30       	cpi	r24, 0x0A	; 10
    2e12:	51 f4       	brne	.+20     	; 0x2e28 <GSM_Response_Display+0x52>
		{
			buffer_pointer++;
    2e14:	80 91 40 02 	lds	r24, 0x0240
    2e18:	90 91 41 02 	lds	r25, 0x0241
    2e1c:	01 96       	adiw	r24, 0x01	; 1
    2e1e:	90 93 41 02 	sts	0x0241, r25
    2e22:	80 93 40 02 	sts	0x0240, r24
    2e26:	e2 cf       	rjmp	.-60     	; 0x2dec <GSM_Response_Display+0x16>
		else
			break;
	}


	LCD_vidExcuteCommand(0xc0);
    2e28:	80 ec       	ldi	r24, 0xC0	; 192
    2e2a:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_vidExcuteCommand>
    2e2e:	20 c0       	rjmp	.+64     	; 0x2e70 <GSM_Response_Display+0x9a>
	while(buff[buffer_pointer]!='\r')								   /* display response till "\r" */
	{
		LCD_vidDisplayData(buff[buffer_pointer]);
    2e30:	80 91 40 02 	lds	r24, 0x0240
    2e34:	90 91 41 02 	lds	r25, 0x0241
    2e38:	fc 01       	movw	r30, r24
    2e3a:	ea 5a       	subi	r30, 0xAA	; 170
    2e3c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e3e:	80 81       	ld	r24, Z
    2e40:	0e 94 13 0a 	call	0x1426	; 0x1426 <LCD_vidDisplayData>
		buffer_pointer++;
    2e44:	80 91 40 02 	lds	r24, 0x0240
    2e48:	90 91 41 02 	lds	r25, 0x0241
    2e4c:	01 96       	adiw	r24, 0x01	; 1
    2e4e:	90 93 41 02 	sts	0x0241, r25
    2e52:	80 93 40 02 	sts	0x0240, r24
		lcd_pointer++;
    2e56:	89 81       	ldd	r24, Y+1	; 0x01
    2e58:	9a 81       	ldd	r25, Y+2	; 0x02
    2e5a:	01 96       	adiw	r24, 0x01	; 1
    2e5c:	9a 83       	std	Y+2, r25	; 0x02
    2e5e:	89 83       	std	Y+1, r24	; 0x01
		if(lcd_pointer==15)	/* check for end of LCD line */
    2e60:	89 81       	ldd	r24, Y+1	; 0x01
    2e62:	9a 81       	ldd	r25, Y+2	; 0x02
    2e64:	8f 30       	cpi	r24, 0x0F	; 15
    2e66:	91 05       	cpc	r25, r1
    2e68:	19 f4       	brne	.+6      	; 0x2e70 <GSM_Response_Display+0x9a>
		  LCD_vidExcuteCommand(0x80);
    2e6a:	80 e8       	ldi	r24, 0x80	; 128
    2e6c:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_vidExcuteCommand>
			break;
	}


	LCD_vidExcuteCommand(0xc0);
	while(buff[buffer_pointer]!='\r')								   /* display response till "\r" */
    2e70:	80 91 40 02 	lds	r24, 0x0240
    2e74:	90 91 41 02 	lds	r25, 0x0241
    2e78:	fc 01       	movw	r30, r24
    2e7a:	ea 5a       	subi	r30, 0xAA	; 170
    2e7c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e7e:	80 81       	ld	r24, Z
    2e80:	8d 30       	cpi	r24, 0x0D	; 13
    2e82:	b1 f6       	brne	.-84     	; 0x2e30 <GSM_Response_Display+0x5a>
		buffer_pointer++;
		lcd_pointer++;
		if(lcd_pointer==15)	/* check for end of LCD line */
		  LCD_vidExcuteCommand(0x80);
	}
	buffer_pointer = 0;
    2e84:	10 92 41 02 	sts	0x0241, r1
    2e88:	10 92 40 02 	sts	0x0240, r1
	memset(buff,0,strlen(buff));
    2e8c:	86 e5       	ldi	r24, 0x56	; 86
    2e8e:	91 e0       	ldi	r25, 0x01	; 1
    2e90:	0e 94 94 19 	call	0x3328	; 0x3328 <strlen>
    2e94:	9c 01       	movw	r18, r24
    2e96:	86 e5       	ldi	r24, 0x56	; 86
    2e98:	91 e0       	ldi	r25, 0x01	; 1
    2e9a:	60 e0       	ldi	r22, 0x00	; 0
    2e9c:	70 e0       	ldi	r23, 0x00	; 0
    2e9e:	a9 01       	movw	r20, r18
    2ea0:	0e 94 8d 19 	call	0x331a	; 0x331a <memset>
}
    2ea4:	0f 90       	pop	r0
    2ea6:	0f 90       	pop	r0
    2ea8:	cf 91       	pop	r28
    2eaa:	df 91       	pop	r29
    2eac:	08 95       	ret

00002eae <GSM_Msg_Read>:

void GSM_Msg_Read(int position)
{
    2eae:	df 93       	push	r29
    2eb0:	cf 93       	push	r28
    2eb2:	cd b7       	in	r28, 0x3d	; 61
    2eb4:	de b7       	in	r29, 0x3e	; 62
    2eb6:	2c 97       	sbiw	r28, 0x0c	; 12
    2eb8:	0f b6       	in	r0, 0x3f	; 63
    2eba:	f8 94       	cli
    2ebc:	de bf       	out	0x3e, r29	; 62
    2ebe:	0f be       	out	0x3f, r0	; 63
    2ec0:	cd bf       	out	0x3d, r28	; 61
    2ec2:	9c 87       	std	Y+12, r25	; 0x0c
    2ec4:	8b 87       	std	Y+11, r24	; 0x0b
	char read_cmd[10];
	sprintf(read_cmd,"AT+CMGR=%d\r",position);
    2ec6:	00 d0       	rcall	.+0      	; 0x2ec8 <GSM_Msg_Read+0x1a>
    2ec8:	00 d0       	rcall	.+0      	; 0x2eca <GSM_Msg_Read+0x1c>
    2eca:	00 d0       	rcall	.+0      	; 0x2ecc <GSM_Msg_Read+0x1e>
    2ecc:	ed b7       	in	r30, 0x3d	; 61
    2ece:	fe b7       	in	r31, 0x3e	; 62
    2ed0:	31 96       	adiw	r30, 0x01	; 1
    2ed2:	ce 01       	movw	r24, r28
    2ed4:	01 96       	adiw	r24, 0x01	; 1
    2ed6:	91 83       	std	Z+1, r25	; 0x01
    2ed8:	80 83       	st	Z, r24
    2eda:	8d e2       	ldi	r24, 0x2D	; 45
    2edc:	91 e0       	ldi	r25, 0x01	; 1
    2ede:	93 83       	std	Z+3, r25	; 0x03
    2ee0:	82 83       	std	Z+2, r24	; 0x02
    2ee2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ee4:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ee6:	95 83       	std	Z+5, r25	; 0x05
    2ee8:	84 83       	std	Z+4, r24	; 0x04
    2eea:	0e 94 cd 19 	call	0x339a	; 0x339a <sprintf>
    2eee:	8d b7       	in	r24, 0x3d	; 61
    2ef0:	9e b7       	in	r25, 0x3e	; 62
    2ef2:	06 96       	adiw	r24, 0x06	; 6
    2ef4:	0f b6       	in	r0, 0x3f	; 63
    2ef6:	f8 94       	cli
    2ef8:	9e bf       	out	0x3e, r25	; 62
    2efa:	0f be       	out	0x3f, r0	; 63
    2efc:	8d bf       	out	0x3d, r24	; 61
	USART_SendString(read_cmd);	/* read message at specified location/position */
    2efe:	ce 01       	movw	r24, r28
    2f00:	01 96       	adiw	r24, 0x01	; 1
    2f02:	0e 94 4a 09 	call	0x1294	; 0x1294 <USART_SendString>
	GSM_Msg_Display();	/* display message */
    2f06:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <GSM_Msg_Display>
}
    2f0a:	2c 96       	adiw	r28, 0x0c	; 12
    2f0c:	0f b6       	in	r0, 0x3f	; 63
    2f0e:	f8 94       	cli
    2f10:	de bf       	out	0x3e, r29	; 62
    2f12:	0f be       	out	0x3f, r0	; 63
    2f14:	cd bf       	out	0x3d, r28	; 61
    2f16:	cf 91       	pop	r28
    2f18:	df 91       	pop	r29
    2f1a:	08 95       	ret

00002f1c <GSM_Msg_Display>:

void GSM_Msg_Display()
{
    2f1c:	df 93       	push	r29
    2f1e:	cf 93       	push	r28
    2f20:	cd b7       	in	r28, 0x3d	; 61
    2f22:	de b7       	in	r29, 0x3e	; 62
    2f24:	62 97       	sbiw	r28, 0x12	; 18
    2f26:	0f b6       	in	r0, 0x3f	; 63
    2f28:	f8 94       	cli
    2f2a:	de bf       	out	0x3e, r29	; 62
    2f2c:	0f be       	out	0x3f, r0	; 63
    2f2e:	cd bf       	out	0x3d, r28	; 61
    2f30:	80 e0       	ldi	r24, 0x00	; 0
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	aa ef       	ldi	r26, 0xFA	; 250
    2f36:	b3 e4       	ldi	r27, 0x43	; 67
    2f38:	8b 87       	std	Y+11, r24	; 0x0b
    2f3a:	9c 87       	std	Y+12, r25	; 0x0c
    2f3c:	ad 87       	std	Y+13, r26	; 0x0d
    2f3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f40:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f42:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	4a ef       	ldi	r20, 0xFA	; 250
    2f4e:	54 e4       	ldi	r21, 0x44	; 68
    2f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f54:	dc 01       	movw	r26, r24
    2f56:	cb 01       	movw	r24, r22
    2f58:	8f 83       	std	Y+7, r24	; 0x07
    2f5a:	98 87       	std	Y+8, r25	; 0x08
    2f5c:	a9 87       	std	Y+9, r26	; 0x09
    2f5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f60:	6f 81       	ldd	r22, Y+7	; 0x07
    2f62:	78 85       	ldd	r23, Y+8	; 0x08
    2f64:	89 85       	ldd	r24, Y+9	; 0x09
    2f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f68:	20 e0       	ldi	r18, 0x00	; 0
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	40 e8       	ldi	r20, 0x80	; 128
    2f6e:	5f e3       	ldi	r21, 0x3F	; 63
    2f70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f74:	88 23       	and	r24, r24
    2f76:	2c f4       	brge	.+10     	; 0x2f82 <GSM_Msg_Display+0x66>
		__ticks = 1;
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	9e 83       	std	Y+6, r25	; 0x06
    2f7e:	8d 83       	std	Y+5, r24	; 0x05
    2f80:	3f c0       	rjmp	.+126    	; 0x3000 <GSM_Msg_Display+0xe4>
	else if (__tmp > 65535)
    2f82:	6f 81       	ldd	r22, Y+7	; 0x07
    2f84:	78 85       	ldd	r23, Y+8	; 0x08
    2f86:	89 85       	ldd	r24, Y+9	; 0x09
    2f88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	3f ef       	ldi	r19, 0xFF	; 255
    2f8e:	4f e7       	ldi	r20, 0x7F	; 127
    2f90:	57 e4       	ldi	r21, 0x47	; 71
    2f92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f96:	18 16       	cp	r1, r24
    2f98:	4c f5       	brge	.+82     	; 0x2fec <GSM_Msg_Display+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fa2:	20 e0       	ldi	r18, 0x00	; 0
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	40 e2       	ldi	r20, 0x20	; 32
    2fa8:	51 e4       	ldi	r21, 0x41	; 65
    2faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fae:	dc 01       	movw	r26, r24
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	bc 01       	movw	r22, r24
    2fb4:	cd 01       	movw	r24, r26
    2fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fba:	dc 01       	movw	r26, r24
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	9e 83       	std	Y+6, r25	; 0x06
    2fc0:	8d 83       	std	Y+5, r24	; 0x05
    2fc2:	0f c0       	rjmp	.+30     	; 0x2fe2 <GSM_Msg_Display+0xc6>
    2fc4:	88 ec       	ldi	r24, 0xC8	; 200
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	9c 83       	std	Y+4, r25	; 0x04
    2fca:	8b 83       	std	Y+3, r24	; 0x03
    2fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fce:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd0:	01 97       	sbiw	r24, 0x01	; 1
    2fd2:	f1 f7       	brne	.-4      	; 0x2fd0 <GSM_Msg_Display+0xb4>
    2fd4:	9c 83       	std	Y+4, r25	; 0x04
    2fd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2fda:	9e 81       	ldd	r25, Y+6	; 0x06
    2fdc:	01 97       	sbiw	r24, 0x01	; 1
    2fde:	9e 83       	std	Y+6, r25	; 0x06
    2fe0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe6:	00 97       	sbiw	r24, 0x00	; 0
    2fe8:	69 f7       	brne	.-38     	; 0x2fc4 <GSM_Msg_Display+0xa8>
    2fea:	14 c0       	rjmp	.+40     	; 0x3014 <GSM_Msg_Display+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fec:	6f 81       	ldd	r22, Y+7	; 0x07
    2fee:	78 85       	ldd	r23, Y+8	; 0x08
    2ff0:	89 85       	ldd	r24, Y+9	; 0x09
    2ff2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff8:	dc 01       	movw	r26, r24
    2ffa:	cb 01       	movw	r24, r22
    2ffc:	9e 83       	std	Y+6, r25	; 0x06
    2ffe:	8d 83       	std	Y+5, r24	; 0x05
    3000:	8d 81       	ldd	r24, Y+5	; 0x05
    3002:	9e 81       	ldd	r25, Y+6	; 0x06
    3004:	9a 83       	std	Y+2, r25	; 0x02
    3006:	89 83       	std	Y+1, r24	; 0x01
    3008:	89 81       	ldd	r24, Y+1	; 0x01
    300a:	9a 81       	ldd	r25, Y+2	; 0x02
    300c:	01 97       	sbiw	r24, 0x01	; 1
    300e:	f1 f7       	brne	.-4      	; 0x300c <GSM_Msg_Display+0xf0>
    3010:	9a 83       	std	Y+2, r25	; 0x02
    3012:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	if(!(strstr(buff,"+CMGR")))	/*check for +CMGR response */
    3014:	86 e5       	ldi	r24, 0x56	; 86
    3016:	91 e0       	ldi	r25, 0x01	; 1
    3018:	29 e3       	ldi	r18, 0x39	; 57
    301a:	31 e0       	ldi	r19, 0x01	; 1
    301c:	b9 01       	movw	r22, r18
    301e:	0e 94 ab 19 	call	0x3356	; 0x3356 <strstr>
    3022:	00 97       	sbiw	r24, 0x00	; 0
    3024:	49 f4       	brne	.+18     	; 0x3038 <GSM_Msg_Display+0x11c>
	{
		 LCD_vidGoToposition(1,0);
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	60 e0       	ldi	r22, 0x00	; 0
    302a:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <LCD_vidGoToposition>
	     LCD_vidDisplaystring("No message");
    302e:	8f e3       	ldi	r24, 0x3F	; 63
    3030:	91 e0       	ldi	r25, 0x01	; 1
    3032:	0e 94 36 0c 	call	0x186c	; 0x186c <LCD_vidDisplaystring>
    3036:	c9 c0       	rjmp	.+402    	; 0x31ca <GSM_Msg_Display+0x2ae>
	}
	else
	{
		buffer_pointer = 0;
    3038:	10 92 41 02 	sts	0x0241, r1
    303c:	10 92 40 02 	sts	0x0240, r1

		while(1)
		{
                        /*wait till \r\n not over*/

			if(buff[buffer_pointer]=='\r' || buff[buffer_pointer]== 'n') 			                {
    3040:	80 91 40 02 	lds	r24, 0x0240
    3044:	90 91 41 02 	lds	r25, 0x0241
    3048:	fc 01       	movw	r30, r24
    304a:	ea 5a       	subi	r30, 0xAA	; 170
    304c:	fe 4f       	sbci	r31, 0xFE	; 254
    304e:	80 81       	ld	r24, Z
    3050:	8d 30       	cpi	r24, 0x0D	; 13
    3052:	51 f0       	breq	.+20     	; 0x3068 <GSM_Msg_Display+0x14c>
    3054:	80 91 40 02 	lds	r24, 0x0240
    3058:	90 91 41 02 	lds	r25, 0x0241
    305c:	fc 01       	movw	r30, r24
    305e:	ea 5a       	subi	r30, 0xAA	; 170
    3060:	fe 4f       	sbci	r31, 0xFE	; 254
    3062:	80 81       	ld	r24, Z
    3064:	8e 36       	cpi	r24, 0x6E	; 110
    3066:	99 f4       	brne	.+38     	; 0x308e <GSM_Msg_Display+0x172>
				buffer_pointer++;
    3068:	80 91 40 02 	lds	r24, 0x0240
    306c:	90 91 41 02 	lds	r25, 0x0241
    3070:	01 96       	adiw	r24, 0x01	; 1
    3072:	90 93 41 02 	sts	0x0241, r25
    3076:	80 93 40 02 	sts	0x0240, r24
    307a:	e2 cf       	rjmp	.-60     	; 0x3040 <GSM_Msg_Display+0x124>
		}

		/* search for 1st ',' to get mobile no.*/
		while(buff[buffer_pointer]!=',')
		{
			buffer_pointer++;
    307c:	80 91 40 02 	lds	r24, 0x0240
    3080:	90 91 41 02 	lds	r25, 0x0241
    3084:	01 96       	adiw	r24, 0x01	; 1
    3086:	90 93 41 02 	sts	0x0241, r25
    308a:	80 93 40 02 	sts	0x0240, r24
			else
			        break;
		}

		/* search for 1st ',' to get mobile no.*/
		while(buff[buffer_pointer]!=',')
    308e:	80 91 40 02 	lds	r24, 0x0240
    3092:	90 91 41 02 	lds	r25, 0x0241
    3096:	fc 01       	movw	r30, r24
    3098:	ea 5a       	subi	r30, 0xAA	; 170
    309a:	fe 4f       	sbci	r31, 0xFE	; 254
    309c:	80 81       	ld	r24, Z
    309e:	8c 32       	cpi	r24, 0x2C	; 44
    30a0:	69 f7       	brne	.-38     	; 0x307c <GSM_Msg_Display+0x160>
		{
			buffer_pointer++;
		}
		buffer_pointer = buffer_pointer+2;
    30a2:	80 91 40 02 	lds	r24, 0x0240
    30a6:	90 91 41 02 	lds	r25, 0x0241
    30aa:	02 96       	adiw	r24, 0x02	; 2
    30ac:	90 93 41 02 	sts	0x0241, r25
    30b0:	80 93 40 02 	sts	0x0240, r24

		/* extract mobile no. of message sender */
		for(int i=0;i<=12;i++)
    30b4:	18 8a       	std	Y+16, r1	; 0x10
    30b6:	1f 86       	std	Y+15, r1	; 0x0f
    30b8:	1c c0       	rjmp	.+56     	; 0x30f2 <GSM_Msg_Display+0x1d6>
		{
			Mobile_no[i] = buff[buffer_pointer];
    30ba:	2f 85       	ldd	r18, Y+15	; 0x0f
    30bc:	38 89       	ldd	r19, Y+16	; 0x10
    30be:	80 91 40 02 	lds	r24, 0x0240
    30c2:	90 91 41 02 	lds	r25, 0x0241
    30c6:	fc 01       	movw	r30, r24
    30c8:	ea 5a       	subi	r30, 0xAA	; 170
    30ca:	fe 4f       	sbci	r31, 0xFE	; 254
    30cc:	80 81       	ld	r24, Z
    30ce:	f9 01       	movw	r30, r18
    30d0:	ea 50       	subi	r30, 0x0A	; 10
    30d2:	fe 4f       	sbci	r31, 0xFE	; 254
    30d4:	80 83       	st	Z, r24
			buffer_pointer++;
    30d6:	80 91 40 02 	lds	r24, 0x0240
    30da:	90 91 41 02 	lds	r25, 0x0241
    30de:	01 96       	adiw	r24, 0x01	; 1
    30e0:	90 93 41 02 	sts	0x0241, r25
    30e4:	80 93 40 02 	sts	0x0240, r24
			buffer_pointer++;
		}
		buffer_pointer = buffer_pointer+2;

		/* extract mobile no. of message sender */
		for(int i=0;i<=12;i++)
    30e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    30ea:	98 89       	ldd	r25, Y+16	; 0x10
    30ec:	01 96       	adiw	r24, 0x01	; 1
    30ee:	98 8b       	std	Y+16, r25	; 0x10
    30f0:	8f 87       	std	Y+15, r24	; 0x0f
    30f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    30f4:	98 89       	ldd	r25, Y+16	; 0x10
    30f6:	8d 30       	cpi	r24, 0x0D	; 13
    30f8:	91 05       	cpc	r25, r1
    30fa:	fc f2       	brlt	.-66     	; 0x30ba <GSM_Msg_Display+0x19e>
			buffer_pointer++;
		}

		do
		{
			buffer_pointer++;
    30fc:	80 91 40 02 	lds	r24, 0x0240
    3100:	90 91 41 02 	lds	r25, 0x0241
    3104:	01 96       	adiw	r24, 0x01	; 1
    3106:	90 93 41 02 	sts	0x0241, r25
    310a:	80 93 40 02 	sts	0x0240, r24
		}while(buff[buffer_pointer-1]!= '\n');
    310e:	80 91 40 02 	lds	r24, 0x0240
    3112:	90 91 41 02 	lds	r25, 0x0241
    3116:	01 97       	sbiw	r24, 0x01	; 1
    3118:	fc 01       	movw	r30, r24
    311a:	ea 5a       	subi	r30, 0xAA	; 170
    311c:	fe 4f       	sbci	r31, 0xFE	; 254
    311e:	80 81       	ld	r24, Z
    3120:	8a 30       	cpi	r24, 0x0A	; 10
    3122:	61 f7       	brne	.-40     	; 0x30fc <GSM_Msg_Display+0x1e0>

		LCD_vidExcuteCommand(0xC0);
    3124:	80 ec       	ldi	r24, 0xC0	; 192
    3126:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_vidExcuteCommand>
		int i=0;
    312a:	1a 8a       	std	Y+18, r1	; 0x12
    312c:	19 8a       	std	Y+17, r1	; 0x11
    312e:	2e c0       	rjmp	.+92     	; 0x318c <GSM_Msg_Display+0x270>

		/* display and save message */
		while(buff[buffer_pointer]!= '\r' && i<31)
		{
				LCD_vidDisplayData(buff[buffer_pointer]);
    3130:	80 91 40 02 	lds	r24, 0x0240
    3134:	90 91 41 02 	lds	r25, 0x0241
    3138:	fc 01       	movw	r30, r24
    313a:	ea 5a       	subi	r30, 0xAA	; 170
    313c:	fe 4f       	sbci	r31, 0xFE	; 254
    313e:	80 81       	ld	r24, Z
    3140:	0e 94 13 0a 	call	0x1426	; 0x1426 <LCD_vidDisplayData>
				message_received[i]=buff[buffer_pointer];
    3144:	29 89       	ldd	r18, Y+17	; 0x11
    3146:	3a 89       	ldd	r19, Y+18	; 0x12
    3148:	80 91 40 02 	lds	r24, 0x0240
    314c:	90 91 41 02 	lds	r25, 0x0241
    3150:	fc 01       	movw	r30, r24
    3152:	ea 5a       	subi	r30, 0xAA	; 170
    3154:	fe 4f       	sbci	r31, 0xFE	; 254
    3156:	80 81       	ld	r24, Z
    3158:	f9 01       	movw	r30, r18
    315a:	ec 5f       	subi	r30, 0xFC	; 252
    315c:	fd 4f       	sbci	r31, 0xFD	; 253
    315e:	80 83       	st	Z, r24

				buffer_pointer++;
    3160:	80 91 40 02 	lds	r24, 0x0240
    3164:	90 91 41 02 	lds	r25, 0x0241
    3168:	01 96       	adiw	r24, 0x01	; 1
    316a:	90 93 41 02 	sts	0x0241, r25
    316e:	80 93 40 02 	sts	0x0240, r24
				i++;
    3172:	89 89       	ldd	r24, Y+17	; 0x11
    3174:	9a 89       	ldd	r25, Y+18	; 0x12
    3176:	01 96       	adiw	r24, 0x01	; 1
    3178:	9a 8b       	std	Y+18, r25	; 0x12
    317a:	89 8b       	std	Y+17, r24	; 0x11
				if(i==16)
    317c:	89 89       	ldd	r24, Y+17	; 0x11
    317e:	9a 89       	ldd	r25, Y+18	; 0x12
    3180:	80 31       	cpi	r24, 0x10	; 16
    3182:	91 05       	cpc	r25, r1
    3184:	19 f4       	brne	.+6      	; 0x318c <GSM_Msg_Display+0x270>
					LCD_vidExcuteCommand(0x80); /* display on 1st line */
    3186:	80 e8       	ldi	r24, 0x80	; 128
    3188:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_vidExcuteCommand>

		LCD_vidExcuteCommand(0xC0);
		int i=0;

		/* display and save message */
		while(buff[buffer_pointer]!= '\r' && i<31)
    318c:	80 91 40 02 	lds	r24, 0x0240
    3190:	90 91 41 02 	lds	r25, 0x0241
    3194:	fc 01       	movw	r30, r24
    3196:	ea 5a       	subi	r30, 0xAA	; 170
    3198:	fe 4f       	sbci	r31, 0xFE	; 254
    319a:	80 81       	ld	r24, Z
    319c:	8d 30       	cpi	r24, 0x0D	; 13
    319e:	29 f0       	breq	.+10     	; 0x31aa <GSM_Msg_Display+0x28e>
    31a0:	89 89       	ldd	r24, Y+17	; 0x11
    31a2:	9a 89       	ldd	r25, Y+18	; 0x12
    31a4:	8f 31       	cpi	r24, 0x1F	; 31
    31a6:	91 05       	cpc	r25, r1
    31a8:	1c f2       	brlt	.-122    	; 0x3130 <GSM_Msg_Display+0x214>
				i++;
				if(i==16)
					LCD_vidExcuteCommand(0x80); /* display on 1st line */
		}

		buffer_pointer = 0;
    31aa:	10 92 41 02 	sts	0x0241, r1
    31ae:	10 92 40 02 	sts	0x0240, r1
		memset(buff,0,strlen(buff));
    31b2:	86 e5       	ldi	r24, 0x56	; 86
    31b4:	91 e0       	ldi	r25, 0x01	; 1
    31b6:	0e 94 94 19 	call	0x3328	; 0x3328 <strlen>
    31ba:	9c 01       	movw	r18, r24
    31bc:	86 e5       	ldi	r24, 0x56	; 86
    31be:	91 e0       	ldi	r25, 0x01	; 1
    31c0:	60 e0       	ldi	r22, 0x00	; 0
    31c2:	70 e0       	ldi	r23, 0x00	; 0
    31c4:	a9 01       	movw	r20, r18
    31c6:	0e 94 8d 19 	call	0x331a	; 0x331a <memset>
	}
	status_flag = 0;
    31ca:	10 92 52 01 	sts	0x0152, r1
}
    31ce:	62 96       	adiw	r28, 0x12	; 18
    31d0:	0f b6       	in	r0, 0x3f	; 63
    31d2:	f8 94       	cli
    31d4:	de bf       	out	0x3e, r29	; 62
    31d6:	0f be       	out	0x3f, r0	; 63
    31d8:	cd bf       	out	0x3d, r28	; 61
    31da:	cf 91       	pop	r28
    31dc:	df 91       	pop	r29
    31de:	08 95       	ret

000031e0 <__udivmodhi4>:
    31e0:	aa 1b       	sub	r26, r26
    31e2:	bb 1b       	sub	r27, r27
    31e4:	51 e1       	ldi	r21, 0x11	; 17
    31e6:	07 c0       	rjmp	.+14     	; 0x31f6 <__udivmodhi4_ep>

000031e8 <__udivmodhi4_loop>:
    31e8:	aa 1f       	adc	r26, r26
    31ea:	bb 1f       	adc	r27, r27
    31ec:	a6 17       	cp	r26, r22
    31ee:	b7 07       	cpc	r27, r23
    31f0:	10 f0       	brcs	.+4      	; 0x31f6 <__udivmodhi4_ep>
    31f2:	a6 1b       	sub	r26, r22
    31f4:	b7 0b       	sbc	r27, r23

000031f6 <__udivmodhi4_ep>:
    31f6:	88 1f       	adc	r24, r24
    31f8:	99 1f       	adc	r25, r25
    31fa:	5a 95       	dec	r21
    31fc:	a9 f7       	brne	.-22     	; 0x31e8 <__udivmodhi4_loop>
    31fe:	80 95       	com	r24
    3200:	90 95       	com	r25
    3202:	bc 01       	movw	r22, r24
    3204:	cd 01       	movw	r24, r26
    3206:	08 95       	ret

00003208 <__udivmodsi4>:
    3208:	a1 e2       	ldi	r26, 0x21	; 33
    320a:	1a 2e       	mov	r1, r26
    320c:	aa 1b       	sub	r26, r26
    320e:	bb 1b       	sub	r27, r27
    3210:	fd 01       	movw	r30, r26
    3212:	0d c0       	rjmp	.+26     	; 0x322e <__udivmodsi4_ep>

00003214 <__udivmodsi4_loop>:
    3214:	aa 1f       	adc	r26, r26
    3216:	bb 1f       	adc	r27, r27
    3218:	ee 1f       	adc	r30, r30
    321a:	ff 1f       	adc	r31, r31
    321c:	a2 17       	cp	r26, r18
    321e:	b3 07       	cpc	r27, r19
    3220:	e4 07       	cpc	r30, r20
    3222:	f5 07       	cpc	r31, r21
    3224:	20 f0       	brcs	.+8      	; 0x322e <__udivmodsi4_ep>
    3226:	a2 1b       	sub	r26, r18
    3228:	b3 0b       	sbc	r27, r19
    322a:	e4 0b       	sbc	r30, r20
    322c:	f5 0b       	sbc	r31, r21

0000322e <__udivmodsi4_ep>:
    322e:	66 1f       	adc	r22, r22
    3230:	77 1f       	adc	r23, r23
    3232:	88 1f       	adc	r24, r24
    3234:	99 1f       	adc	r25, r25
    3236:	1a 94       	dec	r1
    3238:	69 f7       	brne	.-38     	; 0x3214 <__udivmodsi4_loop>
    323a:	60 95       	com	r22
    323c:	70 95       	com	r23
    323e:	80 95       	com	r24
    3240:	90 95       	com	r25
    3242:	9b 01       	movw	r18, r22
    3244:	ac 01       	movw	r20, r24
    3246:	bd 01       	movw	r22, r26
    3248:	cf 01       	movw	r24, r30
    324a:	08 95       	ret

0000324c <__prologue_saves__>:
    324c:	2f 92       	push	r2
    324e:	3f 92       	push	r3
    3250:	4f 92       	push	r4
    3252:	5f 92       	push	r5
    3254:	6f 92       	push	r6
    3256:	7f 92       	push	r7
    3258:	8f 92       	push	r8
    325a:	9f 92       	push	r9
    325c:	af 92       	push	r10
    325e:	bf 92       	push	r11
    3260:	cf 92       	push	r12
    3262:	df 92       	push	r13
    3264:	ef 92       	push	r14
    3266:	ff 92       	push	r15
    3268:	0f 93       	push	r16
    326a:	1f 93       	push	r17
    326c:	cf 93       	push	r28
    326e:	df 93       	push	r29
    3270:	cd b7       	in	r28, 0x3d	; 61
    3272:	de b7       	in	r29, 0x3e	; 62
    3274:	ca 1b       	sub	r28, r26
    3276:	db 0b       	sbc	r29, r27
    3278:	0f b6       	in	r0, 0x3f	; 63
    327a:	f8 94       	cli
    327c:	de bf       	out	0x3e, r29	; 62
    327e:	0f be       	out	0x3f, r0	; 63
    3280:	cd bf       	out	0x3d, r28	; 61
    3282:	09 94       	ijmp

00003284 <__epilogue_restores__>:
    3284:	2a 88       	ldd	r2, Y+18	; 0x12
    3286:	39 88       	ldd	r3, Y+17	; 0x11
    3288:	48 88       	ldd	r4, Y+16	; 0x10
    328a:	5f 84       	ldd	r5, Y+15	; 0x0f
    328c:	6e 84       	ldd	r6, Y+14	; 0x0e
    328e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3290:	8c 84       	ldd	r8, Y+12	; 0x0c
    3292:	9b 84       	ldd	r9, Y+11	; 0x0b
    3294:	aa 84       	ldd	r10, Y+10	; 0x0a
    3296:	b9 84       	ldd	r11, Y+9	; 0x09
    3298:	c8 84       	ldd	r12, Y+8	; 0x08
    329a:	df 80       	ldd	r13, Y+7	; 0x07
    329c:	ee 80       	ldd	r14, Y+6	; 0x06
    329e:	fd 80       	ldd	r15, Y+5	; 0x05
    32a0:	0c 81       	ldd	r16, Y+4	; 0x04
    32a2:	1b 81       	ldd	r17, Y+3	; 0x03
    32a4:	aa 81       	ldd	r26, Y+2	; 0x02
    32a6:	b9 81       	ldd	r27, Y+1	; 0x01
    32a8:	ce 0f       	add	r28, r30
    32aa:	d1 1d       	adc	r29, r1
    32ac:	0f b6       	in	r0, 0x3f	; 63
    32ae:	f8 94       	cli
    32b0:	de bf       	out	0x3e, r29	; 62
    32b2:	0f be       	out	0x3f, r0	; 63
    32b4:	cd bf       	out	0x3d, r28	; 61
    32b6:	ed 01       	movw	r28, r26
    32b8:	08 95       	ret

000032ba <atoi>:
    32ba:	fc 01       	movw	r30, r24
    32bc:	88 27       	eor	r24, r24
    32be:	99 27       	eor	r25, r25
    32c0:	e8 94       	clt
    32c2:	21 91       	ld	r18, Z+
    32c4:	20 32       	cpi	r18, 0x20	; 32
    32c6:	e9 f3       	breq	.-6      	; 0x32c2 <atoi+0x8>
    32c8:	29 30       	cpi	r18, 0x09	; 9
    32ca:	10 f0       	brcs	.+4      	; 0x32d0 <atoi+0x16>
    32cc:	2e 30       	cpi	r18, 0x0E	; 14
    32ce:	c8 f3       	brcs	.-14     	; 0x32c2 <atoi+0x8>
    32d0:	2b 32       	cpi	r18, 0x2B	; 43
    32d2:	41 f0       	breq	.+16     	; 0x32e4 <atoi+0x2a>
    32d4:	2d 32       	cpi	r18, 0x2D	; 45
    32d6:	39 f4       	brne	.+14     	; 0x32e6 <atoi+0x2c>
    32d8:	68 94       	set
    32da:	04 c0       	rjmp	.+8      	; 0x32e4 <atoi+0x2a>
    32dc:	0e 94 c5 19 	call	0x338a	; 0x338a <__mulhi_const_10>
    32e0:	82 0f       	add	r24, r18
    32e2:	91 1d       	adc	r25, r1
    32e4:	21 91       	ld	r18, Z+
    32e6:	20 53       	subi	r18, 0x30	; 48
    32e8:	2a 30       	cpi	r18, 0x0A	; 10
    32ea:	c0 f3       	brcs	.-16     	; 0x32dc <atoi+0x22>
    32ec:	1e f4       	brtc	.+6      	; 0x32f4 <atoi+0x3a>
    32ee:	90 95       	com	r25
    32f0:	81 95       	neg	r24
    32f2:	9f 4f       	sbci	r25, 0xFF	; 255
    32f4:	08 95       	ret

000032f6 <memmove>:
    32f6:	68 17       	cp	r22, r24
    32f8:	79 07       	cpc	r23, r25
    32fa:	68 f4       	brcc	.+26     	; 0x3316 <memmove+0x20>
    32fc:	fb 01       	movw	r30, r22
    32fe:	dc 01       	movw	r26, r24
    3300:	e4 0f       	add	r30, r20
    3302:	f5 1f       	adc	r31, r21
    3304:	a4 0f       	add	r26, r20
    3306:	b5 1f       	adc	r27, r21
    3308:	02 c0       	rjmp	.+4      	; 0x330e <memmove+0x18>
    330a:	02 90       	ld	r0, -Z
    330c:	0e 92       	st	-X, r0
    330e:	41 50       	subi	r20, 0x01	; 1
    3310:	50 40       	sbci	r21, 0x00	; 0
    3312:	d8 f7       	brcc	.-10     	; 0x330a <memmove+0x14>
    3314:	08 95       	ret
    3316:	0c 94 d9 1b 	jmp	0x37b2	; 0x37b2 <memcpy>

0000331a <memset>:
    331a:	dc 01       	movw	r26, r24
    331c:	01 c0       	rjmp	.+2      	; 0x3320 <memset+0x6>
    331e:	6d 93       	st	X+, r22
    3320:	41 50       	subi	r20, 0x01	; 1
    3322:	50 40       	sbci	r21, 0x00	; 0
    3324:	e0 f7       	brcc	.-8      	; 0x331e <memset+0x4>
    3326:	08 95       	ret

00003328 <strlen>:
    3328:	fc 01       	movw	r30, r24
    332a:	01 90       	ld	r0, Z+
    332c:	00 20       	and	r0, r0
    332e:	e9 f7       	brne	.-6      	; 0x332a <strlen+0x2>
    3330:	80 95       	com	r24
    3332:	90 95       	com	r25
    3334:	8e 0f       	add	r24, r30
    3336:	9f 1f       	adc	r25, r31
    3338:	08 95       	ret

0000333a <strncmp>:
    333a:	fb 01       	movw	r30, r22
    333c:	dc 01       	movw	r26, r24
    333e:	41 50       	subi	r20, 0x01	; 1
    3340:	50 40       	sbci	r21, 0x00	; 0
    3342:	30 f0       	brcs	.+12     	; 0x3350 <strncmp+0x16>
    3344:	8d 91       	ld	r24, X+
    3346:	01 90       	ld	r0, Z+
    3348:	80 19       	sub	r24, r0
    334a:	19 f4       	brne	.+6      	; 0x3352 <strncmp+0x18>
    334c:	00 20       	and	r0, r0
    334e:	b9 f7       	brne	.-18     	; 0x333e <strncmp+0x4>
    3350:	88 1b       	sub	r24, r24
    3352:	99 0b       	sbc	r25, r25
    3354:	08 95       	ret

00003356 <strstr>:
    3356:	fb 01       	movw	r30, r22
    3358:	51 91       	ld	r21, Z+
    335a:	55 23       	and	r21, r21
    335c:	a9 f0       	breq	.+42     	; 0x3388 <strstr+0x32>
    335e:	bf 01       	movw	r22, r30
    3360:	dc 01       	movw	r26, r24
    3362:	4d 91       	ld	r20, X+
    3364:	45 17       	cp	r20, r21
    3366:	41 11       	cpse	r20, r1
    3368:	e1 f7       	brne	.-8      	; 0x3362 <strstr+0xc>
    336a:	59 f4       	brne	.+22     	; 0x3382 <strstr+0x2c>
    336c:	cd 01       	movw	r24, r26
    336e:	01 90       	ld	r0, Z+
    3370:	00 20       	and	r0, r0
    3372:	49 f0       	breq	.+18     	; 0x3386 <strstr+0x30>
    3374:	4d 91       	ld	r20, X+
    3376:	40 15       	cp	r20, r0
    3378:	41 11       	cpse	r20, r1
    337a:	c9 f3       	breq	.-14     	; 0x336e <strstr+0x18>
    337c:	fb 01       	movw	r30, r22
    337e:	41 11       	cpse	r20, r1
    3380:	ef cf       	rjmp	.-34     	; 0x3360 <strstr+0xa>
    3382:	81 e0       	ldi	r24, 0x01	; 1
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	01 97       	sbiw	r24, 0x01	; 1
    3388:	08 95       	ret

0000338a <__mulhi_const_10>:
    338a:	7a e0       	ldi	r23, 0x0A	; 10
    338c:	97 9f       	mul	r25, r23
    338e:	90 2d       	mov	r25, r0
    3390:	87 9f       	mul	r24, r23
    3392:	80 2d       	mov	r24, r0
    3394:	91 0d       	add	r25, r1
    3396:	11 24       	eor	r1, r1
    3398:	08 95       	ret

0000339a <sprintf>:
    339a:	ae e0       	ldi	r26, 0x0E	; 14
    339c:	b0 e0       	ldi	r27, 0x00	; 0
    339e:	e3 ed       	ldi	r30, 0xD3	; 211
    33a0:	f9 e1       	ldi	r31, 0x19	; 25
    33a2:	0c 94 34 19 	jmp	0x3268	; 0x3268 <__prologue_saves__+0x1c>
    33a6:	0d 89       	ldd	r16, Y+21	; 0x15
    33a8:	1e 89       	ldd	r17, Y+22	; 0x16
    33aa:	86 e0       	ldi	r24, 0x06	; 6
    33ac:	8c 83       	std	Y+4, r24	; 0x04
    33ae:	1a 83       	std	Y+2, r17	; 0x02
    33b0:	09 83       	std	Y+1, r16	; 0x01
    33b2:	8f ef       	ldi	r24, 0xFF	; 255
    33b4:	9f e7       	ldi	r25, 0x7F	; 127
    33b6:	9e 83       	std	Y+6, r25	; 0x06
    33b8:	8d 83       	std	Y+5, r24	; 0x05
    33ba:	9e 01       	movw	r18, r28
    33bc:	27 5e       	subi	r18, 0xE7	; 231
    33be:	3f 4f       	sbci	r19, 0xFF	; 255
    33c0:	ce 01       	movw	r24, r28
    33c2:	01 96       	adiw	r24, 0x01	; 1
    33c4:	6f 89       	ldd	r22, Y+23	; 0x17
    33c6:	78 8d       	ldd	r23, Y+24	; 0x18
    33c8:	a9 01       	movw	r20, r18
    33ca:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <vfprintf>
    33ce:	2f 81       	ldd	r18, Y+7	; 0x07
    33d0:	38 85       	ldd	r19, Y+8	; 0x08
    33d2:	02 0f       	add	r16, r18
    33d4:	13 1f       	adc	r17, r19
    33d6:	f8 01       	movw	r30, r16
    33d8:	10 82       	st	Z, r1
    33da:	2e 96       	adiw	r28, 0x0e	; 14
    33dc:	e4 e0       	ldi	r30, 0x04	; 4
    33de:	0c 94 50 19 	jmp	0x32a0	; 0x32a0 <__epilogue_restores__+0x1c>

000033e2 <vfprintf>:
    33e2:	ab e0       	ldi	r26, 0x0B	; 11
    33e4:	b0 e0       	ldi	r27, 0x00	; 0
    33e6:	e7 ef       	ldi	r30, 0xF7	; 247
    33e8:	f9 e1       	ldi	r31, 0x19	; 25
    33ea:	0c 94 26 19 	jmp	0x324c	; 0x324c <__prologue_saves__>
    33ee:	3c 01       	movw	r6, r24
    33f0:	2b 01       	movw	r4, r22
    33f2:	5a 01       	movw	r10, r20
    33f4:	fc 01       	movw	r30, r24
    33f6:	17 82       	std	Z+7, r1	; 0x07
    33f8:	16 82       	std	Z+6, r1	; 0x06
    33fa:	83 81       	ldd	r24, Z+3	; 0x03
    33fc:	81 fd       	sbrc	r24, 1
    33fe:	03 c0       	rjmp	.+6      	; 0x3406 <vfprintf+0x24>
    3400:	6f ef       	ldi	r22, 0xFF	; 255
    3402:	7f ef       	ldi	r23, 0xFF	; 255
    3404:	c6 c1       	rjmp	.+908    	; 0x3792 <vfprintf+0x3b0>
    3406:	9a e0       	ldi	r25, 0x0A	; 10
    3408:	89 2e       	mov	r8, r25
    340a:	1e 01       	movw	r2, r28
    340c:	08 94       	sec
    340e:	21 1c       	adc	r2, r1
    3410:	31 1c       	adc	r3, r1
    3412:	f3 01       	movw	r30, r6
    3414:	23 81       	ldd	r18, Z+3	; 0x03
    3416:	f2 01       	movw	r30, r4
    3418:	23 fd       	sbrc	r18, 3
    341a:	85 91       	lpm	r24, Z+
    341c:	23 ff       	sbrs	r18, 3
    341e:	81 91       	ld	r24, Z+
    3420:	2f 01       	movw	r4, r30
    3422:	88 23       	and	r24, r24
    3424:	09 f4       	brne	.+2      	; 0x3428 <vfprintf+0x46>
    3426:	b2 c1       	rjmp	.+868    	; 0x378c <vfprintf+0x3aa>
    3428:	85 32       	cpi	r24, 0x25	; 37
    342a:	39 f4       	brne	.+14     	; 0x343a <vfprintf+0x58>
    342c:	23 fd       	sbrc	r18, 3
    342e:	85 91       	lpm	r24, Z+
    3430:	23 ff       	sbrs	r18, 3
    3432:	81 91       	ld	r24, Z+
    3434:	2f 01       	movw	r4, r30
    3436:	85 32       	cpi	r24, 0x25	; 37
    3438:	29 f4       	brne	.+10     	; 0x3444 <vfprintf+0x62>
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	b3 01       	movw	r22, r6
    343e:	0e 94 ed 1b 	call	0x37da	; 0x37da <fputc>
    3442:	e7 cf       	rjmp	.-50     	; 0x3412 <vfprintf+0x30>
    3444:	98 2f       	mov	r25, r24
    3446:	ff 24       	eor	r15, r15
    3448:	ee 24       	eor	r14, r14
    344a:	99 24       	eor	r9, r9
    344c:	ff e1       	ldi	r31, 0x1F	; 31
    344e:	ff 15       	cp	r31, r15
    3450:	d0 f0       	brcs	.+52     	; 0x3486 <vfprintf+0xa4>
    3452:	9b 32       	cpi	r25, 0x2B	; 43
    3454:	69 f0       	breq	.+26     	; 0x3470 <vfprintf+0x8e>
    3456:	9c 32       	cpi	r25, 0x2C	; 44
    3458:	28 f4       	brcc	.+10     	; 0x3464 <vfprintf+0x82>
    345a:	90 32       	cpi	r25, 0x20	; 32
    345c:	59 f0       	breq	.+22     	; 0x3474 <vfprintf+0x92>
    345e:	93 32       	cpi	r25, 0x23	; 35
    3460:	91 f4       	brne	.+36     	; 0x3486 <vfprintf+0xa4>
    3462:	0e c0       	rjmp	.+28     	; 0x3480 <vfprintf+0x9e>
    3464:	9d 32       	cpi	r25, 0x2D	; 45
    3466:	49 f0       	breq	.+18     	; 0x347a <vfprintf+0x98>
    3468:	90 33       	cpi	r25, 0x30	; 48
    346a:	69 f4       	brne	.+26     	; 0x3486 <vfprintf+0xa4>
    346c:	41 e0       	ldi	r20, 0x01	; 1
    346e:	24 c0       	rjmp	.+72     	; 0x34b8 <vfprintf+0xd6>
    3470:	52 e0       	ldi	r21, 0x02	; 2
    3472:	f5 2a       	or	r15, r21
    3474:	84 e0       	ldi	r24, 0x04	; 4
    3476:	f8 2a       	or	r15, r24
    3478:	28 c0       	rjmp	.+80     	; 0x34ca <vfprintf+0xe8>
    347a:	98 e0       	ldi	r25, 0x08	; 8
    347c:	f9 2a       	or	r15, r25
    347e:	25 c0       	rjmp	.+74     	; 0x34ca <vfprintf+0xe8>
    3480:	e0 e1       	ldi	r30, 0x10	; 16
    3482:	fe 2a       	or	r15, r30
    3484:	22 c0       	rjmp	.+68     	; 0x34ca <vfprintf+0xe8>
    3486:	f7 fc       	sbrc	r15, 7
    3488:	29 c0       	rjmp	.+82     	; 0x34dc <vfprintf+0xfa>
    348a:	89 2f       	mov	r24, r25
    348c:	80 53       	subi	r24, 0x30	; 48
    348e:	8a 30       	cpi	r24, 0x0A	; 10
    3490:	70 f4       	brcc	.+28     	; 0x34ae <vfprintf+0xcc>
    3492:	f6 fe       	sbrs	r15, 6
    3494:	05 c0       	rjmp	.+10     	; 0x34a0 <vfprintf+0xbe>
    3496:	98 9c       	mul	r9, r8
    3498:	90 2c       	mov	r9, r0
    349a:	11 24       	eor	r1, r1
    349c:	98 0e       	add	r9, r24
    349e:	15 c0       	rjmp	.+42     	; 0x34ca <vfprintf+0xe8>
    34a0:	e8 9c       	mul	r14, r8
    34a2:	e0 2c       	mov	r14, r0
    34a4:	11 24       	eor	r1, r1
    34a6:	e8 0e       	add	r14, r24
    34a8:	f0 e2       	ldi	r31, 0x20	; 32
    34aa:	ff 2a       	or	r15, r31
    34ac:	0e c0       	rjmp	.+28     	; 0x34ca <vfprintf+0xe8>
    34ae:	9e 32       	cpi	r25, 0x2E	; 46
    34b0:	29 f4       	brne	.+10     	; 0x34bc <vfprintf+0xda>
    34b2:	f6 fc       	sbrc	r15, 6
    34b4:	6b c1       	rjmp	.+726    	; 0x378c <vfprintf+0x3aa>
    34b6:	40 e4       	ldi	r20, 0x40	; 64
    34b8:	f4 2a       	or	r15, r20
    34ba:	07 c0       	rjmp	.+14     	; 0x34ca <vfprintf+0xe8>
    34bc:	9c 36       	cpi	r25, 0x6C	; 108
    34be:	19 f4       	brne	.+6      	; 0x34c6 <vfprintf+0xe4>
    34c0:	50 e8       	ldi	r21, 0x80	; 128
    34c2:	f5 2a       	or	r15, r21
    34c4:	02 c0       	rjmp	.+4      	; 0x34ca <vfprintf+0xe8>
    34c6:	98 36       	cpi	r25, 0x68	; 104
    34c8:	49 f4       	brne	.+18     	; 0x34dc <vfprintf+0xfa>
    34ca:	f2 01       	movw	r30, r4
    34cc:	23 fd       	sbrc	r18, 3
    34ce:	95 91       	lpm	r25, Z+
    34d0:	23 ff       	sbrs	r18, 3
    34d2:	91 91       	ld	r25, Z+
    34d4:	2f 01       	movw	r4, r30
    34d6:	99 23       	and	r25, r25
    34d8:	09 f0       	breq	.+2      	; 0x34dc <vfprintf+0xfa>
    34da:	b8 cf       	rjmp	.-144    	; 0x344c <vfprintf+0x6a>
    34dc:	89 2f       	mov	r24, r25
    34de:	85 54       	subi	r24, 0x45	; 69
    34e0:	83 30       	cpi	r24, 0x03	; 3
    34e2:	18 f0       	brcs	.+6      	; 0x34ea <vfprintf+0x108>
    34e4:	80 52       	subi	r24, 0x20	; 32
    34e6:	83 30       	cpi	r24, 0x03	; 3
    34e8:	38 f4       	brcc	.+14     	; 0x34f8 <vfprintf+0x116>
    34ea:	44 e0       	ldi	r20, 0x04	; 4
    34ec:	50 e0       	ldi	r21, 0x00	; 0
    34ee:	a4 0e       	add	r10, r20
    34f0:	b5 1e       	adc	r11, r21
    34f2:	5f e3       	ldi	r21, 0x3F	; 63
    34f4:	59 83       	std	Y+1, r21	; 0x01
    34f6:	0f c0       	rjmp	.+30     	; 0x3516 <vfprintf+0x134>
    34f8:	93 36       	cpi	r25, 0x63	; 99
    34fa:	31 f0       	breq	.+12     	; 0x3508 <vfprintf+0x126>
    34fc:	93 37       	cpi	r25, 0x73	; 115
    34fe:	79 f0       	breq	.+30     	; 0x351e <vfprintf+0x13c>
    3500:	93 35       	cpi	r25, 0x53	; 83
    3502:	09 f0       	breq	.+2      	; 0x3506 <vfprintf+0x124>
    3504:	56 c0       	rjmp	.+172    	; 0x35b2 <vfprintf+0x1d0>
    3506:	20 c0       	rjmp	.+64     	; 0x3548 <vfprintf+0x166>
    3508:	f5 01       	movw	r30, r10
    350a:	80 81       	ld	r24, Z
    350c:	89 83       	std	Y+1, r24	; 0x01
    350e:	42 e0       	ldi	r20, 0x02	; 2
    3510:	50 e0       	ldi	r21, 0x00	; 0
    3512:	a4 0e       	add	r10, r20
    3514:	b5 1e       	adc	r11, r21
    3516:	61 01       	movw	r12, r2
    3518:	01 e0       	ldi	r16, 0x01	; 1
    351a:	10 e0       	ldi	r17, 0x00	; 0
    351c:	12 c0       	rjmp	.+36     	; 0x3542 <vfprintf+0x160>
    351e:	f5 01       	movw	r30, r10
    3520:	c0 80       	ld	r12, Z
    3522:	d1 80       	ldd	r13, Z+1	; 0x01
    3524:	f6 fc       	sbrc	r15, 6
    3526:	03 c0       	rjmp	.+6      	; 0x352e <vfprintf+0x14c>
    3528:	6f ef       	ldi	r22, 0xFF	; 255
    352a:	7f ef       	ldi	r23, 0xFF	; 255
    352c:	02 c0       	rjmp	.+4      	; 0x3532 <vfprintf+0x150>
    352e:	69 2d       	mov	r22, r9
    3530:	70 e0       	ldi	r23, 0x00	; 0
    3532:	42 e0       	ldi	r20, 0x02	; 2
    3534:	50 e0       	ldi	r21, 0x00	; 0
    3536:	a4 0e       	add	r10, r20
    3538:	b5 1e       	adc	r11, r21
    353a:	c6 01       	movw	r24, r12
    353c:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <strnlen>
    3540:	8c 01       	movw	r16, r24
    3542:	5f e7       	ldi	r21, 0x7F	; 127
    3544:	f5 22       	and	r15, r21
    3546:	14 c0       	rjmp	.+40     	; 0x3570 <vfprintf+0x18e>
    3548:	f5 01       	movw	r30, r10
    354a:	c0 80       	ld	r12, Z
    354c:	d1 80       	ldd	r13, Z+1	; 0x01
    354e:	f6 fc       	sbrc	r15, 6
    3550:	03 c0       	rjmp	.+6      	; 0x3558 <vfprintf+0x176>
    3552:	6f ef       	ldi	r22, 0xFF	; 255
    3554:	7f ef       	ldi	r23, 0xFF	; 255
    3556:	02 c0       	rjmp	.+4      	; 0x355c <vfprintf+0x17a>
    3558:	69 2d       	mov	r22, r9
    355a:	70 e0       	ldi	r23, 0x00	; 0
    355c:	42 e0       	ldi	r20, 0x02	; 2
    355e:	50 e0       	ldi	r21, 0x00	; 0
    3560:	a4 0e       	add	r10, r20
    3562:	b5 1e       	adc	r11, r21
    3564:	c6 01       	movw	r24, r12
    3566:	0e 94 ce 1b 	call	0x379c	; 0x379c <strnlen_P>
    356a:	8c 01       	movw	r16, r24
    356c:	50 e8       	ldi	r21, 0x80	; 128
    356e:	f5 2a       	or	r15, r21
    3570:	f3 fe       	sbrs	r15, 3
    3572:	07 c0       	rjmp	.+14     	; 0x3582 <vfprintf+0x1a0>
    3574:	1a c0       	rjmp	.+52     	; 0x35aa <vfprintf+0x1c8>
    3576:	80 e2       	ldi	r24, 0x20	; 32
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	b3 01       	movw	r22, r6
    357c:	0e 94 ed 1b 	call	0x37da	; 0x37da <fputc>
    3580:	ea 94       	dec	r14
    3582:	8e 2d       	mov	r24, r14
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	08 17       	cp	r16, r24
    3588:	19 07       	cpc	r17, r25
    358a:	a8 f3       	brcs	.-22     	; 0x3576 <vfprintf+0x194>
    358c:	0e c0       	rjmp	.+28     	; 0x35aa <vfprintf+0x1c8>
    358e:	f6 01       	movw	r30, r12
    3590:	f7 fc       	sbrc	r15, 7
    3592:	85 91       	lpm	r24, Z+
    3594:	f7 fe       	sbrs	r15, 7
    3596:	81 91       	ld	r24, Z+
    3598:	6f 01       	movw	r12, r30
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	b3 01       	movw	r22, r6
    359e:	0e 94 ed 1b 	call	0x37da	; 0x37da <fputc>
    35a2:	e1 10       	cpse	r14, r1
    35a4:	ea 94       	dec	r14
    35a6:	01 50       	subi	r16, 0x01	; 1
    35a8:	10 40       	sbci	r17, 0x00	; 0
    35aa:	01 15       	cp	r16, r1
    35ac:	11 05       	cpc	r17, r1
    35ae:	79 f7       	brne	.-34     	; 0x358e <vfprintf+0x1ac>
    35b0:	ea c0       	rjmp	.+468    	; 0x3786 <vfprintf+0x3a4>
    35b2:	94 36       	cpi	r25, 0x64	; 100
    35b4:	11 f0       	breq	.+4      	; 0x35ba <vfprintf+0x1d8>
    35b6:	99 36       	cpi	r25, 0x69	; 105
    35b8:	69 f5       	brne	.+90     	; 0x3614 <vfprintf+0x232>
    35ba:	f7 fe       	sbrs	r15, 7
    35bc:	08 c0       	rjmp	.+16     	; 0x35ce <vfprintf+0x1ec>
    35be:	f5 01       	movw	r30, r10
    35c0:	20 81       	ld	r18, Z
    35c2:	31 81       	ldd	r19, Z+1	; 0x01
    35c4:	42 81       	ldd	r20, Z+2	; 0x02
    35c6:	53 81       	ldd	r21, Z+3	; 0x03
    35c8:	84 e0       	ldi	r24, 0x04	; 4
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	0a c0       	rjmp	.+20     	; 0x35e2 <vfprintf+0x200>
    35ce:	f5 01       	movw	r30, r10
    35d0:	80 81       	ld	r24, Z
    35d2:	91 81       	ldd	r25, Z+1	; 0x01
    35d4:	9c 01       	movw	r18, r24
    35d6:	44 27       	eor	r20, r20
    35d8:	37 fd       	sbrc	r19, 7
    35da:	40 95       	com	r20
    35dc:	54 2f       	mov	r21, r20
    35de:	82 e0       	ldi	r24, 0x02	; 2
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	a8 0e       	add	r10, r24
    35e4:	b9 1e       	adc	r11, r25
    35e6:	9f e6       	ldi	r25, 0x6F	; 111
    35e8:	f9 22       	and	r15, r25
    35ea:	57 ff       	sbrs	r21, 7
    35ec:	09 c0       	rjmp	.+18     	; 0x3600 <vfprintf+0x21e>
    35ee:	50 95       	com	r21
    35f0:	40 95       	com	r20
    35f2:	30 95       	com	r19
    35f4:	21 95       	neg	r18
    35f6:	3f 4f       	sbci	r19, 0xFF	; 255
    35f8:	4f 4f       	sbci	r20, 0xFF	; 255
    35fa:	5f 4f       	sbci	r21, 0xFF	; 255
    35fc:	e0 e8       	ldi	r30, 0x80	; 128
    35fe:	fe 2a       	or	r15, r30
    3600:	ca 01       	movw	r24, r20
    3602:	b9 01       	movw	r22, r18
    3604:	a1 01       	movw	r20, r2
    3606:	2a e0       	ldi	r18, 0x0A	; 10
    3608:	30 e0       	ldi	r19, 0x00	; 0
    360a:	0e 94 19 1c 	call	0x3832	; 0x3832 <__ultoa_invert>
    360e:	d8 2e       	mov	r13, r24
    3610:	d2 18       	sub	r13, r2
    3612:	40 c0       	rjmp	.+128    	; 0x3694 <vfprintf+0x2b2>
    3614:	95 37       	cpi	r25, 0x75	; 117
    3616:	29 f4       	brne	.+10     	; 0x3622 <vfprintf+0x240>
    3618:	1f 2d       	mov	r17, r15
    361a:	1f 7e       	andi	r17, 0xEF	; 239
    361c:	2a e0       	ldi	r18, 0x0A	; 10
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	1d c0       	rjmp	.+58     	; 0x365c <vfprintf+0x27a>
    3622:	1f 2d       	mov	r17, r15
    3624:	19 7f       	andi	r17, 0xF9	; 249
    3626:	9f 36       	cpi	r25, 0x6F	; 111
    3628:	61 f0       	breq	.+24     	; 0x3642 <vfprintf+0x260>
    362a:	90 37       	cpi	r25, 0x70	; 112
    362c:	20 f4       	brcc	.+8      	; 0x3636 <vfprintf+0x254>
    362e:	98 35       	cpi	r25, 0x58	; 88
    3630:	09 f0       	breq	.+2      	; 0x3634 <vfprintf+0x252>
    3632:	ac c0       	rjmp	.+344    	; 0x378c <vfprintf+0x3aa>
    3634:	0f c0       	rjmp	.+30     	; 0x3654 <vfprintf+0x272>
    3636:	90 37       	cpi	r25, 0x70	; 112
    3638:	39 f0       	breq	.+14     	; 0x3648 <vfprintf+0x266>
    363a:	98 37       	cpi	r25, 0x78	; 120
    363c:	09 f0       	breq	.+2      	; 0x3640 <vfprintf+0x25e>
    363e:	a6 c0       	rjmp	.+332    	; 0x378c <vfprintf+0x3aa>
    3640:	04 c0       	rjmp	.+8      	; 0x364a <vfprintf+0x268>
    3642:	28 e0       	ldi	r18, 0x08	; 8
    3644:	30 e0       	ldi	r19, 0x00	; 0
    3646:	0a c0       	rjmp	.+20     	; 0x365c <vfprintf+0x27a>
    3648:	10 61       	ori	r17, 0x10	; 16
    364a:	14 fd       	sbrc	r17, 4
    364c:	14 60       	ori	r17, 0x04	; 4
    364e:	20 e1       	ldi	r18, 0x10	; 16
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	04 c0       	rjmp	.+8      	; 0x365c <vfprintf+0x27a>
    3654:	14 fd       	sbrc	r17, 4
    3656:	16 60       	ori	r17, 0x06	; 6
    3658:	20 e1       	ldi	r18, 0x10	; 16
    365a:	32 e0       	ldi	r19, 0x02	; 2
    365c:	17 ff       	sbrs	r17, 7
    365e:	08 c0       	rjmp	.+16     	; 0x3670 <vfprintf+0x28e>
    3660:	f5 01       	movw	r30, r10
    3662:	60 81       	ld	r22, Z
    3664:	71 81       	ldd	r23, Z+1	; 0x01
    3666:	82 81       	ldd	r24, Z+2	; 0x02
    3668:	93 81       	ldd	r25, Z+3	; 0x03
    366a:	44 e0       	ldi	r20, 0x04	; 4
    366c:	50 e0       	ldi	r21, 0x00	; 0
    366e:	08 c0       	rjmp	.+16     	; 0x3680 <vfprintf+0x29e>
    3670:	f5 01       	movw	r30, r10
    3672:	80 81       	ld	r24, Z
    3674:	91 81       	ldd	r25, Z+1	; 0x01
    3676:	bc 01       	movw	r22, r24
    3678:	80 e0       	ldi	r24, 0x00	; 0
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	42 e0       	ldi	r20, 0x02	; 2
    367e:	50 e0       	ldi	r21, 0x00	; 0
    3680:	a4 0e       	add	r10, r20
    3682:	b5 1e       	adc	r11, r21
    3684:	a1 01       	movw	r20, r2
    3686:	0e 94 19 1c 	call	0x3832	; 0x3832 <__ultoa_invert>
    368a:	d8 2e       	mov	r13, r24
    368c:	d2 18       	sub	r13, r2
    368e:	8f e7       	ldi	r24, 0x7F	; 127
    3690:	f8 2e       	mov	r15, r24
    3692:	f1 22       	and	r15, r17
    3694:	f6 fe       	sbrs	r15, 6
    3696:	0b c0       	rjmp	.+22     	; 0x36ae <vfprintf+0x2cc>
    3698:	5e ef       	ldi	r21, 0xFE	; 254
    369a:	f5 22       	and	r15, r21
    369c:	d9 14       	cp	r13, r9
    369e:	38 f4       	brcc	.+14     	; 0x36ae <vfprintf+0x2cc>
    36a0:	f4 fe       	sbrs	r15, 4
    36a2:	07 c0       	rjmp	.+14     	; 0x36b2 <vfprintf+0x2d0>
    36a4:	f2 fc       	sbrc	r15, 2
    36a6:	05 c0       	rjmp	.+10     	; 0x36b2 <vfprintf+0x2d0>
    36a8:	8f ee       	ldi	r24, 0xEF	; 239
    36aa:	f8 22       	and	r15, r24
    36ac:	02 c0       	rjmp	.+4      	; 0x36b2 <vfprintf+0x2d0>
    36ae:	1d 2d       	mov	r17, r13
    36b0:	01 c0       	rjmp	.+2      	; 0x36b4 <vfprintf+0x2d2>
    36b2:	19 2d       	mov	r17, r9
    36b4:	f4 fe       	sbrs	r15, 4
    36b6:	0d c0       	rjmp	.+26     	; 0x36d2 <vfprintf+0x2f0>
    36b8:	fe 01       	movw	r30, r28
    36ba:	ed 0d       	add	r30, r13
    36bc:	f1 1d       	adc	r31, r1
    36be:	80 81       	ld	r24, Z
    36c0:	80 33       	cpi	r24, 0x30	; 48
    36c2:	19 f4       	brne	.+6      	; 0x36ca <vfprintf+0x2e8>
    36c4:	99 ee       	ldi	r25, 0xE9	; 233
    36c6:	f9 22       	and	r15, r25
    36c8:	08 c0       	rjmp	.+16     	; 0x36da <vfprintf+0x2f8>
    36ca:	1f 5f       	subi	r17, 0xFF	; 255
    36cc:	f2 fe       	sbrs	r15, 2
    36ce:	05 c0       	rjmp	.+10     	; 0x36da <vfprintf+0x2f8>
    36d0:	03 c0       	rjmp	.+6      	; 0x36d8 <vfprintf+0x2f6>
    36d2:	8f 2d       	mov	r24, r15
    36d4:	86 78       	andi	r24, 0x86	; 134
    36d6:	09 f0       	breq	.+2      	; 0x36da <vfprintf+0x2f8>
    36d8:	1f 5f       	subi	r17, 0xFF	; 255
    36da:	0f 2d       	mov	r16, r15
    36dc:	f3 fc       	sbrc	r15, 3
    36de:	14 c0       	rjmp	.+40     	; 0x3708 <vfprintf+0x326>
    36e0:	f0 fe       	sbrs	r15, 0
    36e2:	0f c0       	rjmp	.+30     	; 0x3702 <vfprintf+0x320>
    36e4:	1e 15       	cp	r17, r14
    36e6:	10 f0       	brcs	.+4      	; 0x36ec <vfprintf+0x30a>
    36e8:	9d 2c       	mov	r9, r13
    36ea:	0b c0       	rjmp	.+22     	; 0x3702 <vfprintf+0x320>
    36ec:	9d 2c       	mov	r9, r13
    36ee:	9e 0c       	add	r9, r14
    36f0:	91 1a       	sub	r9, r17
    36f2:	1e 2d       	mov	r17, r14
    36f4:	06 c0       	rjmp	.+12     	; 0x3702 <vfprintf+0x320>
    36f6:	80 e2       	ldi	r24, 0x20	; 32
    36f8:	90 e0       	ldi	r25, 0x00	; 0
    36fa:	b3 01       	movw	r22, r6
    36fc:	0e 94 ed 1b 	call	0x37da	; 0x37da <fputc>
    3700:	1f 5f       	subi	r17, 0xFF	; 255
    3702:	1e 15       	cp	r17, r14
    3704:	c0 f3       	brcs	.-16     	; 0x36f6 <vfprintf+0x314>
    3706:	04 c0       	rjmp	.+8      	; 0x3710 <vfprintf+0x32e>
    3708:	1e 15       	cp	r17, r14
    370a:	10 f4       	brcc	.+4      	; 0x3710 <vfprintf+0x32e>
    370c:	e1 1a       	sub	r14, r17
    370e:	01 c0       	rjmp	.+2      	; 0x3712 <vfprintf+0x330>
    3710:	ee 24       	eor	r14, r14
    3712:	04 ff       	sbrs	r16, 4
    3714:	0f c0       	rjmp	.+30     	; 0x3734 <vfprintf+0x352>
    3716:	80 e3       	ldi	r24, 0x30	; 48
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	b3 01       	movw	r22, r6
    371c:	0e 94 ed 1b 	call	0x37da	; 0x37da <fputc>
    3720:	02 ff       	sbrs	r16, 2
    3722:	1d c0       	rjmp	.+58     	; 0x375e <vfprintf+0x37c>
    3724:	01 fd       	sbrc	r16, 1
    3726:	03 c0       	rjmp	.+6      	; 0x372e <vfprintf+0x34c>
    3728:	88 e7       	ldi	r24, 0x78	; 120
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	0e c0       	rjmp	.+28     	; 0x374a <vfprintf+0x368>
    372e:	88 e5       	ldi	r24, 0x58	; 88
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	0b c0       	rjmp	.+22     	; 0x374a <vfprintf+0x368>
    3734:	80 2f       	mov	r24, r16
    3736:	86 78       	andi	r24, 0x86	; 134
    3738:	91 f0       	breq	.+36     	; 0x375e <vfprintf+0x37c>
    373a:	01 ff       	sbrs	r16, 1
    373c:	02 c0       	rjmp	.+4      	; 0x3742 <vfprintf+0x360>
    373e:	8b e2       	ldi	r24, 0x2B	; 43
    3740:	01 c0       	rjmp	.+2      	; 0x3744 <vfprintf+0x362>
    3742:	80 e2       	ldi	r24, 0x20	; 32
    3744:	f7 fc       	sbrc	r15, 7
    3746:	8d e2       	ldi	r24, 0x2D	; 45
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	b3 01       	movw	r22, r6
    374c:	0e 94 ed 1b 	call	0x37da	; 0x37da <fputc>
    3750:	06 c0       	rjmp	.+12     	; 0x375e <vfprintf+0x37c>
    3752:	80 e3       	ldi	r24, 0x30	; 48
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	b3 01       	movw	r22, r6
    3758:	0e 94 ed 1b 	call	0x37da	; 0x37da <fputc>
    375c:	9a 94       	dec	r9
    375e:	d9 14       	cp	r13, r9
    3760:	c0 f3       	brcs	.-16     	; 0x3752 <vfprintf+0x370>
    3762:	da 94       	dec	r13
    3764:	f1 01       	movw	r30, r2
    3766:	ed 0d       	add	r30, r13
    3768:	f1 1d       	adc	r31, r1
    376a:	80 81       	ld	r24, Z
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	b3 01       	movw	r22, r6
    3770:	0e 94 ed 1b 	call	0x37da	; 0x37da <fputc>
    3774:	dd 20       	and	r13, r13
    3776:	a9 f7       	brne	.-22     	; 0x3762 <vfprintf+0x380>
    3778:	06 c0       	rjmp	.+12     	; 0x3786 <vfprintf+0x3a4>
    377a:	80 e2       	ldi	r24, 0x20	; 32
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	b3 01       	movw	r22, r6
    3780:	0e 94 ed 1b 	call	0x37da	; 0x37da <fputc>
    3784:	ea 94       	dec	r14
    3786:	ee 20       	and	r14, r14
    3788:	c1 f7       	brne	.-16     	; 0x377a <vfprintf+0x398>
    378a:	43 ce       	rjmp	.-890    	; 0x3412 <vfprintf+0x30>
    378c:	f3 01       	movw	r30, r6
    378e:	66 81       	ldd	r22, Z+6	; 0x06
    3790:	77 81       	ldd	r23, Z+7	; 0x07
    3792:	cb 01       	movw	r24, r22
    3794:	2b 96       	adiw	r28, 0x0b	; 11
    3796:	e2 e1       	ldi	r30, 0x12	; 18
    3798:	0c 94 42 19 	jmp	0x3284	; 0x3284 <__epilogue_restores__>

0000379c <strnlen_P>:
    379c:	fc 01       	movw	r30, r24
    379e:	05 90       	lpm	r0, Z+
    37a0:	61 50       	subi	r22, 0x01	; 1
    37a2:	70 40       	sbci	r23, 0x00	; 0
    37a4:	01 10       	cpse	r0, r1
    37a6:	d8 f7       	brcc	.-10     	; 0x379e <strnlen_P+0x2>
    37a8:	80 95       	com	r24
    37aa:	90 95       	com	r25
    37ac:	8e 0f       	add	r24, r30
    37ae:	9f 1f       	adc	r25, r31
    37b0:	08 95       	ret

000037b2 <memcpy>:
    37b2:	fb 01       	movw	r30, r22
    37b4:	dc 01       	movw	r26, r24
    37b6:	02 c0       	rjmp	.+4      	; 0x37bc <memcpy+0xa>
    37b8:	01 90       	ld	r0, Z+
    37ba:	0d 92       	st	X+, r0
    37bc:	41 50       	subi	r20, 0x01	; 1
    37be:	50 40       	sbci	r21, 0x00	; 0
    37c0:	d8 f7       	brcc	.-10     	; 0x37b8 <memcpy+0x6>
    37c2:	08 95       	ret

000037c4 <strnlen>:
    37c4:	fc 01       	movw	r30, r24
    37c6:	61 50       	subi	r22, 0x01	; 1
    37c8:	70 40       	sbci	r23, 0x00	; 0
    37ca:	01 90       	ld	r0, Z+
    37cc:	01 10       	cpse	r0, r1
    37ce:	d8 f7       	brcc	.-10     	; 0x37c6 <strnlen+0x2>
    37d0:	80 95       	com	r24
    37d2:	90 95       	com	r25
    37d4:	8e 0f       	add	r24, r30
    37d6:	9f 1f       	adc	r25, r31
    37d8:	08 95       	ret

000037da <fputc>:
    37da:	0f 93       	push	r16
    37dc:	1f 93       	push	r17
    37de:	cf 93       	push	r28
    37e0:	df 93       	push	r29
    37e2:	8c 01       	movw	r16, r24
    37e4:	eb 01       	movw	r28, r22
    37e6:	8b 81       	ldd	r24, Y+3	; 0x03
    37e8:	81 ff       	sbrs	r24, 1
    37ea:	1b c0       	rjmp	.+54     	; 0x3822 <fputc+0x48>
    37ec:	82 ff       	sbrs	r24, 2
    37ee:	0d c0       	rjmp	.+26     	; 0x380a <fputc+0x30>
    37f0:	2e 81       	ldd	r18, Y+6	; 0x06
    37f2:	3f 81       	ldd	r19, Y+7	; 0x07
    37f4:	8c 81       	ldd	r24, Y+4	; 0x04
    37f6:	9d 81       	ldd	r25, Y+5	; 0x05
    37f8:	28 17       	cp	r18, r24
    37fa:	39 07       	cpc	r19, r25
    37fc:	64 f4       	brge	.+24     	; 0x3816 <fputc+0x3c>
    37fe:	e8 81       	ld	r30, Y
    3800:	f9 81       	ldd	r31, Y+1	; 0x01
    3802:	01 93       	st	Z+, r16
    3804:	f9 83       	std	Y+1, r31	; 0x01
    3806:	e8 83       	st	Y, r30
    3808:	06 c0       	rjmp	.+12     	; 0x3816 <fputc+0x3c>
    380a:	e8 85       	ldd	r30, Y+8	; 0x08
    380c:	f9 85       	ldd	r31, Y+9	; 0x09
    380e:	80 2f       	mov	r24, r16
    3810:	09 95       	icall
    3812:	89 2b       	or	r24, r25
    3814:	31 f4       	brne	.+12     	; 0x3822 <fputc+0x48>
    3816:	8e 81       	ldd	r24, Y+6	; 0x06
    3818:	9f 81       	ldd	r25, Y+7	; 0x07
    381a:	01 96       	adiw	r24, 0x01	; 1
    381c:	9f 83       	std	Y+7, r25	; 0x07
    381e:	8e 83       	std	Y+6, r24	; 0x06
    3820:	02 c0       	rjmp	.+4      	; 0x3826 <fputc+0x4c>
    3822:	0f ef       	ldi	r16, 0xFF	; 255
    3824:	1f ef       	ldi	r17, 0xFF	; 255
    3826:	c8 01       	movw	r24, r16
    3828:	df 91       	pop	r29
    382a:	cf 91       	pop	r28
    382c:	1f 91       	pop	r17
    382e:	0f 91       	pop	r16
    3830:	08 95       	ret

00003832 <__ultoa_invert>:
    3832:	fa 01       	movw	r30, r20
    3834:	aa 27       	eor	r26, r26
    3836:	28 30       	cpi	r18, 0x08	; 8
    3838:	51 f1       	breq	.+84     	; 0x388e <__ultoa_invert+0x5c>
    383a:	20 31       	cpi	r18, 0x10	; 16
    383c:	81 f1       	breq	.+96     	; 0x389e <__ultoa_invert+0x6c>
    383e:	e8 94       	clt
    3840:	6f 93       	push	r22
    3842:	6e 7f       	andi	r22, 0xFE	; 254
    3844:	6e 5f       	subi	r22, 0xFE	; 254
    3846:	7f 4f       	sbci	r23, 0xFF	; 255
    3848:	8f 4f       	sbci	r24, 0xFF	; 255
    384a:	9f 4f       	sbci	r25, 0xFF	; 255
    384c:	af 4f       	sbci	r26, 0xFF	; 255
    384e:	b1 e0       	ldi	r27, 0x01	; 1
    3850:	3e d0       	rcall	.+124    	; 0x38ce <__ultoa_invert+0x9c>
    3852:	b4 e0       	ldi	r27, 0x04	; 4
    3854:	3c d0       	rcall	.+120    	; 0x38ce <__ultoa_invert+0x9c>
    3856:	67 0f       	add	r22, r23
    3858:	78 1f       	adc	r23, r24
    385a:	89 1f       	adc	r24, r25
    385c:	9a 1f       	adc	r25, r26
    385e:	a1 1d       	adc	r26, r1
    3860:	68 0f       	add	r22, r24
    3862:	79 1f       	adc	r23, r25
    3864:	8a 1f       	adc	r24, r26
    3866:	91 1d       	adc	r25, r1
    3868:	a1 1d       	adc	r26, r1
    386a:	6a 0f       	add	r22, r26
    386c:	71 1d       	adc	r23, r1
    386e:	81 1d       	adc	r24, r1
    3870:	91 1d       	adc	r25, r1
    3872:	a1 1d       	adc	r26, r1
    3874:	20 d0       	rcall	.+64     	; 0x38b6 <__ultoa_invert+0x84>
    3876:	09 f4       	brne	.+2      	; 0x387a <__ultoa_invert+0x48>
    3878:	68 94       	set
    387a:	3f 91       	pop	r19
    387c:	2a e0       	ldi	r18, 0x0A	; 10
    387e:	26 9f       	mul	r18, r22
    3880:	11 24       	eor	r1, r1
    3882:	30 19       	sub	r19, r0
    3884:	30 5d       	subi	r19, 0xD0	; 208
    3886:	31 93       	st	Z+, r19
    3888:	de f6       	brtc	.-74     	; 0x3840 <__ultoa_invert+0xe>
    388a:	cf 01       	movw	r24, r30
    388c:	08 95       	ret
    388e:	46 2f       	mov	r20, r22
    3890:	47 70       	andi	r20, 0x07	; 7
    3892:	40 5d       	subi	r20, 0xD0	; 208
    3894:	41 93       	st	Z+, r20
    3896:	b3 e0       	ldi	r27, 0x03	; 3
    3898:	0f d0       	rcall	.+30     	; 0x38b8 <__ultoa_invert+0x86>
    389a:	c9 f7       	brne	.-14     	; 0x388e <__ultoa_invert+0x5c>
    389c:	f6 cf       	rjmp	.-20     	; 0x388a <__ultoa_invert+0x58>
    389e:	46 2f       	mov	r20, r22
    38a0:	4f 70       	andi	r20, 0x0F	; 15
    38a2:	40 5d       	subi	r20, 0xD0	; 208
    38a4:	4a 33       	cpi	r20, 0x3A	; 58
    38a6:	18 f0       	brcs	.+6      	; 0x38ae <__ultoa_invert+0x7c>
    38a8:	49 5d       	subi	r20, 0xD9	; 217
    38aa:	31 fd       	sbrc	r19, 1
    38ac:	40 52       	subi	r20, 0x20	; 32
    38ae:	41 93       	st	Z+, r20
    38b0:	02 d0       	rcall	.+4      	; 0x38b6 <__ultoa_invert+0x84>
    38b2:	a9 f7       	brne	.-22     	; 0x389e <__ultoa_invert+0x6c>
    38b4:	ea cf       	rjmp	.-44     	; 0x388a <__ultoa_invert+0x58>
    38b6:	b4 e0       	ldi	r27, 0x04	; 4
    38b8:	a6 95       	lsr	r26
    38ba:	97 95       	ror	r25
    38bc:	87 95       	ror	r24
    38be:	77 95       	ror	r23
    38c0:	67 95       	ror	r22
    38c2:	ba 95       	dec	r27
    38c4:	c9 f7       	brne	.-14     	; 0x38b8 <__ultoa_invert+0x86>
    38c6:	00 97       	sbiw	r24, 0x00	; 0
    38c8:	61 05       	cpc	r22, r1
    38ca:	71 05       	cpc	r23, r1
    38cc:	08 95       	ret
    38ce:	9b 01       	movw	r18, r22
    38d0:	ac 01       	movw	r20, r24
    38d2:	0a 2e       	mov	r0, r26
    38d4:	06 94       	lsr	r0
    38d6:	57 95       	ror	r21
    38d8:	47 95       	ror	r20
    38da:	37 95       	ror	r19
    38dc:	27 95       	ror	r18
    38de:	ba 95       	dec	r27
    38e0:	c9 f7       	brne	.-14     	; 0x38d4 <__ultoa_invert+0xa2>
    38e2:	62 0f       	add	r22, r18
    38e4:	73 1f       	adc	r23, r19
    38e6:	84 1f       	adc	r24, r20
    38e8:	95 1f       	adc	r25, r21
    38ea:	a0 1d       	adc	r26, r0
    38ec:	08 95       	ret

000038ee <_exit>:
    38ee:	f8 94       	cli

000038f0 <__stop_program>:
    38f0:	ff cf       	rjmp	.-2      	; 0x38f0 <__stop_program>
